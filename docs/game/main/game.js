// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ChoiceComponent = function(props) {
	React.Component.call(this,props);
};
ChoiceComponent.__name__ = true;
ChoiceComponent.__super__ = React.Component;
ChoiceComponent.prototype = $extend(React.Component.prototype,{
	render: function() {
		if(this.props.choice.visible || RequirementHelper.checkIfSatisfied(this.props.choice.requirements,this.props.variables)) {
			var requirementImages = this.props.choice.hideRequirements ? [{ $$typeof : $$tre, type : "div", props : { }, key : null, ref : null}] : this.requirements();
			var publicName = Helpers.unescape(this.props.choice.publicName);
			var description = Helpers.unescape(this.props.choice.description);
			var buttonComponent = this.button();
			return { $$typeof : $$tre, type : "div", props : { className : "choice", children : [{ $$typeof : $$tre, type : "h2", props : { children : publicName}, key : null, ref : null},{ $$typeof : $$tre, type : "p", props : { children : description}, key : null, ref : null},{ $$typeof : $$tre, type : "div", props : { className : "requirements", children : [requirementImages,buttonComponent]}, key : null, ref : null}]}, key : null, ref : null};
		}
		return null;
	}
	,requirements: function() {
		var processedRequirements = RequirementHelper.checkRequirements(this.props.choice.requirements,this.props.variables);
		var _g = [];
		var _g1 = 0;
		var _g2 = processedRequirements.fulfilled;
		while(_g1 < _g2.length) {
			var variable = _g2[_g1];
			++_g1;
			_g.push(this.requirementImage(variable,true));
		}
		var images = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = processedRequirements.unfulfilled;
		while(_g1 < _g2.length) {
			var variable = _g2[_g1];
			++_g1;
			_g.push(this.requirementImage(variable,false));
		}
		images = images.concat(_g);
		return images;
	}
	,requirementImage: function(variable,fulfilled) {
		var classNames = "requirement " + (fulfilled ? "fulfilled" : "unfulfilled");
		var imgName = Helpers.imagePath(variable.imageName);
		var title = variable.value ? variable.onSet : variable.onUnset;
		return { $$typeof : $$tre, type : VarImage, props : { source : imgName, desc : title, cssClass : classNames}, key : null, ref : null};
	}
	,button: function() {
		var _gthis = this;
		var className;
		var callback = function() {
			_gthis.props.variables.chooseChoice(_gthis.props.choice);
		};
		if(RequirementHelper.checkIfSatisfied(this.props.choice.requirements,this.props.variables)) {
			className = "enabled";
			return { $$typeof : $$tre, type : "button", props : { onClick : callback, className : className, children : "CHOISIR"}, key : null, ref : null};
		} else {
			className = "disabled";
			return { $$typeof : $$tre, type : "button", props : { className : className, children : "CHOISIR"}, key : null, ref : null};
		}
	}
});
var Game = function(props) {
	React.Component.call(this,props);
	this.state = { current : CurrentView.RoomView(props.story.rooms.main), story : this.props.story};
};
Game.__name__ = true;
Game.main = function() {
	var storyData = JSON.parse(haxe_Resource.getString("storyText"));
	ReactDOM.render({ $$typeof : $$tre, type : Game, props : { story : storyData}, key : null, ref : null},window.document.getElementById("container"));
};
Game.__super__ = React.Component;
Game.prototype = $extend(React.Component.prototype,{
	render: function() {
		var varkit = { variables : this.state.story.variables, nextRoom : $bind(this,this.nextRoom), chooseChoice : $bind(this,this.chooseChoice)};
		return { $$typeof : $$tre, type : "div", props : { className : "container", children : [{ $$typeof : $$tre, type : StoryPanel, props : { variables : varkit, story : this.state.story, progress : this.state.current}, key : null, ref : null},{ $$typeof : $$tre, type : VariablesPanel, props : { variableStruct : varkit.variables}, key : null, ref : null}]}, key : null, ref : null};
	}
	,nextRoom: function(choice) {
		this.setState({ current : CurrentView.RoomView(Reflect.field(this.state.story.rooms,choice.next)), story : this.state.story});
	}
	,chooseChoice: function(choice) {
		var newVariables = SideEffectHelper.computeDiffs(choice.sideeffects,this.state.story.variables);
		this.setState({ current : CurrentView.ChoiceView(choice), story : { rooms : this.state.story.rooms, variables : newVariables}});
	}
});
var Helpers = function() { };
Helpers.__name__ = true;
Helpers.unescape = function(str) {
	return str;
};
Helpers.imagePath = function(name) {
	if(name == null) {
		return "assets/empty.svg";
	} else {
		return "assets/" + name + ".svg";
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var RequirementHelper = function() { };
RequirementHelper.__name__ = true;
RequirementHelper.checkRequirements = function(reqs,vars) {
	var fulfilled = [];
	var unfulfilled = [];
	var shouldBe = function(variableName,expected) {
		var variable = Reflect.field(vars.variables,variableName);
		if(variable == null) {
			console.log("src/game/RequirementHelper.hx:13:","Unknown variable: " + variableName);
		}
		if(variable.value == expected) {
			fulfilled.push(variable);
		} else {
			unfulfilled.push(variable);
		}
	};
	var _g = 0;
	var _g1 = reqs.yes;
	while(_g < _g1.length) {
		var req = _g1[_g];
		++_g;
		shouldBe(req,true);
	}
	var _g = 0;
	var _g1 = reqs.no;
	while(_g < _g1.length) {
		var req = _g1[_g];
		++_g;
		shouldBe(req,false);
	}
	return { fulfilled : fulfilled, unfulfilled : unfulfilled};
};
RequirementHelper.checkIfSatisfied = function(requirements,variables) {
	return RequirementHelper.checkRequirements(requirements,variables).unfulfilled.length == 0;
};
RequirementHelper.fakeVarKit = function(variables) {
	return { variables : variables, nextRoom : function(choice) {
	}, chooseChoice : function(choice) {
	}};
};
var ResultPanel = function(props) {
	React.Component.call(this,props);
};
ResultPanel.__name__ = true;
ResultPanel.__super__ = React.Component;
ResultPanel.prototype = $extend(React.Component.prototype,{
	render: function() {
		var _gthis = this;
		var info = this.heading();
		var consequences = this.sideEffects();
		var callback = function() {
			return _gthis.props.variables.nextRoom(_gthis.props.choice);
		};
		var button = this.props.choice.next != null ? { $$typeof : $$tre, type : "button", props : { onClick : callback, className : "enabled", children : "CONTINUER"}, key : null, ref : null} : { $$typeof : $$tre, type : "div", props : { }, key : null, ref : null};
		return { $$typeof : $$tre, type : "div", props : { id : "results", children : [info,{ $$typeof : $$tre, type : "div", props : { id : "consequences", children : [consequences,button]}, key : null, ref : null}]}, key : null, ref : null};
	}
	,heading: function() {
		var choiceName = Helpers.unescape(this.props.choice.publicName);
		var body = Helpers.unescape(this.props.choice.body);
		return { $$typeof : $$tre, type : "div", props : { id : "roomInfo", children : [{ $$typeof : $$tre, type : "h2", props : { children : choiceName}, key : null, ref : null},{ $$typeof : $$tre, type : "p", props : { children : body}, key : null, ref : null}]}, key : null, ref : null};
	}
	,sideEffects: function() {
		var _gthis = this;
		var _this = Reflect.fields(SideEffectHelper.computeRippledEffects(this.props.choice.sideeffects,this.props.variables));
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = Reflect.field(_gthis.props.choice.sideeffects,_this[i]);
		}
		var _this = Lambda.fold(result,function(current,acc) {
			return acc.concat(current);
		},[]);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = Reflect.field(_gthis.props.variables.variables,_this[i]);
		}
		var _this = result;
		var f = $bind(this,this.sideEffectDesc);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(_this[i]);
		}
		var consequenceComponents = result;
		return consequenceComponents;
	}
	,sideEffectDesc: function(variable) {
		var text = variable.value ? variable.onSet : variable.onUnset;
		var imageName = Helpers.imagePath(variable.imageName);
		return { $$typeof : $$tre, type : "div", props : { className : "consequence", children : [{ $$typeof : $$tre, type : "img", props : { src : imageName}, key : null, ref : null},{ $$typeof : $$tre, type : "p", props : { className : "consequenceText", children : text}, key : null, ref : null}]}, key : null, ref : null};
	}
});
var RoomPanel = function(props) {
	React.Component.call(this,props);
};
RoomPanel.__name__ = true;
RoomPanel.__super__ = React.Component;
RoomPanel.prototype = $extend(React.Component.prototype,{
	render: function() {
		var _gthis = this;
		var roomDesc = this.heading();
		var _this = this.props.room.choices;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = { $$typeof : $$tre, type : ChoiceComponent, props : { variables : _gthis.props.variables, choice : _this[i]}, key : null, ref : null};
		}
		var choiceElements = result;
		return { $$typeof : $$tre, type : "div", props : { id : "room", children : [roomDesc,{ $$typeof : $$tre, type : "div", props : { id : "choiceList", children : choiceElements}, key : null, ref : null}]}, key : null, ref : null};
	}
	,heading: function() {
		var publicName = Helpers.unescape(this.props.room.publicName);
		var description = Helpers.unescape(this.props.room.description);
		return { $$typeof : $$tre, type : "div", props : { id : "roomInfo", children : [{ $$typeof : $$tre, type : "h1", props : { children : publicName}, key : null, ref : null},{ $$typeof : $$tre, type : "p", props : { children : description}, key : null, ref : null}]}, key : null, ref : null};
	}
});
var SideEffectHelper = function() { };
SideEffectHelper.__name__ = true;
SideEffectHelper.computeDiffsOnce = function(effects,vars) {
	var nextVars = Reflect.copy(vars);
	var toEach = function(names,operation) {
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			var newVariable = Reflect.copy(Reflect.field(vars,name));
			if(newVariable == null) {
				continue;
			}
			newVariable.value = operation(newVariable.value);
			nextVars[name] = newVariable;
		}
	};
	toEach(effects.set,function(_) {
		return true;
	});
	toEach(effects.unset,function(_) {
		return false;
	});
	toEach(effects.flip,function(val) {
		return !val;
	});
	return nextVars;
};
SideEffectHelper.computeDiffs = function(effects,vars) {
	var nextDiffs = { set : [], unset : [], flip : []};
	var newVariables = SideEffectHelper.computeDiffsOnce(effects,vars);
	while(true) {
		var _g = [];
		var _g1 = 0;
		var _g2 = Reflect.fields(newVariables);
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(Reflect.field(newVariables,v).value == true) {
				_g.push(v);
			}
		}
		var _g3 = [];
		var _g4 = 0;
		var _g5 = _g;
		while(_g4 < _g5.length) {
			var v1 = _g5[_g4];
			++_g4;
			if(Reflect.field(newVariables,v1).removeIf != null) {
				_g3.push(v1);
			}
		}
		var _g6 = [];
		var _g7 = 0;
		var _g8 = _g3;
		while(_g7 < _g8.length) {
			var v2 = _g8[_g7];
			++_g7;
			if(RequirementHelper.checkIfSatisfied(Reflect.field(newVariables,v2).removeIf,RequirementHelper.fakeVarKit(newVariables))) {
				_g6.push(v2);
			}
		}
		nextDiffs.unset = _g6;
		newVariables = SideEffectHelper.computeDiffsOnce(nextDiffs,newVariables);
		if(!(nextDiffs.unset.length != 0)) {
			break;
		}
	}
	return newVariables;
};
SideEffectHelper.computeRippledEffects = function(effects,vars) {
	var concatNoDups = function(baseArray,appendedArray) {
		var _g = 0;
		while(_g < appendedArray.length) {
			var elem = appendedArray[_g];
			++_g;
			if(baseArray.indexOf(elem) == -1) {
				baseArray.push(elem);
			}
		}
		return baseArray;
	};
	var endDiffs = Reflect.copy(effects);
	var newVariables = SideEffectHelper.computeDiffsOnce(effects,vars);
	var concatNoDups1 = concatNoDups;
	var endDiffs1 = endDiffs.unset;
	var _g = [];
	var _g1 = 0;
	var _g2 = Reflect.fields(newVariables);
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(Reflect.field(newVariables,v).value == true) {
			_g.push(v);
		}
	}
	var _g1 = [];
	var _g2 = 0;
	var _g3 = _g;
	while(_g2 < _g3.length) {
		var v = _g3[_g2];
		++_g2;
		if(Reflect.field(newVariables,v).removeIf != null) {
			_g1.push(v);
		}
	}
	var _g = [];
	var _g2 = 0;
	var _g3 = _g1;
	while(_g2 < _g3.length) {
		var v = _g3[_g2];
		++_g2;
		if(RequirementHelper.checkIfSatisfied(Reflect.field(newVariables,v).removeIf,RequirementHelper.fakeVarKit(newVariables))) {
			_g.push(v);
		}
	}
	concatNoDups1(endDiffs1,_g);
	return endDiffs;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StoryPanel = function(props) {
	React.Component.call(this,props);
	this.state = this.props.progress;
};
StoryPanel.__name__ = true;
StoryPanel.__super__ = React.Component;
StoryPanel.prototype = $extend(React.Component.prototype,{
	componentDidUpdate: function(prevProps,_) {
		if(prevProps != this.props) {
			this.setState(this.props.progress);
			window.document.getElementById("story").scrollTop = 0;
		}
	}
	,render: function() {
		var mainElement;
		var _g = this.state;
		switch(_g._hx_index) {
		case 0:
			var room = _g.room;
			mainElement = { $$typeof : $$tre, type : RoomPanel, props : { variables : this.props.variables, room : room}, key : null, ref : null};
			break;
		case 1:
			var choice = _g.choice;
			mainElement = { $$typeof : $$tre, type : ResultPanel, props : { variables : this.props.variables, choice : choice}, key : null, ref : null};
			break;
		}
		return { $$typeof : $$tre, type : "div", props : { id : "story", children : mainElement}, key : null, ref : null};
	}
});
var Tooltip = function(props) {
	this.viewportDimensions = { x : 0, y : 0};
	React.Component.call(this,props);
	this.state = null;
	var body = window.document.getElementsByTagName("body")[0];
	this.viewportDimensions = { x : body.clientWidth + 16, y : body.clientHeight + 16};
};
Tooltip.__name__ = true;
Tooltip.__super__ = React.Component;
Tooltip.prototype = $extend(React.Component.prototype,{
	componentDidUpdate: function(prevProps,_) {
		if(prevProps != this.props) {
			this.state = window.document.getElementById("tooltip");
			var tmp = Std.string(this.props.pos.y.toString());
			this.state.style.top = tmp + "px";
			this.state.style.right = Std.string(this.viewportDimensions.x - this.props.pos.x) + "px";
		}
	}
	,render: function() {
		return { $$typeof : $$tre, type : "div", props : { id : "tooltip", children : { $$typeof : $$tre, type : "p", props : { children : this.props.text}, key : null, ref : null}}, key : null, ref : null};
	}
});
var Types = function() { };
Types.__name__ = true;
var CurrentView = $hxEnums["CurrentView"] = { __ename__:true,__constructs__:null
	,RoomView: ($_=function(room) { return {_hx_index:0,room:room,__enum__:"CurrentView",toString:$estr}; },$_._hx_name="RoomView",$_.__params__ = ["room"],$_)
	,ChoiceView: ($_=function(choice) { return {_hx_index:1,choice:choice,__enum__:"CurrentView",toString:$estr}; },$_._hx_name="ChoiceView",$_.__params__ = ["choice"],$_)
};
CurrentView.__constructs__ = [CurrentView.RoomView,CurrentView.ChoiceView];
var VarImage = function(props) {
	this.viewportDimensions = { x : 0, y : 0};
	React.Component.call(this,props);
	this.state = { showTooltip : false, pos : { x : 0, y : 0}};
	var body = window.document.getElementsByTagName("body")[0];
	this.viewportDimensions = { x : body.clientWidth + 16, y : body.clientHeight + 16};
	this.current = body;
};
VarImage.__name__ = true;
VarImage.__super__ = React.Component;
VarImage.prototype = $extend(React.Component.prototype,{
	activateTooltip: function() {
		this.setState({ showTooltip : true});
	}
	,deactivateTooltip: function() {
		this.setState({ showTooltip : false});
	}
	,moveTooltip: function(event) {
		if(this.current == null || event.pageX > this.current.getBoundingClientRect().left) {
			this.setState({ showTooltip : true, pos : { x : event.pageX, y : event.pageY}});
		} else {
			this.setState({ showTooltip : false});
		}
	}
	,render: function() {
		var tooltip = { $$typeof : $$tre, type : "div", props : { }, key : null, ref : null};
		var youAreTheOne = "";
		if(this.state.showTooltip) {
			tooltip = { $$typeof : $$tre, type : Tooltip, props : { text : this.props.desc, pos : this.state.pos}, key : null, ref : null};
			youAreTheOne = "currentHovered";
			this.current = window.document.getElementById("currentHovered");
		} else {
			tooltip = { $$typeof : $$tre, type : "div", props : { }, key : null, ref : null};
		}
		return { $$typeof : $$tre, type : "div", props : { onMouseMove : $bind(this,this.moveTooltip), onMouseLeave : $bind(this,this.deactivateTooltip), onMouseEnter : $bind(this,this.activateTooltip), id : youAreTheOne, children : [{ $$typeof : $$tre, type : "img", props : { src : this.props.source, className : this.props.cssClass}, key : null, ref : null},tooltip]}, key : null, ref : null};
	}
});
var VariablesPanel = function(props) {
	React.Component.call(this,props);
	this.state = { variableStruct : this.getVariableList()};
};
VariablesPanel.__name__ = true;
VariablesPanel.makeVariableImage = function(variable) {
	var imageName = Helpers.imagePath(variable.imageName);
	return { $$typeof : $$tre, type : VarImage, props : { source : imageName, desc : variable.onSet, cssClass : "varimage"}, key : null, ref : null};
};
VariablesPanel.__super__ = React.Component;
VariablesPanel.prototype = $extend(React.Component.prototype,{
	componentDidUpdate: function(prevProps,_) {
		if(this.props != prevProps) {
			this.setState({ variableStruct : this.getVariableList()});
		}
	}
	,render: function() {
		var variableElements = this.state.variableStruct.map(VariablesPanel.makeVariableImage);
		return { $$typeof : $$tre, type : "div", props : { id : "inventory", children : variableElements}, key : null, ref : null};
	}
	,getVariableList: function() {
		var _gthis = this;
		var shouldVariableBeShown = function(variable) {
			var fakeMutationKit = RequirementHelper.fakeVarKit(_gthis.props.variableStruct);
			return RequirementHelper.checkIfSatisfied(variable.showIf,fakeMutationKit);
		};
		var variableList = [];
		var _g = 0;
		var _g1 = Reflect.fields(this.props.variableStruct);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			variableList.push(Reflect.getProperty(this.props.variableStruct,field));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = variableList;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.value) {
				_g.push(v);
			}
		}
		var f = shouldVariableBeShown;
		var _g1 = [];
		var _g2 = 0;
		var _g3 = _g;
		while(_g2 < _g3.length) {
			var v = _g3[_g2];
			++_g2;
			if(f(v)) {
				_g1.push(v);
			}
		}
		return _g1;
	}
});
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__properties__: {get_native:"get_native"}
});
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var react_Partial = function() { };
react_Partial.__name__ = true;
var react_PartialMacro = function() { };
react_PartialMacro.__name__ = true;
var react_ReactMacro = function() { };
react_ReactMacro.__name__ = true;
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
haxe_Resource.content = [{ name : "storyText", data : ""}];
js_Boot.__toStr = ({ }).toString;
ChoiceComponent.displayName = "ChoiceComponent";
Game.displayName = "Game";
ResultPanel.displayName = "ResultPanel";
RoomPanel.displayName = "RoomPanel";
StoryPanel.displayName = "StoryPanel";
Tooltip.displayName = "Tooltip";
VarImage.displayName = "VarImage";
VariablesPanel.displayName = "VariablesPanel";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
Game.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
