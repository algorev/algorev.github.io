// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ChoiceComponent = function(props) {
	React.Component.call(this,props);
};
ChoiceComponent.__name__ = true;
ChoiceComponent.__super__ = React.Component;
ChoiceComponent.prototype = $extend(React.Component.prototype,{
	render: function() {
		if(this.props.choice.visible || RequirementHelper.checkIfSatisfied(this.props.choice.requirements,this.props.variables)) {
			var requirementImages = this.props.choice.hideRequirements ? [{ $$typeof : $$tre, type : "div", props : { }, key : null, ref : null}] : this.requirements();
			var publicName = Helpers.unescape(this.props.choice.publicName);
			var description = Helpers.unescape(this.props.choice.description);
			var buttonComponent = this.button();
			return { $$typeof : $$tre, type : "div", props : { className : "choice", children : [{ $$typeof : $$tre, type : "h2", props : { children : publicName}, key : null, ref : null},{ $$typeof : $$tre, type : "p", props : { children : description}, key : null, ref : null},{ $$typeof : $$tre, type : "div", props : { className : "requirements", children : [requirementImages,buttonComponent]}, key : null, ref : null}]}, key : null, ref : null};
		}
		return null;
	}
	,requirements: function() {
		var processedRequirements = RequirementHelper.checkRequirements(this.props.choice.requirements,this.props.variables);
		var _g = [];
		var _g1 = 0;
		var _g2 = processedRequirements.fulfilled;
		while(_g1 < _g2.length) {
			var variable = _g2[_g1];
			++_g1;
			_g.push(this.requirementImage(variable,true));
		}
		var images = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = processedRequirements.unfulfilled;
		while(_g1 < _g2.length) {
			var variable = _g2[_g1];
			++_g1;
			_g.push(this.requirementImage(variable,false));
		}
		images = images.concat(_g);
		return images;
	}
	,requirementImage: function(variable,fulfilled) {
		var classNames = "requirement " + (fulfilled ? "fulfilled" : "unfulfilled");
		var imgName = Helpers.imagePath(variable.imageName);
		var title = variable.value ? variable.onSet : variable.onUnset;
		return { $$typeof : $$tre, type : VarImage, props : { source : imgName, desc : title, cssClass : classNames}, key : null, ref : null};
	}
	,button: function() {
		var _gthis = this;
		var className;
		var callback = function() {
			_gthis.props.variables.chooseChoice(_gthis.props.choice);
		};
		if(RequirementHelper.checkIfSatisfied(this.props.choice.requirements,this.props.variables)) {
			className = "enabled";
			return { $$typeof : $$tre, type : "button", props : { onClick : callback, className : className, children : "CHOISIR"}, key : null, ref : null};
		} else {
			className = "disabled";
			return { $$typeof : $$tre, type : "button", props : { className : className, children : "CHOISIR"}, key : null, ref : null};
		}
	}
});
var Game = function(props) {
	React.Component.call(this,props);
	this.state = { current : CurrentView.RoomView(props.story.rooms.main), story : this.props.story};
};
Game.__name__ = true;
Game.main = function() {
	var storyData = JSON.parse(haxe_Resource.getString("storyText"));
	ReactDOM.render({ $$typeof : $$tre, type : Game, props : { story : storyData}, key : null, ref : null},window.document.getElementById("container"));
};
Game.__super__ = React.Component;
Game.prototype = $extend(React.Component.prototype,{
	render: function() {
		var varkit = { variables : this.state.story.variables, nextRoom : $bind(this,this.nextRoom), chooseChoice : $bind(this,this.chooseChoice)};
		return { $$typeof : $$tre, type : "div", props : { className : "container", children : [{ $$typeof : $$tre, type : StoryPanel, props : { variables : varkit, story : this.state.story, progress : this.state.current}, key : null, ref : null},{ $$typeof : $$tre, type : VariablesPanel, props : { variableStruct : varkit.variables}, key : null, ref : null}]}, key : null, ref : null};
	}
	,nextRoom: function(choice) {
		this.setState({ current : CurrentView.RoomView(Reflect.field(this.state.story.rooms,choice.next)), story : this.state.story});
	}
	,chooseChoice: function(choice) {
		var newVariables = SideEffectHelper.computeDiffs(choice.sideeffects,this.state.story.variables);
		this.setState({ current : CurrentView.ChoiceView(choice), story : { rooms : this.state.story.rooms, variables : newVariables}});
	}
});
var Helpers = function() { };
Helpers.__name__ = true;
Helpers.unescape = function(str) {
	return str;
};
Helpers.imagePath = function(name) {
	if(name == null) {
		return "assets/empty.svg";
	} else {
		return "assets/" + name + ".svg";
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var RequirementHelper = function() { };
RequirementHelper.__name__ = true;
RequirementHelper.checkRequirements = function(reqs,vars) {
	var fulfilled = [];
	var unfulfilled = [];
	var shouldBe = function(variableName,expected) {
		var variable = Reflect.field(vars.variables,variableName);
		if(variable == null) {
			console.log("src/game/RequirementHelper.hx:13:","Unknown variable: " + variableName);
		}
		if(variable.value == expected) {
			fulfilled.push(variable);
		} else {
			unfulfilled.push(variable);
		}
	};
	var _g = 0;
	var _g1 = reqs.yes;
	while(_g < _g1.length) {
		var req = _g1[_g];
		++_g;
		shouldBe(req,true);
	}
	var _g = 0;
	var _g1 = reqs.no;
	while(_g < _g1.length) {
		var req = _g1[_g];
		++_g;
		shouldBe(req,false);
	}
	return { fulfilled : fulfilled, unfulfilled : unfulfilled};
};
RequirementHelper.checkIfSatisfied = function(requirements,variables) {
	return RequirementHelper.checkRequirements(requirements,variables).unfulfilled.length == 0;
};
RequirementHelper.fakeVarKit = function(variables) {
	return { variables : variables, nextRoom : function(choice) {
	}, chooseChoice : function(choice) {
	}};
};
var ResultPanel = function(props) {
	React.Component.call(this,props);
};
ResultPanel.__name__ = true;
ResultPanel.__super__ = React.Component;
ResultPanel.prototype = $extend(React.Component.prototype,{
	render: function() {
		var _gthis = this;
		var info = this.heading();
		var consequences = this.sideEffects();
		var callback = function() {
			return _gthis.props.variables.nextRoom(_gthis.props.choice);
		};
		var button = this.props.choice.next != null ? { $$typeof : $$tre, type : "button", props : { onClick : callback, className : "enabled", children : "CONTINUER"}, key : null, ref : null} : { $$typeof : $$tre, type : "div", props : { }, key : null, ref : null};
		return { $$typeof : $$tre, type : "div", props : { id : "results", children : [info,{ $$typeof : $$tre, type : "div", props : { id : "consequences", children : [consequences,button]}, key : null, ref : null}]}, key : null, ref : null};
	}
	,heading: function() {
		var choiceName = Helpers.unescape(this.props.choice.publicName);
		var body = Helpers.unescape(this.props.choice.body);
		return { $$typeof : $$tre, type : "div", props : { id : "roomInfo", children : [{ $$typeof : $$tre, type : "h2", props : { children : choiceName}, key : null, ref : null},{ $$typeof : $$tre, type : "p", props : { children : body}, key : null, ref : null}]}, key : null, ref : null};
	}
	,sideEffects: function() {
		var _gthis = this;
		var _this = Reflect.fields(SideEffectHelper.computeRippledEffects(this.props.choice.sideeffects,this.props.variables));
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = Reflect.field(_gthis.props.choice.sideeffects,_this[i]);
		}
		var _this = Lambda.fold(result,function(current,acc) {
			return acc.concat(current);
		},[]);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = Reflect.field(_gthis.props.variables.variables,_this[i]);
		}
		var _this = result;
		var f = $bind(this,this.sideEffectDesc);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(_this[i]);
		}
		var consequenceComponents = result;
		return consequenceComponents;
	}
	,sideEffectDesc: function(variable) {
		var text = variable.value ? variable.onSet : variable.onUnset;
		var imageName = Helpers.imagePath(variable.imageName);
		return { $$typeof : $$tre, type : "div", props : { className : "consequence", children : [{ $$typeof : $$tre, type : "img", props : { src : imageName}, key : null, ref : null},{ $$typeof : $$tre, type : "p", props : { className : "consequenceText", children : text}, key : null, ref : null}]}, key : null, ref : null};
	}
});
var RoomPanel = function(props) {
	React.Component.call(this,props);
};
RoomPanel.__name__ = true;
RoomPanel.__super__ = React.Component;
RoomPanel.prototype = $extend(React.Component.prototype,{
	render: function() {
		var _gthis = this;
		var roomDesc = this.heading();
		var _this = this.props.room.choices;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = { $$typeof : $$tre, type : ChoiceComponent, props : { variables : _gthis.props.variables, choice : _this[i]}, key : null, ref : null};
		}
		var choiceElements = result;
		return { $$typeof : $$tre, type : "div", props : { id : "room", children : [roomDesc,{ $$typeof : $$tre, type : "div", props : { id : "choiceList", children : choiceElements}, key : null, ref : null}]}, key : null, ref : null};
	}
	,heading: function() {
		var publicName = Helpers.unescape(this.props.room.publicName);
		var description = Helpers.unescape(this.props.room.description);
		return { $$typeof : $$tre, type : "div", props : { id : "roomInfo", children : [{ $$typeof : $$tre, type : "h1", props : { children : publicName}, key : null, ref : null},{ $$typeof : $$tre, type : "p", props : { children : description}, key : null, ref : null}]}, key : null, ref : null};
	}
});
var SideEffectHelper = function() { };
SideEffectHelper.__name__ = true;
SideEffectHelper.computeDiffsOnce = function(effects,vars) {
	var nextVars = Reflect.copy(vars);
	var toEach = function(names,operation) {
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			var newVariable = Reflect.copy(Reflect.field(vars,name));
			if(newVariable == null) {
				continue;
			}
			newVariable.value = operation(newVariable.value);
			nextVars[name] = newVariable;
		}
	};
	toEach(effects.set,function(_) {
		return true;
	});
	toEach(effects.unset,function(_) {
		return false;
	});
	toEach(effects.flip,function(val) {
		return !val;
	});
	return nextVars;
};
SideEffectHelper.computeDiffs = function(effects,vars) {
	var nextDiffs = { set : [], unset : [], flip : []};
	var newVariables = SideEffectHelper.computeDiffsOnce(effects,vars);
	while(true) {
		var _g = [];
		var _g1 = 0;
		var _g2 = Reflect.fields(newVariables);
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(Reflect.field(newVariables,v).value == true) {
				_g.push(v);
			}
		}
		var _g3 = [];
		var _g4 = 0;
		var _g5 = _g;
		while(_g4 < _g5.length) {
			var v1 = _g5[_g4];
			++_g4;
			if(Reflect.field(newVariables,v1).removeIf != null) {
				_g3.push(v1);
			}
		}
		var _g6 = [];
		var _g7 = 0;
		var _g8 = _g3;
		while(_g7 < _g8.length) {
			var v2 = _g8[_g7];
			++_g7;
			if(RequirementHelper.checkIfSatisfied(Reflect.field(newVariables,v2).removeIf,RequirementHelper.fakeVarKit(newVariables))) {
				_g6.push(v2);
			}
		}
		nextDiffs.unset = _g6;
		newVariables = SideEffectHelper.computeDiffsOnce(nextDiffs,newVariables);
		if(!(nextDiffs.unset.length != 0)) {
			break;
		}
	}
	return newVariables;
};
SideEffectHelper.computeRippledEffects = function(effects,vars) {
	var concatNoDups = function(baseArray,appendedArray) {
		var _g = 0;
		while(_g < appendedArray.length) {
			var elem = appendedArray[_g];
			++_g;
			if(baseArray.indexOf(elem) == -1) {
				baseArray.push(elem);
			}
		}
		return baseArray;
	};
	var endDiffs = Reflect.copy(effects);
	var newVariables = SideEffectHelper.computeDiffsOnce(effects,vars);
	var concatNoDups1 = concatNoDups;
	var endDiffs1 = endDiffs.unset;
	var _g = [];
	var _g1 = 0;
	var _g2 = Reflect.fields(newVariables);
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(Reflect.field(newVariables,v).value == true) {
			_g.push(v);
		}
	}
	var _g1 = [];
	var _g2 = 0;
	var _g3 = _g;
	while(_g2 < _g3.length) {
		var v = _g3[_g2];
		++_g2;
		if(Reflect.field(newVariables,v).removeIf != null) {
			_g1.push(v);
		}
	}
	var _g = [];
	var _g2 = 0;
	var _g3 = _g1;
	while(_g2 < _g3.length) {
		var v = _g3[_g2];
		++_g2;
		if(RequirementHelper.checkIfSatisfied(Reflect.field(newVariables,v).removeIf,RequirementHelper.fakeVarKit(newVariables))) {
			_g.push(v);
		}
	}
	concatNoDups1(endDiffs1,_g);
	return endDiffs;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StoryPanel = function(props) {
	React.Component.call(this,props);
	this.state = this.props.progress;
};
StoryPanel.__name__ = true;
StoryPanel.__super__ = React.Component;
StoryPanel.prototype = $extend(React.Component.prototype,{
	componentDidUpdate: function(prevProps,_) {
		if(prevProps != this.props) {
			this.setState(this.props.progress);
			window.document.getElementById("story").scrollTop = 0;
		}
	}
	,render: function() {
		var mainElement;
		var _g = this.state;
		switch(_g._hx_index) {
		case 0:
			var room = _g.room;
			mainElement = { $$typeof : $$tre, type : RoomPanel, props : { variables : this.props.variables, room : room}, key : null, ref : null};
			break;
		case 1:
			var choice = _g.choice;
			mainElement = { $$typeof : $$tre, type : ResultPanel, props : { variables : this.props.variables, choice : choice}, key : null, ref : null};
			break;
		}
		return { $$typeof : $$tre, type : "div", props : { id : "story", children : mainElement}, key : null, ref : null};
	}
});
var Tooltip = function(props) {
	this.viewportDimensions = { x : 0, y : 0};
	React.Component.call(this,props);
	this.state = null;
	var body = window.document.getElementsByTagName("body")[0];
	this.viewportDimensions = { x : body.clientWidth + 16, y : body.clientHeight + 16};
};
Tooltip.__name__ = true;
Tooltip.__super__ = React.Component;
Tooltip.prototype = $extend(React.Component.prototype,{
	componentDidUpdate: function(prevProps,_) {
		if(prevProps != this.props) {
			this.state = window.document.getElementById("tooltip");
			var tmp = Std.string(this.props.pos.y.toString());
			this.state.style.top = tmp + "px";
			this.state.style.right = Std.string(this.viewportDimensions.x - this.props.pos.x) + "px";
		}
	}
	,render: function() {
		return { $$typeof : $$tre, type : "div", props : { id : "tooltip", children : { $$typeof : $$tre, type : "p", props : { children : this.props.text}, key : null, ref : null}}, key : null, ref : null};
	}
});
var Types = function() { };
Types.__name__ = true;
var CurrentView = $hxEnums["CurrentView"] = { __ename__:true,__constructs__:null
	,RoomView: ($_=function(room) { return {_hx_index:0,room:room,__enum__:"CurrentView",toString:$estr}; },$_._hx_name="RoomView",$_.__params__ = ["room"],$_)
	,ChoiceView: ($_=function(choice) { return {_hx_index:1,choice:choice,__enum__:"CurrentView",toString:$estr}; },$_._hx_name="ChoiceView",$_.__params__ = ["choice"],$_)
};
CurrentView.__constructs__ = [CurrentView.RoomView,CurrentView.ChoiceView];
var VarImage = function(props) {
	this.viewportDimensions = { x : 0, y : 0};
	React.Component.call(this,props);
	this.state = { showTooltip : false, pos : { x : 0, y : 0}};
	var body = window.document.getElementsByTagName("body")[0];
	this.viewportDimensions = { x : body.clientWidth + 16, y : body.clientHeight + 16};
	this.current = body;
};
VarImage.__name__ = true;
VarImage.__super__ = React.Component;
VarImage.prototype = $extend(React.Component.prototype,{
	activateTooltip: function() {
		this.setState({ showTooltip : true});
	}
	,deactivateTooltip: function() {
		this.setState({ showTooltip : false});
	}
	,moveTooltip: function(event) {
		if(this.current == null || event.pageX > this.current.getBoundingClientRect().left) {
			this.setState({ showTooltip : true, pos : { x : event.pageX, y : event.pageY}});
		} else {
			this.setState({ showTooltip : false});
		}
	}
	,render: function() {
		var tooltip = { $$typeof : $$tre, type : "div", props : { }, key : null, ref : null};
		var youAreTheOne = "";
		if(this.state.showTooltip) {
			tooltip = { $$typeof : $$tre, type : Tooltip, props : { text : this.props.desc, pos : this.state.pos}, key : null, ref : null};
			youAreTheOne = "currentHovered";
			this.current = window.document.getElementById("currentHovered");
		} else {
			tooltip = { $$typeof : $$tre, type : "div", props : { }, key : null, ref : null};
		}
		return { $$typeof : $$tre, type : "div", props : { onMouseMove : $bind(this,this.moveTooltip), onMouseLeave : $bind(this,this.deactivateTooltip), onMouseEnter : $bind(this,this.activateTooltip), id : youAreTheOne, children : [{ $$typeof : $$tre, type : "img", props : { src : this.props.source, className : this.props.cssClass}, key : null, ref : null},tooltip]}, key : null, ref : null};
	}
});
var VariablesPanel = function(props) {
	React.Component.call(this,props);
	this.state = { variableStruct : this.getVariableList()};
};
VariablesPanel.__name__ = true;
VariablesPanel.makeVariableImage = function(variable) {
	var imageName = Helpers.imagePath(variable.imageName);
	return { $$typeof : $$tre, type : VarImage, props : { source : imageName, desc : variable.onSet, cssClass : "varimage"}, key : null, ref : null};
};
VariablesPanel.__super__ = React.Component;
VariablesPanel.prototype = $extend(React.Component.prototype,{
	componentDidUpdate: function(prevProps,_) {
		if(this.props != prevProps) {
			this.setState({ variableStruct : this.getVariableList()});
		}
	}
	,render: function() {
		var variableElements = this.state.variableStruct.map(VariablesPanel.makeVariableImage);
		return { $$typeof : $$tre, type : "div", props : { id : "inventory", children : variableElements}, key : null, ref : null};
	}
	,getVariableList: function() {
		var _gthis = this;
		var shouldVariableBeShown = function(variable) {
			var fakeMutationKit = RequirementHelper.fakeVarKit(_gthis.props.variableStruct);
			return RequirementHelper.checkIfSatisfied(variable.showIf,fakeMutationKit);
		};
		var variableList = [];
		var _g = 0;
		var _g1 = Reflect.fields(this.props.variableStruct);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			variableList.push(Reflect.getProperty(this.props.variableStruct,field));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = variableList;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.value) {
				_g.push(v);
			}
		}
		var f = shouldVariableBeShown;
		var _g1 = [];
		var _g2 = 0;
		var _g3 = _g;
		while(_g2 < _g3.length) {
			var v = _g3[_g2];
			++_g2;
			if(f(v)) {
				_g1.push(v);
			}
		}
		return _g1;
	}
});
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__properties__: {get_native:"get_native"}
});
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var react_Partial = function() { };
react_Partial.__name__ = true;
var react_PartialMacro = function() { };
react_PartialMacro.__name__ = true;
var react_ReactMacro = function() { };
react_ReactMacro.__name__ = true;
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
haxe_Resource.content = [{ name : "storyText", data : "eyJ2YXJpYWJsZXMiOnsicnVlcyI6eyJpbWFnZU5hbWUiOiJydWVzIiwib25TZXQiOiJWb3VzIMOqdGVzIGRhbnMgbGVzIHJ1ZXMgZGUgbGEgdmlsbGUuIiwib25VbnNldCI6IlZvdXMgbifDqnRlcyBwbHVzIGRhbnMgbGVzIHJ1ZXMgZGUgbGEgdmlsbGUuIiwic2hvd0lmIjp7InllcyI6W10sIm5vIjpbXX0sInJlbW92ZUlmIjpudWxsLCJ2YWx1ZSI6ZmFsc2V9LCJhcHBhcnRlbWVudCI6eyJpbWFnZU5hbWUiOiJhcHBhcnRlbWVudCIsIm9uU2V0IjoiVm91cyDDqnRlcyBjaGV6IHZvdXMuIiwib25VbnNldCI6IlZvdXMgbifDqnRlcyBwbHVzIGNoZXogdm91cy4iLCJzaG93SWYiOnsieWVzIjpbXSwibm8iOltdfSwicmVtb3ZlSWYiOm51bGwsInZhbHVlIjpmYWxzZX0sIm9ic2VydmVQYXJDaGF0Ijp7ImltYWdlTmFtZSI6Im9ic2VydmVQYXJDaGF0Iiwib25TZXQiOiJPbiB2b3VzIG9ic2VydmFpdC4iLCJvblVuc2V0IjoiT24gdm91cyBvYnNlcnZlLiIsInNob3dJZiI6eyJ5ZXMiOltdLCJubyI6W119LCJyZW1vdmVJZiI6bnVsbCwidmFsdWUiOmZhbHNlfSwidmVyaWZpZXJMYWl0Ijp7ImltYWdlTmFtZSI6InZlcmlmaWVyTGFpdCIsIm9uU2V0IjoiQWxsZXogdm9pciBsZSBib2wgZGUgbGFpdCBzdXIgbGEgZmVuw6p0cmUgYXZhbnQgZCdhbGxlciBkb3JtaXIuIiwib25VbnNldCI6IlZvdXMgYXZleiByZW1wbGkgbGUgYm9sIGRlIGxhaXQuIiwic2hvd0lmIjp7InllcyI6W10sIm5vIjpbXX0sInJlbW92ZUlmIjpudWxsLCJ2YWx1ZSI6ZmFsc2V9LCJlblRyYWluRGVEb3JtaXIiOnsiaW1hZ2VOYW1lIjoiZG9ybWlyIiwib25TZXQiOiJWb3VzIMOqdGVzIGVuIHRyYWluIGRlIGRvcm1pci4iLCJvblVuc2V0IjoiVm91cyDDqnRlcyByw6l2ZWlsbMOpZS4iLCJzaG93SWYiOnsieWVzIjpbXSwibm8iOltdfSwicmVtb3ZlSWYiOm51bGwsInZhbHVlIjpmYWxzZX0sInRvaXRzIjp7ImltYWdlTmFtZSI6InRvaXRzIiwib25TZXQiOiJWb3VzIMOqdGVzIHN1ciBsZXMgdG9pdHMgZGUgbGEgdmlsbGUuIiwib25VbnNldCI6IlZvdXMgbifDqnRlcyBwbHVzIHN1ciBsZXMgdG9pdHMgZGUgbGEgdmlsbGUuIiwic2hvd0lmIjp7InllcyI6W10sIm5vIjpbXX0sInJlbW92ZUlmIjpudWxsLCJ2YWx1ZSI6ZmFsc2V9LCJwaGFzZTEiOnsiaW1hZ2VOYW1lIjoicGhhc2UxIiwib25TZXQiOiJWb3VzIGNoZXJjaGV6IDMgcmFpc29ucyBwb3VyIGxlc3F1ZWxsZXMgbGVzIGNoYXRzIGRldnJhaWVudCBmYWlyZSBzw6ljZXNzaW9uIGRlcyBodW1haW5zLiIsIm9uVW5zZXQiOiJWb3VzIGF2ZXogdHJvdXbDqSAzIHJhaXNvbnMgcG91ciBsZXNxdWVsbGVzIGxlcyBjaGF0cyBkZXZyYWllbnQgZmFpcmUgc8OpY2Vzc2lvbiBkZXMgaHVtYWlucy4iLCJzaG93SWYiOnsieWVzIjpbXSwibm8iOltdfSwicmVtb3ZlSWYiOm51bGwsInZhbHVlIjpmYWxzZX0sInBoYXNlMiI6eyJpbWFnZU5hbWUiOiJwaGFzZTIiLCJvblNldCI6IlZvdXMgY2hlcmNoZXogMyByYWlzb25zIHBvdXIgbGVzcXVlbGxlcyBsZXMgY2hhdHMgZGV2cmFpZW50IHJlc3RlciBhdXByw6hzIGRlcyBodW1haW5zLiIsIm9uVW5zZXQiOiJWb3VzIGF2ZXogdHJvdXbDqSAzIHJhaXNvbnMgcG91ciBsZXNxdWVsbGVzIGxlcyBjaGF0cyBkZXZyYWllbnQgcmVzdGVyIGF1cHLDqHMgZGVzIGh1bWFpbnMuIiwic2hvd0lmIjp7InllcyI6W10sIm5vIjpbXX0sInJlbW92ZUlmIjpudWxsLCJ2YWx1ZSI6ZmFsc2V9LCJwaGFzZTMiOnsiaW1hZ2VOYW1lIjoicGhhc2UzIiwib25TZXQiOiJWb3VzIGRldmV6IGFsbGVyIGNoZXJjaGVyIGxlcyBhZmZpY2hlcyBkZSBsYSBncmFuZGUgcnVlIHBvdXIgbGVzIG1vbnRyZXIgYXV4IGNoYXRzLiIsIm9uVW5zZXQiOiJWb3VzIGF2ZXogbGVzIGFmZmljaGVzLiIsInNob3dJZiI6eyJ5ZXMiOltdLCJubyI6W119LCJyZW1vdmVJZiI6bnVsbCwidmFsdWUiOmZhbHNlfSwicmFpc29uUGFydGlyQW5pbWFsZXJpZSI6eyJpbWFnZU5hbWUiOiJyYWlzb25QYXJ0aXJBbmltYWxlcmllIiwib25TZXQiOiJWb3VzIGF2ZXogdHJvdXbDqSB1bmUgcmFpc29uIGRlIHBhcnRpciBlbiB2b3lhbnQgbGEgdml0cmluZSBkJ3VuZSBhbmltYWxlcmllLiIsIm9uVW5zZXQiOiJJbCB2b3VzIG1hbnF1ZSB1bmUgcmFpc29uIGRlIHBhcnRpci4iLCJzaG93SWYiOnsieWVzIjpbInBoYXNlMSJdLCJubyI6W119LCJyZW1vdmVJZiI6bnVsbCwidmFsdWUiOmZhbHNlfSwicmFpc29uUGFydGlyVmV0ZXJpbmFpcmUiOnsiaW1hZ2VOYW1lIjoicmFpc29uUGFydGlyVmV0ZXJpbmFpcmUiLCJvblNldCI6IlZvdXMgYXZleiB0cm91dsOpIHVuZSByYWlzb24gZGUgcGFydGlyIGVuIHZveWFudCBsJ2FmZmljaGUgZCd1biBjYWJpbmV0IGRlIHbDqXTDqXJpbmFpcmUuIiwib25VbnNldCI6IklsIHZvdXMgbWFucXVlIHVuZSByYWlzb24gZGUgcGFydGlyLiIsInNob3dJZiI6eyJ5ZXMiOlsicGhhc2UxIl0sIm5vIjpbXX0sInJlbW92ZUlmIjpudWxsLCJ2YWx1ZSI6ZmFsc2V9LCJyYWlzb25QYXJ0aXJNYWlzb24iOnsiaW1hZ2VOYW1lIjoicmFpc29uUGFydGlyTWFpc29uIiwib25TZXQiOiJWb3VzIGF2ZXogdHJvdXbDqSB1bmUgcmFpc29uIGRlIHBhcnRpciBlbiByZWdhcmRhbnQgcGFyIGxhIGZlbsOqdHJlIGQndW5lIG1haXNvbi4iLCJvblVuc2V0IjoiSWwgdm91cyBtYW5xdWUgdW5lIHJhaXNvbiBkZSBwYXJ0aXIuIiwic2hvd0lmIjp7InllcyI6WyJwaGFzZTEiXSwibm8iOltdfSwicmVtb3ZlSWYiOm51bGwsInZhbHVlIjpmYWxzZX0sInJhaXNvblJlc3Rlck5vdXJyaXR1cmUiOnsiaW1hZ2VOYW1lIjoicmFpc29uUmVzdGVyTm91cnJpdHVyZSIsIm9uU2V0IjoiVm91cyBhdmV6IHRyb3V2w6kgdW5lIHJhaXNvbiBkZSByZXN0ZXIgZW4gcmVnYXJkYW50IHVuIHNhYyBkZSBub3Vycml0dXJlIHBvdXIgY2hhdC4iLCJvblVuc2V0IjoiSWwgdm91cyBtYW5xdWUgdW5lIHJhaXNvbiBkZSByZXN0ZXIuIiwic2hvd0lmIjp7InllcyI6WyJwaGFzZTIiXSwibm8iOltdfSwicmVtb3ZlSWYiOm51bGwsInZhbHVlIjpmYWxzZX0sInJhaXNvblJlc3RlckFtb3VyIjp7ImltYWdlTmFtZSI6InJhaXNvblJlc3RlckFtb3VyIiwib25TZXQiOiJWb3VzIGF2ZXogdHJvdXbDqSB1bmUgcmFpc29uIGRlIHJlc3RlciBlbiByZWdhcmRhbnQgdW4gY2hhdCBxdWkgcXVpdHRhaXQgc29uIG1hw650cmUuIiwib25VbnNldCI6IklsIHZvdXMgbWFucXVlIHVuZSByYWlzb24gZGUgcmVzdGVyLiIsInNob3dJZiI6eyJ5ZXMiOlsicGhhc2UyIl0sIm5vIjpbXX0sInJlbW92ZUlmIjpudWxsLCJ2YWx1ZSI6ZmFsc2V9LCJyYWlzb25SZXN0ZXJMdWNreSI6eyJpbWFnZU5hbWUiOiJyYWlzb25SZXN0ZXJMdWNreSIsIm9uU2V0IjoiVm91cyBhdmV6IHRyb3V2w6kgdW5lIHJhaXNvbiBkZSByZXN0ZXIgZW4gcGFybGFudCDDoCBMdWNreSBkZSBzYSBmYW1pbGxlLiIsIm9uVW5zZXQiOiJJbCB2b3VzIG1hbnF1ZSB1bmUgcmFpc29uIGRlIHJlc3Rlci4iLCJzaG93SWYiOnsieWVzIjpbInBoYXNlMiJdLCJubyI6W119LCJyZW1vdmVJZiI6bnVsbCwidmFsdWUiOmZhbHNlfSwiYWZmaWNoZXNQcmlzZXMiOnsiaW1hZ2VOYW1lIjoiYWZmaWNoZXNQcmlzZXMiLCJvblNldCI6IlZvdXMgYXZleiBwcmlzIGxlcyBhZmZpY2hlcy4iLCJvblVuc2V0IjoiVm91cyBuJ2F2ZXogcGFzIGVuY29yZSBwcmlzIGxlcyBhZmZpY2hlcy4iLCJzaG93SWYiOnsieWVzIjpbInBoYXNlMyJdLCJubyI6W119LCJyZW1vdmVJZiI6bnVsbCwidmFsdWUiOmZhbHNlfX0sInJvb21zIjp7ImRlYnVnTWFpbiI6eyJwdWJsaWNOYW1lIjoiREVCVUcgTUFJTiIsImRlc2NyaXB0aW9uIjoiUG9pbnQgZCdlbnRyw6llIGRlIGTDqWJvZ3VhZ2UgZHUgamV1LiBFbmxldmVyIHBvdXIgbGEgcmVsZWFzZS4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiQ2hhcGl0cmUgMSIsImRlc2NyaXB0aW9uIjoiTGFuY2VyIGxlIGNoYXBpdHJlIDEuIiwiYm9keSI6IlZvdXMgYXZleiBsYW5jw6kgbGUgY2hhcGl0cmUgMS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjp0cnVlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJjaGFwaXRyZTEifSx7InB1YmxpY05hbWUiOiJDaGFwaXRyZSAyIiwiZGVzY3JpcHRpb24iOiJMYW5jZXIgbGUgY2hhcGl0cmUgMi4iLCJib2R5IjoiVm91cyBhdmV6IGxhbmPDqSBsZSBjaGFwaXRyZSAyLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOnRydWUsInNpZGVlZmZlY3RzIjp7InNldCI6WyJhcHBhcnRlbWVudCJdLCJ1bnNldCI6WyJydWVzIl0sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJjaGFwaXRyZTIifSx7InB1YmxpY05hbWUiOiJDaGFwaXRyZSAzIiwiZGVzY3JpcHRpb24iOiJMYW5jZXIgbGUgY2hhcGl0cmUgMy4iLCJib2R5IjoiVm91cyBhdmV6IGxhbmPDqSBsZSBjaGFwaXRyZSAzLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOnRydWUsInNpZGVlZmZlY3RzIjp7InNldCI6WyJ0b2l0cyJdLCJ1bnNldCI6WyJydWVzIl0sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJjaGFwaXRyZTMifSx7InB1YmxpY05hbWUiOiJDaGFwaXRyZSAzIFBoYXNlIDIiLCJkZXNjcmlwdGlvbiI6IkxhbmNlciBsYSBwaGFzZSAyIGR1IGNoYXBpdHJlIDMuIiwiYm9keSI6IlZvdXMgYXZleiBsYW5jw6kgbGEgcGhhc2UgMiBkdSBjaGFwaXRyZSAzLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOnRydWUsInNpZGVlZmZlY3RzIjp7InNldCI6WyJ0b2l0cyIsInJhaXNvblBhcnRpckFuaW1hbGVyaWUiLCJyYWlzb25QYXJ0aXJNYWlzb24iLCJyYWlzb25QYXJ0aXJWZXRlcmluYWlyZSIsInBoYXNlMiJdLCJ1bnNldCI6WyJydWVzIl0sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJjaGF0cyJ9LHsicHVibGljTmFtZSI6IkNoYXBpdHJlIDMgUGhhc2UgMyIsImRlc2NyaXB0aW9uIjoiTGFuY2VyIGxhIHBoYXNlIDMgZHUgY2hhcGl0cmUgMy4iLCJib2R5IjoiVm91cyBhdmV6IGxhbmPDqSBsYSBwaGFzZSAzIGR1IGNoYXBpdHJlIDMuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6dHJ1ZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbInRvaXRzIiwicmFpc29uUGFydGlyQW5pbWFsZXJpZSIsInJhaXNvblBhcnRpck1haXNvbiIsInJhaXNvblBhcnRpclZldGVyaW5haXJlIiwicmFpc29uUmVzdGVyQW1vdXIiLCJyYWlzb25SZXN0ZXJMdWNreSIsInJhaXNvblJlc3Rlck5vdXJyaXR1cmUiLCJwaGFzZTMiXSwidW5zZXQiOlsicnVlcyJdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiY2hhdHMifSx7InB1YmxpY05hbWUiOiLDiXBpbG9ndWUiLCJkZXNjcmlwdGlvbiI6IkxhbmNlciBsJ8OpcGlsb2d1ZS4iLCJib2R5IjoiVm91cyBhdmV6IGxhbmPDqSBsJ8OpcGlsb2d1ZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjp0cnVlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOlsiYXBwYXJ0ZW1lbnQiLCJyYWlzb25QYXJ0aXJBbmltYWxlcmllIiwicmFpc29uUGFydGlyTWFpc29uIiwicmFpc29uUGFydGlyVmV0ZXJpbmFpcmUiLCJyYWlzb25SZXN0ZXJBbW91ciIsInJhaXNvblJlc3Rlckx1Y2t5IiwicmFpc29uUmVzdGVyTm91cnJpdHVyZSJdLCJ1bnNldCI6WyJydWVzIiwidG9pdHMiXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImVwaWxvZ3VlIn1dfSwidmFyaWFibGVzIjp7InB1YmxpY05hbWUiOiJWYXJpYWJsZXMiLCJkZXNjcmlwdGlvbiI6IlBsYWNlaG9sZGVyIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlBsYWNlaG9sZGVyIiwiZGVzY3JpcHRpb24iOiJQbGFjZWhvbGRlciIsImJvZHkiOiJub3BlIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6bnVsbH1dfSwiYXBwYXJ0ZW1lbnQiOnsicHVibGljTmFtZSI6IkwnYXBwYXJ0ZW1lbnQiLCJkZXNjcmlwdGlvbiI6IkwnYXBwYXJ0ZW1lbnQgZGUgbGEgZmVtbWUgw6l0YWl0IHVuIHBldGl0IHN0dWRpbyBzYW5zIGTDqWNvcmF0aW9uLCBkaXJlY3RlbWVudCBzb3VzIGxlIHRvaXQgZGUgbCdpbW1ldWJsZS4gTGUgbGl0IMOpdGFpdCBkw6lmYWl0LCBtYWlzIGxhIHBpw6hjZSDDqXRhaXQgb3Jkb25uw6llIHBvdXIgbGUgcmVzdGUuIEMnw6l0YWl0IHVuIGFwcGFydGVtZW50IHBvdXIgZG9ybWlyIGxlIHNvaXIgZXQgcmV0b3VybmVyIHRyYXZhaWxsZXIgbGUgbGVuZGVtYWluLCBwYXMgcG91ciB2aXZyZS4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiVsOpcmlmaWVyIGxlIGJvbCBkZSBsYWl0IHN1ciBsYSBmZW7DqnRyZSIsImRlc2NyaXB0aW9uIjoiQ2hhcXVlIG51aXQsIGxhIGZlbW1lIGxhaXNzYWl0IHVuIGJvbCBkZSBsYWl0IHN1ciBsZSByZWJvcmQgZGUgbGEgZmVuw6p0cmUgb3V2ZXJ0ZS4gQ2VsYSBmYWlzYWl0IGxvbmd0ZW1wcyBxdWUgcGVyc29ubmUgbifDqXRhaXQgdmVudSBzJ3kgc2VydmlyLiIsImJvZHkiOiJDaGFxdWUgbnVpdCwgbGEgZmVtbWUgbGFpc3NhaXQgdW4gYm9sIGRlIGxhaXQgc3VyIGxlIHJlYm9yZCBkZSBsYSBmZW7DqnRyZSBvdXZlcnRlLCDDoCBsJ2F0dGVudGlvbiBkZXMgY2hhdHMuIElscyB2ZW5haWVudCBlbiBtYXJjaGFudCBwYXIgbGVzIHRvaXRzIGFsZW50b3VycyBwb3VyIHNlIHNlcnZpciBkYW5zIGxlIGJvbC5cbkNlbGEgZmFpc2FpdCBsb25ndGVtcHMgcXVlIHBlcnNvbm5lIG4nw6l0YWl0IHZlbnUgcyd5IHNlcnZpci5cblxuQ2V0dGUgbnVpdC1sw6Agw6l0YWl0IGRpZmbDqXJlbnRlIGRlcyBhdXRyZXM6IGxlIGJvbCDDqXRhaXQgdmlkZS4gVW4gY2hhdCDDqXRhaXQgdmVudSBldCBsJ2F2YWl0IHZpZMOpLiBQZXV0LcOqdHJlIG3Dqm1lIMOpdGFpdC1jZSBjZWx1aSBxdWkgYXZhaXQgZ3VldHTDqSBsYSBmZW1tZSBkYW5zIGwnYWxsw6llLiBJbCByZXN0YWl0IGRlcyBjaGF0cyBkYW5zIGxhIHZpbGxlLlxuXG5MYSBmZW1tZSBwcml0IHVuZSBicmlxdWUgZGUgbGFpdCBkYW5zIGxlIHLDqWZyaWfDqXJhdGV1ciBldCBsYSB2ZXJzYSBkYW5zIGxlIGJvbCwgcGVuc2l2ZS4gUGV1dC3DqnRyZSBjZSBjaGF0IHJldmllbmRyYWl0LWlsIGxhIG51aXQgZCdhcHLDqHMuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbInZlcmlmaWVyTGFpdCJdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOlsidmVyaWZpZXJMYWl0Il0sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJhcHBhcnRlbWVudCJ9LHsicHVibGljTmFtZSI6IlJlZ2FyZGVyIHBhciBsYSBmZW7DqnRyZSIsImRlc2NyaXB0aW9uIjoiRGVwdWlzIGxhIGZlbsOqdHJlLCBsYSB2aWxsZSBzJ8OpdGVuZGFpdCBhdSBsb2luLCB2YXN0ZS4iLCJib2R5IjoiTGEgZmVtbWUgcydhcHB1eWEgw6AgbGEgZmVuw6p0cmUgZXQgb2JzZXJ2YS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiYXBwYXJ0ZW1lbnRGZW5ldHJlIn0seyJwdWJsaWNOYW1lIjoiQWxsZXIgZG9ybWlyIiwiZGVzY3JpcHRpb24iOiJJbCDDqXRhaXQgdGVtcHMgZCdhbGxlciBkb3JtaXIuIEVuZmluLiIsImJvZHkiOiJVbmUgZm9pcyBwcsOpcGFyw6llLCBsYSBmZW1tZSBhbGxhIHNlIGNvdWNoZXIgZXQgcydlbmRvcm1pdCByYXBpZGVtZW50LCDDqXB1aXPDqWUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOlsidmVyaWZpZXJMYWl0Il19LCJ2aXNpYmxlIjp0cnVlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOlsiZW5UcmFpbkRlRG9ybWlyIl0sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InNvbW1laWwxIn1dfSwiYXBwYXJ0ZW1lbnRGZW5ldHJlIjp7InB1YmxpY05hbWUiOiJQYXIgbGEgZmVuw6p0cmUiLCJkZXNjcmlwdGlvbiI6IkRlcHVpcyBsYSBmZW7DqnRyZSwgbGEgdmlsbGUgcyfDqXRlbmRhaXQgYXUgbG9pbiwgdmFzdGUuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlJlZ2FyZGVyIGxlcyBpbW1ldWJsZXMgZHUgY2VudHJlLXZpbGxlIiwiZGVzY3JpcHRpb24iOiJBdSBsb2luLCBsYSBmZW1tZSBwb3V2YWl0IHZvaXIgbGVzIGx1bWnDqHJlcyBkZXMgaW1tZXVibGVzIGR1IGNlbnRyZS12aWxsZS4iLCJib2R5IjoiQXUgbG9pbiwgbGEgZmVtbWUgcG91dmFpdCB2b2lyIGxlcyBsdW1pw6hyZXMgZGVzIGltbWV1YmxlcyBkdSBjZW50cmUtdmlsbGUuIERlIGdyYW5kZXMgdG91cnMgcXVpIHMnw6lsZXZhaWVudCBsb2luIGF1IGRlc3N1cyBkZXMgcGV0aXRzIGltbWV1YmxlcyBkZSBzb24gcXVhcnRpZXIgZGUgYmFubGlldWUuXG5FbiByZWdhcmRhbnQgYmllbiwgZWxsZSBwb3V2YWl0IG3Dqm1lIGRpc3Rpbmd1ZXIgbGUgYsOidGltZW50IG/DuSBlbGxlIHRyYXZhaWxsYWl0LCB1bmUgZ3JhbmRlIHNpbGhvdWV0dGUgZ3Jpc2UgZG9udCBjZXJ0YWluZXMgZmVuw6p0cmVzIGJyaWxsYWllbnQgZCd1bmUgbHVldXIgYmxhbmNow6J0cmUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImFwcGFydGVtZW50RmVuZXRyZSJ9LHsicHVibGljTmFtZSI6IlJlZ2FyZGVyIGxlcyDDqXRvaWxlcyIsImRlc2NyaXB0aW9uIjoiw4l0b2lsZXM/IFF1ZWxsZXMgw6l0b2lsZXM/IiwiYm9keSI6IkxhIGZlbW1lIGxldmEgbGVzIHlldXggdmVycyBsZSBjaWVsLiBMYSBsdW1pw6hyZSBkZXMgbWFpc29ucyBzZSByw6l2ZXJiw6lyYWl0IHN1ciBsZSBjaWVsLCByZW5kYW50IGxlcyDDqXRvaWxlcyBpbnZpc2libGVzLiBGYWlibGVtZW50LCBvbiBwb3V2YWl0IHZvaXIgbGEgbHVuZSwgbWFpcyBsZSByZXN0ZSBkdSBjaWVsIMOpdGFpdCDDqXRlaW50IHBhciBsYSBsdW1pw6hyZSBkJ2VuIGRlc3NvdXMuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImFwcGFydGVtZW50RmVuZXRyZSJ9LHsicHVibGljTmFtZSI6IlJlZ2FyZGVyIGxlcyBydWVzIGVuIGRlc3NvdXMiLCJkZXNjcmlwdGlvbiI6IkVuIGRlc3NvdXMgZGUgbCdpbW1ldWJsZSwgbGEgZmVtbWUgcG91dmFpdCB2b2lyIHMnw6l0YWxlciBsZSByw6lzZWF1IGNvbXBsZXhlIGRlcyBydWVzIGRlIGxhIHZpbGxlLiIsImJvZHkiOiJMYSBmZW1tZSBiYWlzc2EgbGVzIHlldXguIEVuIGRlc3NvdXMgZCdlbGxlLCBsYSB0b2lsZSBkZXMgcnVlcyBzb21icmVzLCDDqWNsYWlyw6llcyBwYXIgZW5kcm9pdHMgcGFyIGRlcyBsYW1wYWRhaXJlcy4gTGUgdG91dCBuZSBmYWlzYWl0IHF1ZSBzb3VsaWduZXIgbGEgc2FsZXTDqSBkZSBsJ2VuZHJvaXQuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImFwcGFydGVtZW50RmVuZXRyZSJ9LHsicHVibGljTmFtZSI6IkZhaXJlIGF1dHJlIGNob3NlIiwiZGVzY3JpcHRpb24iOiJJbCDDqXRhaXQgYmVhdSBkZSByw6p2YXNzZXIgZW4gcmVnYXJkYW50IHBhciBsYSBmZW7DqnRyZSwgbWFpcyBpbCDDqXRhaXQgdGVtcHMgZGUgcmV2ZW5pciBhdSBtb25kZSByw6llbC4iLCJib2R5IjoiTGEgZmVtbWUgbGV2YSBzb24gY291ZGUgZHUgcmVib3JkIGRlIGxhIGZlbsOqdHJlIGV0IHNlIHJldG91cm5hIHZlcnMgbGUgcmVzdGUgZGUgbCdhcHBhcnRlbWVudC4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiYXBwYXJ0ZW1lbnQifV19LCJtYWluIjp7InB1YmxpY05hbWUiOiJDaGFwaXRyZSAxOiBEYW5zIGxhIHJ1ZS4uLiIsImRlc2NyaXB0aW9uIjoiVGFyZCBsZSBzb2lyLCBkYW5zIGxhIHZhc3RlIHZpbGxlLCB1bmUgamV1bmUgZmVtbWUgcmVudHJhaXQgY2hleiBlbGxlIGFwcsOocyB1bmUgZHVyZSBqb3VybsOpZSBkZSB0cmF2YWlsLiBMZSBjaGVtaW4gcG91ciByZW50cmVyIGNoZXogZWxsZSBwYXNzYWl0IHBhci4uLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJMYSBncmFuZGUgcnVlLiIsImRlc2NyaXB0aW9uIjoiVmlkZSBkZSBtb25kZSwgYm9yZMOpZSBwYXIgbGVzIGxhbXBhZGFpcmVzLiIsImJvZHkiOiJMYSBmZW1tZSBzJ2VuZ2FnZWEgZGFucyBsYSBncmFuZGUgcnVlLiDDgCBjZXR0ZSBoZXVyZS1jaSwgaWwgbid5IGF2YWl0IHBlcnNvbm5lLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJydWVMYW1wYWRhaXJlczEifV19LCJydWVMYW1wYWRhaXJlczEiOnsicHVibGljTmFtZSI6IkxhIGdyYW5kZSBydWUiLCJkZXNjcmlwdGlvbiI6IkRhbnMgbGEgcnVlIHZpZGUsIHJpZW4gbmUgYm91Z2VhaXQuIFVuIGtpb3NxdWUgZmVybcOpIHNlIHRyb3V2YWl0IGF1IGJvcmQgZGUgbGEgcnVlLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJBbGxlciB2b2lyIGxlIGtpb3NxdWUiLCJkZXNjcmlwdGlvbiI6IklsIMOpdGFpdCBmZXJtw6kgZGVwdWlzIGRlcyBoZXVyZXMsIGJpZW4gc8O7ci4gUXVlbHF1J3VuIGF2YWl0IG91Ymxpw6kgdW5lIGFmZmljaGUgZHUgam91cm5hbCBkdSBqb3VyIHN1ciB1biBkZXMgcGFubmVhdXguIiwiYm9keSI6IkwnYWZmaWNoZSDDqXRhaXQgY2VsbGUgZCd1biBqb3VybmFsIGRvbnQgbGEgdW5lIHLDqXbDqWxhaXQgY2UgZG9udCB0b3VzIHMnaW5xdWnDqXRhaWVudDpcblxuXG5RVUkgRVNUIExFIFZPTEVVUiBERSBDSEFUU1xuTm9zIHBpc3RlcyBzdXIgbCdhZmZhaXJlIGRlcyBkaXNwYXJpdGlvbnMgcsOpY2VudGVzXG5cbnAuIDM6IFN0YXRpc3RpcXVlczogbm9uYW50ZSBwb3VyY2VudHMgZGVzIGNoYXRzIGRpc3BhcnVzIGRhbnMgbGEgVmlsbGU/XG5cbnAuNjogVW4gdMOpbW9pZ25hZ2U6IFwiTm91cyBnYXJkb25zIGxlIG7DtHRyZSBhdmVjIG5vdXMgZW4gdG91dCB0ZW1wcywgb24gYSB0ZWxsZW1lbnQgcGV1ciBxdSdpbCBkaXNwYXJhaXNzZVwiIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZUxhbXBhZGFpcmVzMSJ9LHsicHVibGljTmFtZSI6IkFsbGVyIHBsdXMgbG9pbiBkYW5zIGxhIHJ1ZSIsImRlc2NyaXB0aW9uIjoiTGUgdmVudCBzb3VmZmxhaXQsIGZhaXNhbnQgYm91Z2VyIGwnYWZmaWNoZSBhY2Nyb2Now6llIMOgIHVuIGRlcyBsYW1wYWRhaXJlcy4iLCJib2R5IjoiTGEgcnVlIMOpdGFpdCBib3Jkw6llIGRlIGxhbXBhZGFpcmVzIHF1aSBqZXRhaWVudCB1bmUgbHVtacOocmUgYmxhZmFyZGUgc3VyIGxlcyBwYXbDqXMgZXQgbGVzIGZlbsOqdHJlcyBmZXJtw6llcy4gw4AgdW4gZGUgY2VzIGxhbXBhZGFpcmVzIMOpdGFpdCBhY2Nyb2Now6llIHVuZSBhZmZpY2hlIHF1ZSBsZSB2ZW50IHNlY291YWl0LiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJydWVMYW1wYWRhaXJlczIifV19LCJydWVMYW1wYWRhaXJlczIiOnsicHVibGljTmFtZSI6IlBsdXMgbG9pbiBkYW5zIGxhIGdyYW5kZSBydWUiLCJkZXNjcmlwdGlvbiI6IkxhIHJ1ZSDDqXRhaXQgw6ljbGFpcsOpZSBwYXIgbGEgbHVtacOocmUgYmxhZmFyZGUgZGVzIGxhbXBhZGFpcmVzIHN1ciBzZXMgY8O0dMOpcy4gU3VyIGwndW4gZCdlbnRyZSBldXgsIHVuZSBhZmZpY2hlIGZsb3R0YWl0IGRhbnMgbGUgdmVudC4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiQWxsZXIgbGlyZSBsJ2FmZmljaGUgc3VyIGxlIGxhbXBhZGFpcmUiLCJkZXNjcmlwdGlvbiI6IlVuIGRlcyBkZXV4IG1vcmNlYXV4IGRlIHJ1YmFuIGFkaMOpc2lmIHF1aSBsYSBtYWludGVuYWl0IHMnw6l0YW50IGNhc3PDqSwgZWxsZSBmbG90dGFpdCBkYW5zIGxlIGzDqWdlciB2ZW50IGR1IHNvaXIuIiwiYm9keSI6Ik1hbG1lbsOpZSBwYXIgbGVzIMOpbMOpbWVudHMsIGwnYWZmaWNoZSBkaXNhaXQ6XG5cbkFWRVotVk9VUyBWVSBDRSBDSEFUXG5WVSBQT1VSIExBIERFUk5Jw4hSRSBGT0lTIENIRVotXG5JTCBTJ0FQUEVMTEUgQ0FSQU0tXG5DT05UQUNURVogUi1cblxuVW5lIHBob3RvIGTDqWxhdsOpZSBmaWd1cmFpdCBlbiBoYXV0OyBlbGxlIGF2YWl0IGTDqXRlaW50IHN1ciBsZSB0ZXh0ZSwgcmVuZGFudCB1bmUgcGFydGllIGlsbGlzaWJsZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicnVlTGFtcGFkYWlyZXMyIn0seyJwdWJsaWNOYW1lIjoiUmV2ZW5pciBlbiBhcnJpw6hyZSIsImRlc2NyaXB0aW9uIjoiSWwgeSBhdmFpdCBlbmNvcmUgZGVzIGNob3NlcyDDoCB2b2lyLCBwbHVzIHTDtHQgc3VyIGxlIGNoZW1pbi4iLCJib2R5IjoiTGEgZmVtbWUgcmV2aW50IHN1ciBzZXMgcGFzLCB2ZXJzIGxlIGtpb3NxdWUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZUxhbXBhZGFpcmVzMSJ9LHsicHVibGljTmFtZSI6IkNvbnRpbnVlciBkYW5zIGxhIHJ1ZSIsImRlc2NyaXB0aW9uIjoiUGx1cyBhdmFudCwgbGUgYm91dCBkZSBsYSBydWUuIiwiYm9keSI6IkRldmFudCBsYSBmZW1tZSwgdW5lIHJvdXRlIGJhcnJhaXQgbGUgcGFzc2FnZTsgYyfDqXRhaXQgbGUgYm91dCBkZSBsYSBydWUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZUxhbXBhZGFpcmVzMyJ9XX0sInJ1ZUxhbXBhZGFpcmVzMyI6eyJwdWJsaWNOYW1lIjoiRXh0csOpbWl0w6kgZGUgbGEgZ3JhbmRlIHJ1ZSIsImRlc2NyaXB0aW9uIjoiTGUgY2hlbWluIMOpdGFpdCBiYXJyw6kgcGFyIHVuZSByb3V0ZSBxdWkgcGFzc2FpdCBlbiB0cmF2ZXJzLiBDJ8OpdGFpdCBsZSBib3V0IGRlIGxhIHJ1ZS4gTGVzIGxhbXBhZGFpcmVzIMOgIGNldCBlbmRyb2l0IMOpdGFpZW50IHJlY291dmVydHMgZCdhZmZpY2hlcywgbGEgcGx1cGFydCBkaWZmw6lyZW50ZXMuIFVuZSBydWVsbGUgcGFydGFpdCB2ZXJzIGxhIGdhdWNoZS4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiTGlyZSB1bmUgYWZmaWNoZSBzdXIgdW4gbGFtcGFkYWlyZSBzYWxlIiwiZGVzY3JpcHRpb24iOiJBdSBkZXNzdXMgZHUgdGV4dGUgZGUgbCdhZmZpY2hlIHBsYXN0aWZpw6llLCB1bmUgaW1hZ2UgY3Jhc3NldXNlIGQndW4gZ3JvcyBjaGF0IG5vaXIuIiwiYm9keSI6IkF1IGRlc3N1cyBkdSB0ZXh0ZSBkZSBsJ2FmZmljaGUgcGxhc3RpZmnDqWUsIHVuZSBpbWFnZSBjcmFzc2V1c2UgZCd1biBncm9zIGNoYXQgbm9pci5cblxuQ0hBVCBQRVJEVVxuVFLDiFMgVElNSURFLCBORSBQQVMgQlJVU1FVRVIgU0kgVk9VUyBMRSBWT1lFWlxuQ29udGFjdGVyIGxlIFhYWC9YWFggWFggWFgiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicnVlTGFtcGFkYWlyZXMzIn0seyJwdWJsaWNOYW1lIjoiTGlyZSB1bmUgYWZmaWNoZSBzdXIgdW4gcGFubmVhdSIsImRlc2NyaXB0aW9uIjoiQ2V0dGUgYWZmaWNoZSBhdmFpdCDDqXTDqSBjb2xsw6llIHN1ciB1biBwYW5uZWF1IGRlIGNpcmN1bGF0aW9uLCBwcm9iYWJsZW1lbnQgcGFyIG1hbnF1ZSBkZSBwbGFjZSBhdXRyZSBwYXJ0LiBFbGxlIGVzdCDDqWNyaXRlIMOgIGxhIG1haW4sIHZpc2libGVtZW50IHBhciB1biBlbmZhbnQuIiwiYm9keSI6IkNldHRlIGFmZmljaGUgYXZhaXQgw6l0w6kgY29sbMOpZSBzdXIgdW4gcGFubmVhdSBkZSBjaXJjdWxhdGlvbiwgcHJvYmFibGVtZW50IHBhciBtYW5xdWUgZGUgcGxhY2UgYXV0cmUgcGFydC4gRWxsZSDDqXRhaXQgw6ljcml0ZSDDoCBsYSBtYWluLCB2aXNpYmxlbWVudCBwYXIgdW4gZW5mYW50OlxuXG5TaSB2b3VzIHZvecOpIG1vbiBjaGEsXG5hcHBlbMOpIG1hIG1hbWFuXG5zb24gbnVtw6lybyBjJ2VzdCBYWFgvWFhYIFhYIFhYXG5cbkF1IGRlc3N1cyBmaWd1cmFpdCB1biBkZXNzaW4gYXUgY3JheW9uIGRlIGNvdWxldXIgZCd1biBjaGF0LCB2ZXJzIGxlcXVlbCBwb2ludGFpdCB1bmUgZmzDqGNoZSBhdmVjIGxhIGzDqWdlbmRlOiBcIlNoZWVuYVwiIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZUxhbXBhZGFpcmVzMyJ9LHsicHVibGljTmFtZSI6IkxpcmUgdW5lIGRlcyBhZmZpY2hlcyBkJ3VuIGxhbXBhZGFpcmUgcmVjb3V2ZXJ0IiwiZGVzY3JpcHRpb24iOiJJbmV4cGxpY2FibGVtZW50LCBsJ2F1dGV1ciBkZSBjZXR0ZSBhZmZpY2hlIGwnYXZhaXQgaW1wcmltw6llIMOgIGRlcyBkaXphaW5lcyBkJ2V4ZW1wbGFpcmVzIHBvdXIgZW4gcmVjb3V2cmlyIGxlIGxhbXBhZGFpcmUuIENlcyBleGVtcGxhaXJlcyBzZSBjaGV2YXVjaGFpZW50IGRlIHRlbGxlIG1hbmnDqHJlIHF1ZSBsZXMgYWZmaWNoZXMgw6l0YWllbnQgZW4gcGFydGllIGlsbGlzaWJsZXMuIiwiYm9keSI6IkluZXhwbGljYWJsZW1lbnQsIGwnYXV0ZXVyIGRlIGNldHRlIGFmZmljaGUgbCdhdmFpdCBpbXByaW3DqWUgw6AgZGVzIGRpemFpbmVzIGQnZXhlbXBsYWlyZXMgcG91ciBlbiByZWNvdXZyaXIgbGUgbGFtcGFkYWlyZS4gQ2VzIGV4ZW1wbGFpcmVzIHNlIGNoZXZhdWNoYWllbnQgZGUgdGVsbGUgbWFuacOocmUgcXVlIGxlcyBhZmZpY2hlcyDDqXRhaWVudCBlbiBwYXJ0aWUgaWxsaXNpYmxlczpcblxuQ2hhdCB0aWdcbiAgICBub20gZXN0IExcbiAgICAgICAgICAgICAgICB1aXMgMiBtb2lzXG4gICAgICAgICAgICAgICBuacOocmUgZm9pcyBhdSBYWFggZGVcbiAgICAgICAgdHLDqHMgaW1wb3J0YW50IHBvdXIgbW9pXG4gICAgICAgICBsZSB2b3lleiBhcHBlbGV6XG5TJ2lsIHZvdXMgcGxhw650IiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZUxhbXBhZGFpcmVzMyJ9LHsicHVibGljTmFtZSI6IlJldmVuaXIgZW4gYXJyacOocmUiLCJkZXNjcmlwdGlvbiI6IklsIHkgYXZhaXQgZW5jb3JlIGRlcyBjaG9zZXMgw6Agdm9pciwgcGx1cyB0w7R0IHN1ciBsZSBjaGVtaW4uIiwiYm9keSI6IkxhIGZlbW1lIHJldmludCBzdXIgc2VzIHBhcywgdmVycyBsZSBsYW1wYWRhaXJlIGF2ZWMgbCdhZmZpY2hlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJydWVMYW1wYWRhaXJlczIifSx7InB1YmxpY05hbWUiOiJBbGxlciBkYW5zIGxhIHJ1ZWxsZSIsImRlc2NyaXB0aW9uIjoiw4AgZ2F1Y2hlLCBsYSBwZXRpdGUgZW50csOpZSBkJ3VuZSBydWVsbGUuIERhbnMgY2V0dGUgcnVlbGxlLCBsZSByZXBvcyBhcHLDqHMgdW5lIGxvbmd1ZSBqb3VybsOpZS4iLCJib2R5IjoiTGEgZmVtbWUgZW50cmEgZGFucyBsYSBydWVsbGUuIEVsbGUgw6l0YWl0IGJpZW50w7R0IGNoZXogZWxsZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicnVlTGFtcGFkYWlyZXM0In1dfSwicnVlTGFtcGFkYWlyZXM0Ijp7InB1YmxpY05hbWUiOiJMYSBydWVsbGUiLCJkZXNjcmlwdGlvbiI6IkxhIHJ1ZWxsZSDDqXRhaXQgYm9yZMOpZSBkZSBwbHVzaWV1cnMgbWFpc29ucywgZG9udCBsYSBwbHVwYXJ0IGRlcyBsdW1pw6hyZXMgw6l0YWllbnQgw6l0ZWludGVzLiBRdWVscXVlcyBhZmZpY2hlcyDDqXRhaWVudCBjb2xsw6llcyBhdXggbXVycy4gQXUgYm91dCwgbCdlbnRyw6llIGRlIGwnaW1tZXVibGUgZGUgbGEgZmVtbWUuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlVuIHJlZ2FyZCBmdXJ0aWYiLCJkZXNjcmlwdGlvbiI6IkxhIGZlbW1lIHNlIHJldG91cm5hLiBRdWVscXVlIGNob3NlIGxhIGZpeGFpdCBkZXB1aXMgbGUgYnVpc3Nvbi4iLCJib2R5IjoiTGEgZmVtbWUgc2UgcmV0b3VybmEuIFVuZSBmaWd1cmUgZ3Jpc2UgcGFydGl0IGVuIGNvdXJhbnQuIFVuIGNoYXQuIEVuIGNlIG1vbWVudD8gRCdvw7kgdmVuYWl0LWlsPyIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbIm9ic2VydmVQYXJDaGF0Il19LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbIm9ic2VydmVQYXJDaGF0Il0sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZUxhbXBhZGFpcmVzNCJ9LHsicHVibGljTmFtZSI6IlJldmVuaXIgZW4gYXJyacOocmUiLCJkZXNjcmlwdGlvbiI6IklsIHkgYXZhaXQgZW5jb3JlIGRlcyBjaG9zZXMgw6Agdm9pciwgcGx1cyB0w7R0IHN1ciBsZSBjaGVtaW4uIiwiYm9keSI6IkxhIGZlbW1lIHJldmludCBzdXIgc2VzIHBhcywgdmVycyBsYSBncmFuZGUgcnVlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJydWVMYW1wYWRhaXJlczMifSx7InB1YmxpY05hbWUiOiJFbnRyZXIgY2hleiBzb2kiLCJkZXNjcmlwdGlvbiI6IklsIMOpdGFpdCB0ZW1wcyBkZSBzZSByZXBvc2VyLiIsImJvZHkiOiJMYSBmZW1tZSBvdXZyaXQgbGEgcG9ydGUgZXQgZW50cmEgY2hleiBlbGxlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOlsiYXBwYXJ0ZW1lbnQiLCJ2ZXJpZmllckxhaXQiXSwidW5zZXQiOlsicnVlcyJdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiYXBwYXJ0ZW1lbnQifV19LCJzb21tZWlsMSI6eyJwdWJsaWNOYW1lIjoiVW4gcsOqdmUgY2hhbXDDqnRyZSIsImRlc2NyaXB0aW9uIjoiRGFucyBsZXMgcm95YXVtZXMgZHUgcsOqdmUsIGxlcyBmb3JtZXMgZXQgaWTDqWVzIGTDqWZpbGFpZW50IGxpYnJlbWVudC4gQ2V0dGUgbnVpdC1jaSwgZWxsZXMgY29udmVyZ2VhaWVudCB2ZXJzIHVuIGNoYW1wIGRlIGJsw6kuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlJlZ2FyZGVyIGF1dG91ciBkZSBzb2kiLCJkZXNjcmlwdGlvbiI6IlRvdXQgYXV0b3VyLCBkZXMgw6lwaXMgZGUgYmzDqSDDoCBwZXJ0ZSBkZSB2dWUuIEF1IGxvaW4sIHVuZSBtYWlzb24uIiwiYm9keSI6IlRvdXQgYXV0b3VyLCBkZXMgw6lwaXMgZGUgYmzDqSBqYXVuZXMgcyfDqXRhbGFpZW50IMOgIHBlcnRlIGRlIHZ1ZS4gTGUgY2llbCDDqXRhaXQgZCd1biBibGV1IHByb2ZvbmQsIGJhcnLDqSBkZSBjdW11bHVzIGJsYW5jcyBpbW1vYmlsZXMuIElsIG4neSBhdmFpdCBwYXMgZGUgdmVudC4gVG91dCDDqXRhaXQgaW1tb2JpbGUuXG5cbkF1IGxvaW4sIGxhIGZlbW1lIHBvdXZhaXQgdm9pciB1bmUgbWFpc29uIGF1IHRvaXQgcm91Z2UuIEVsbGUgbGEgY29ubmFpc3NhaXQ6IGMnw6l0YWl0IGxhIHNpZW5uZSwgbG9ycyBkZSBzb24gZW5mYW5jZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0Ijoic29tbWVpbDEifSx7InB1YmxpY05hbWUiOiJBbGxlciB2ZXJzIGxhIG1haXNvbiBhdSB0b2l0IHJvdWdlIiwiZGVzY3JpcHRpb24iOiJMYSBmZW1tZSBzZSBtaXQgZW4gbWFyY2hlIHZlcnMgbGEgbWFpc29uLi4uIiwiYm9keSI6IkxhIGZlbW1lIHNlIG1pdCBlbiBtYXJjaGUgdmVycyBsYSBtYWlzb24uIEMnw6l0YWl0IHVuZSBmZXJtZSwgZWxsZSBwb3V2YWl0IHZvaXIgbGVzIMOpdGFibGVzIGV0IGxhIGdyYW5nZS4gTGEgZmVybWUgc2VtYmxhaXQgaW5maW5pbWVudCBsb2luLlxuXG5EZXV4IHBlcnNvbm5lcyBldCB1biBwZXRpdCBhbmltYWwgc2UgdGVuYWllbnQgZGV2YW50IGxhIHBvcnRlLiBJbHMgbCdhdHRlbmRhaWVudCBtYWlzIG5lIGJvdWdlYWllbnQgcGFzIG5vbiBwbHVzLlxuXG5MYSBmZW1tZSBtYXJjaGEgZXQgbWFyY2hhLCBtYWlzIGVsbGUgbmUgc2UgcmFwcHJvY2hhIGphbWFpcy4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0Ijoic29tbWVpbDEifSx7InB1YmxpY05hbWUiOiJSw6p2ZXIgZCdhdXRyZSBjaG9zZSIsImRlc2NyaXB0aW9uIjoiVG91dCBjb21tZSB1biByw6p2ZSB2aWVudCwgaWwgZG9pdCBmaW5pci4iLCJib2R5IjoiTGEgZmVtbWUgcmVnYXJkYSDDoCBzZXMgcGllZHMuIFVuIHRyb3Ugc2UgZm9ybWFpdCBkYW5zIGxlIHNvbCwgcGx1cyBsb2luIGRldmFudC5cblxuSWwgcyfDqWxhcmdpdCBldCBzJ8OpbGFyZ2l0LCBqdXNxdSfDoCBjZSBxdSdlbiBwb3Vzc2UgdW5lIGdyYW5kZSBwbGFudGUgZ3Jpc2UgZW4gYsOpdG9uLiBJbCBsdWkgcG91c3NhIGRlcyBmZW7DqnRyZXMsIGRlcyB0dXlhdXggZXQgZGVzIGFudGVubmVzLCBldCBhdSBmdXIgZXQgw6AgbWVzdXJlIHF1ZSBsZSB0cm91IGdyYW5kaXNzYWl0LCBkJ2F1dHJlcyBpbW1ldWJsZXMgcG91c3PDqHJlbnQuXG5cbkxhIGZlbW1lIGNvdXJ1dCBzYW5zIHBvdXZvaXIgcyfDqWxvaWduZXIgZHUgZ291ZmZyZS4gTGEgY2FtcGFnbmUgc2UgZml0IGF2YWxlciBwYXIgbGEgdmlsbGUsIGV0IGxhIGZlbW1lIHRvbWJhIGRhbnMgbGUgbsOpYW50IG5vaXIgZHUgc29tbWVpbCBwcm9mb25kLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJzb21tZWlsMiJ9XX0sInNvbW1laWwyIjp7InB1YmxpY05hbWUiOiJVbiByw6p2ZSBkZSBTaXN5cGhlIiwiZGVzY3JpcHRpb24iOiJEYW5zIGxlcyByb3lhdW1lcyBkdSByw6p2ZSwgbGVzIGZvcm1lcyBldCBpZMOpZXMgZMOpZmlsYWllbnQgbGlicmVtZW50LiBDZXR0ZSBudWl0LWNpLCBlbGxlcyBjb252ZXJnZWFpZW50IHZlcnMgdW4gcm9jaGVyIGVuIGJhcyBkJ3VuZSBydWUgZW4gcGVudGUuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlJlZ2FyZGVyIGF1dG91ciBkZSBzb2kiLCJkZXNjcmlwdGlvbiI6IlRvdXQgYXV0b3VyLCBsZXMgaW1tZXVibGVzIHNlIGRyZXNzYWllbnQsIG1lbmHDp2FudHMuIEVudHJlIGV1eCwgbGEgcnVlIG1vbnRhaXQsIGV0IGVuIHNvbiBjcmV1eCwgdW5lIGJvdWxlIGRlIG1hcmJyZS4iLCJib2R5IjoiVG91dCBhdXRvdXIsIGxlcyBzaWxob3VldHRlcyBzb21icmVzIGRlcyBpbW1ldWJsZXMgc2UgZHJlc3NhaWVudCwgbWVuYcOnYW50ZXMuXG5cbkVudHJlIGVsbGVzLCBsYSBydWUgbW9udGFpdCBlbiBwZW50ZSByYWlkZSBhdXNzaSBsb2luIHF1ZSBwb3J0YWl0IGxhIHZ1ZSwgYm9yZMOpZSBkZSB2b2l0dXJlcyBldCBkZSBsYW1wYWRhaXJlcy5cblxuRGFucyBsZSBjcmV1eCBlbiBiYXMgZGUgbGEgcnVlLCBvw7kgc2UgdHJvdXZhaXQgbGEgZmVtbWUsIHNlIHRyb3V2YWl0IGF1c3NpIHVuZSBncmFuZGUgYm91bGUgZGUgbWFyYnJlLCBkJ8OgIHBldSBwcsOocyBzYSB0YWlsbGUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InNvbW1laWwyIn0seyJwdWJsaWNOYW1lIjoiUG91c3NlciBsYSBib3VsZSB2ZXJzIGxlIGhhdXQgZGUgbGEgcnVlIiwiZGVzY3JpcHRpb24iOiJDJ8OpdGFpdCBsYSBzZXVsZSBjaG9zZSDDoCBmYWlyZS4iLCJib2R5IjoiTGEgZmVtbWUgc2UgbWl0IMOgIHBvdXNzZXIgbGEgYm91bGUuXG5cbkF1IGTDqWJ1dCwgZWxsZSDDqXRhaXQgcGx1cyBsw6lnw6hyZSBxdSdlbGxlIG5lIHNlbWJsYWl0LiBQdWlzLCBhdSBmdXIgZXQgw6AgbWVzdXJlIHF1ZSBsYSBmZW1tZSBsYSBwb3Vzc2FpdCwgZWxsZSBkZXZpbnQgcGx1cyBsb3VyZGUuIEZhdGFsZW1lbnQsIGxhIGZlbW1lIGR1dCBsw6JjaGVyIGxhIGJvdWxlLCBxdWkgcm91bGEgZW4gYmFzIGRlIGxhIHJ1ZS5cblxuTGEgZmVtbWUgcmVwcml0IHNvbiBzb3VmZmxlIGV0IHJlZGVzY2VuZGl0IHZlcnMgbGEgYm91bGUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InNvbW1laWwyIn0seyJwdWJsaWNOYW1lIjoiUydlZmZvbmRyZXIsIGTDqWNvdXJhZ8OpZSIsImRlc2NyaXB0aW9uIjoiQydlbiDDqXRhaXQgdHJvcC4iLCJib2R5IjoiTGEgZmVtbWUgdG9tYmEgc3VyIHNlcyBnZW5vdXgsIMOpcHVpc8OpZS4gSWwgbid5IGF2YWl0IHBhcyBkJ8OpY2hhcHBhdG9pcmUuIEVsbGUgbidhdmFpdCBwbHVzIHF1J8OgIGF0dGVuZHJlLCBvdSBjb250aW51ZXIgw6AgdG91dCBqYW1haXMuXG5cbsOAIGNlIG1vbWVudC1sw6AsIGVsbGUgc2VudGl0IHVuZSBwcsOpc2VuY2UgY29udHJlIGVsbGUuIEVsbGUgcmVnYXJkYS4gVW4gY2hhdCBibGFuYyBzJ8OpdGFpdCBibG90dGkgY29udHJlIGVsbGUsIHNvcnRpIGRlIG51bGxlIHBhcnQuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InNvbW1laWwzIn1dfSwic29tbWVpbDMiOnsicHVibGljTmFtZSI6IlVuIHLDqnZlIGRlIGNvbXBhZ25pZSIsImRlc2NyaXB0aW9uIjoiRGFucyBsZXMgcm95YXVtZXMgZHUgcsOqdmUsIGxlcyBmb3JtZXMgZXQgaWTDqWVzIGTDqWZpbGFpZW50IGxpYnJlbWVudC4gQ2V0dGUgbnVpdC1jaSwgZWxsZXMgYXZhaWVudCBjb252ZXJnw6kgdmVycyB1biByb2NoZXIgZW4gYmFzIGQndW5lIHJ1ZSBlbiBwZW50ZS4gVG91dGVmb2lzLCDDoCBwcsOpc2VudCwgbGEgZmVtbWUgbifDqXRhaXQgcGx1cyBzZXVsZS4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiUmVnYXJkZXIgbGUgbm91dmVsIGFycml2YW50IiwiZGVzY3JpcHRpb24iOiJJbCDDqXRhaXQgYmxhbmMsIGV0IGlsIHMnw6l0YWl0IGJsb3R0aSBjb250cmUgbGEgZmVtbWUgcG91ciBkb3JtaXIuIiwiYm9keSI6IkMnw6l0YWl0IHVuIGNoYXQgYXUgcGVsYWdlIGQndW4gYmxhbmMgaW1tYWN1bMOpLiBJbCBzJ8OpdGFpdCBibG90dGkgY29udHJlIGxhIGZlbW1lIHBvdXIgZG9ybWlyLCBldCDDoCBwcsOpc2VudCBpbCByZXNwaXJhaXQgcGFpc2libGVtZW50LCBzZXMgeWV1eCBmZXJtw6lzIHN1ciBkZSBkb3V4IHNvbmdlcy4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0Ijoic29tbWVpbDMifSx7InB1YmxpY05hbWUiOiJDYXJlc3NlciBsZSBub3V2ZWwgYXJyaXZhbnQiLCJkZXNjcmlwdGlvbiI6IklsIGF2YWl0IGwnYWlyIHNpIHBhaXNpYmxlLiIsImJvZHkiOiJMYSBmZW1tZSwgYm91Z2VhbnQgZG91Y2VtZW50LCBwYXNzYSBsYSBtYWluIHN1ciBsYSB0w6p0ZSBkdSBjaGF0LiBMZSBjaGF0IHJvbnJvbm5hIGRvdWNlbWVudCwgYXZhbnQgZGUgc2UgYmxvdHRpciBwbHVzIHByb2ZvbmTDqW1lbnQgY29udHJlIGVsbGUuXG5cbkxhIGZlbW1lIHNlIHNlbnRhaXQgdW4gcGV0aXQgcGV1IG1pZXV4LCDDoCBwcsOpc2VudC4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0Ijoic29tbWVpbDMifSx7InB1YmxpY05hbWUiOiJSZWdhcmRlciBhdXRvdXIgZGUgc29pIiwiZGVzY3JpcHRpb24iOiJMYSB2aWxsZSBuJ8OpdGFpdCBwbHVzIGF1c3NpIHZpZGUgcXUnYXZhbnQuIiwiYm9keSI6IkxhIGZlbW1lIHJlZ2FyZGEgYXV0b3VyIGQnZWxsZS4gTGEgdmlsbGUgbifDqXRhaXQgcGx1cyBhdXNzaSB2aWRlIHF1J2F2YW50LiBEZSB0b3V0ZXMgbGVzIGRpcmVjdGlvbnMsIGRlIHRvdXRlcyBsZXMgZmVuw6p0cmVzLCBkZXMgY2hhdHMgdmVuYWllbnQuXG5cbkNlbnRhaW5lIHBhciBjZW50YWluZSwgaWxzIHZpbnJlbnQgc2FucyBhdXRyZSBicnVpdCBxdWUgY2VsdWkgZHUgdGFwb3RlbWVudCBkZSBsZXVycyBwYXR0ZXMgc3VyIGxhIGNoYXVzc8OpZSwgbGV1cnMgcGVsYWdlcyBkZSB0b3V0ZXMgbGVzIGNvdWxldXJzLlxuXG5MZSBjaGF0IGVuZG9ybWkgc2UgcsOpdmVpbGxhLCBzZSBsZXZhIGV0IGpldGEgdW4gY291cCBkJ29laWwgdmVycyBsYSBib3VsZS4gSWwgZml4YSBsYSBmZW1tZSBxdWVscXVlcyBzZWNvbmRlcyBwdWlzIGNsaWduYSBsZW50ZW1lbnQgZGVzIHlldXgsIGVuIGF0dGVudGUgcXUnZWxsZSBmYXNzZSBxdWVscXVlIGNob3NlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJzb21tZWlsNCJ9XX0sInNvbW1laWw0Ijp7InB1YmxpY05hbWUiOiJVbiByw6p2ZSBkZSBjb21wYWduaWUiLCJkZXNjcmlwdGlvbiI6IkRhbnMgbGVzIHJveWF1bWVzIGR1IHLDqnZlLCBsZXMgZm9ybWVzIGV0IGlkw6llcyBkw6lmaWxhaWVudCBsaWJyZW1lbnQuIENldHRlIG51aXQtY2ksIGVsbGVzIGF2YWllbnQgY29udmVyZ8OpIHZlcnMgdW4gcm9jaGVyIGVuIGJhcyBkJ3VuZSBydWUgZW4gcGVudGUuIFRvdXRlZm9pcywgw6AgcHLDqXNlbnQsIGxhIGZlbW1lIG4nw6l0YWl0IHBsdXMgc2V1bGUuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlBvdXNzZXIgbGEgYm91bGUgZGUgbWFyYnJlIiwiZGVzY3JpcHRpb24iOiJEZXMgcmVuZm9ydHMgw6l0YWllbnQgYXJyaXbDqXMuIiwiYm9keSI6IkxhIGZlbW1lIHNlIGxldmEgZXQgY29tbWVuw6dhIMOgIHBvdXNzZXIgbGEgYm91bGUuIENvbW1lIGF2YW50LCBsYSBib3VsZSBjb21tZW7Dp2EgcGFyIMOqdHJlIGzDqWfDqHJlLCBtYWlzIGVsbGUgcydhbG91cmRpdCBiaWVudMO0dC5cblxuQXUgbW9tZW50IG/DuSBsYSBmZW1tZSBjb21tZW7Dp2FpdCDDoCBmYWlibGlyLCBsZXMgY2hhdHMgdmlucmVudCBzZSBqb2luZHJlIMOgIGVsbGUgcG91ciBwb3Vzc2VyLiBMYSBib3VsZSBkZXZlbmFpdCBkZSBwbHVzIGVuIHBsdXMgbG91cmRlLCBtYWlzIGxlcyBjaGF0cywgc2FucyB1biBicnVpdCwgdmVuYWllbnQgZGUgcGx1cyBlbiBwbHVzIG5vbWJyZXV4IHBvdXIgYWlkZXIsIGV0IHBvdXNzYWllbnQgbGEgYm91bGUgc2FucyBlZmZvcnQuXG5cbklscyBwb3Vzc2FpZW50LCBldCBwb3Vzc2FpZW50LCBsZXMgY2hhdHMgY29udHJhbnQgbGUgcG9pZHMgZGUgbGEgYm91bGUuIExhIGZlbW1lIHNlbnRpdCBxdSdpbHMgYWxsYWllbnQgdmFpbmNyZSwgcXUnaWxzIGFsbGFpZW50IGFycml2ZXIgYXUgYm91dCBkZSBjZXR0ZSBwZW50ZSwgbGV1cnMgZm9yY2VzIHLDqXVuaWVzLCBsb3JzcXUndW4gYnJ1aXQgc2UgZMOpdGFjaGEgZGUgbCdlZmZvcnQgc2lsZW5jaWV1eC5cblxuTGUgYnJ1aXQgw6l0YWl0IGQnYWJvcmQgw6AgcGVpbmUgYXVkaWJsZSwgcHVpcyBkZXZpbnQgcGx1cyBmb3J0LiBDJ8OpdGFpdCB1biBtaWF1bGVtZW50LSBub24sIGMnw6l0YWl0IHVuZSB2b2l4LiBFbGxlIGRpc2FpdCBxdWVscXVlIGNob3NlIGQnaW5kaXN0aW5jdC5cblxuTGUgYnJ1aXQgc2UgcHLDqWNpc2E7IGxhIHZvaXggcsOpcMOpdGFpdCBsZSBtw6ptZSBtb3Q6IFwiSHVtYWluZT9cIlxuXG5MYSBmZW1tZSBzZSByw6l2ZWlsbGEgZW4gc3Vyc2F1dCwgbWFpcyBsZSBicnVpdCByZXN0YSwgdmVuYW50IGQnw6AgY8O0dMOpIGQnZWxsZS5cblxuRWxsZSBzZSB0b3VybmEgZGUgY8O0dMOpIGV0IHZpdCB1bmUgcGFpcmUgZCd5ZXV4IHF1aSBsYSBmaXhhaWVudC4gVW4gY2hhdCB0aWdyw6kgbGEgcmVnYXJkYWl0LCBhdHRlbmRhbnQgw6AgY8O0dMOpIGRlIHNvbiBsaXQuXG5cbkxlIGNoYXQgb3V2cml0IGxhIGJvdWNoZSBldCBwYXJsYTogXCJIdW1haW5lLCBqJ2FpIGJlc29pbiBkZSB0b2kuXCIiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbImFwcGFydGVtZW50Il0sInVuc2V0IjpbImVuVHJhaW5EZURvcm1pciIsIm9ic2VydmVQYXJDaGF0Il0sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJjaGFwaXRyZTIifV19LCJhcHBhcnRlbWVudFRvaXQiOnsicHVibGljTmFtZSI6IlN1ciBsZXMgdG9pdHMgZGUgbGEgdmlsbGUiLCJkZXNjcmlwdGlvbiI6IkxlIGNoYXQgZ3VpZGFpdCBsYSBmZW1tZSBzdXIgbGVzIHRvaXRzIGRlIGxhIHZpbGxlLiBMdWkgZCd1biBwYXMgbMOpZ2VyIGV0IGFzc3Vyw6ksIGVsbGUgYXZlYyBsYSBwZXVyIGRlIGNhc3NlciB1bmUgdHVpbGUgZXQgZGUgdG9tYmVyLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJSZWdhcmRlciBlbiBiYXMiLCJkZXNjcmlwdGlvbiI6IlVuIGdvdWZmcmUgc2UgdHJvdXZhaXQgw6AgcXVlbHF1ZXMgZGl6YWluZXMgZGUgY2VudGltw6h0cmVzIGRlcyBwaWVkcyBkZSBsYSBmZW1tZS4iLCJib2R5IjoiVW4gZ291ZmZyZSBzZSB0cm91dmFpdCDDoCBxdWVscXVlcyBkaXphaW5lcyBkZSBjZW50aW3DqHRyZXMgZGVzIHBpZWRzIGRlIGxhIGZlbW1lLiBVbiBwYXMgZGUgdHJhdmVycyBvdSB1bmUgdHVpbGUgY2Fzc8OpZSBldCBlbGxlIGZpbmlyYWl0IGVuIGJhcyBkZSBsYSBydWUsIGVuIG1hdXZhaXMgw6l0YXQuIE1hbGdyw6kgbGUgZGFuZ2VyLCBlbGxlIMOpdGFpdCBjdXJpZXVzZTogZWxsZSBuJ2F2YWl0IGphbWFpcyB2dSBsYSB2aWxsZSBkZSBjZXQgYW5nbGUtbMOgOyBsZXMgbHVtacOocmVzIGRlcyBmZW7DqnRyZXMgw6ljbGFpcmFpZW50IGxldXIgcGFzc2FnZSwgbGVzIHRvaXRzIGZvcm1hbnQgYXV0YW50IGRlIG1vbnRhZ25lcyBkw6lsaW1pdGFudCBsZXMgY29tYmVzIHNvbWJyZXMgZGVzIHJ1ZXMgZW4gYmFzLlxuXG5EZSBjZXMgdG9pdHMsIGVsbGUgcG91dmFpdCBhbGxlciBuJ2ltcG9ydGUgb8O5LCBhdSBsaWV1IGQnw6p0cmUgY29uZmluw6llIGF1eCBhcnTDqHJlcyBub2lyZXMgZGVzIHJ1ZXMuIExlIGNpZWwgw6l0YWl0IHRvdWpvdXJzIG9wYXF1ZSwgbWFpcyBpbCBwYXJhaXNzYWl0IHBsdXMgZ3JhbmQuIFVuZSBkb3VjZSBicmlzZSBzb3VmZmxhaXQgc3VyIGxhIHBhaXJlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJhcHBhcnRlbWVudFRvaXQifSx7InB1YmxpY05hbWUiOiJQb3Vyc3VpdnJlIHNvbiBjaGVtaW4iLCJkZXNjcmlwdGlvbiI6IkxlIGNoYXQgcydhZ2l0YWl0LiBMZSB0ZW1wcyBwcmVzc2FpdC4gSWwgZmFsbGFpdCBhdmFuY2VyLiIsImJvZHkiOiJBcHLDqHMgdW4gbG9uZyB0cmFqZXQgc3VyIGxlcyB0b2l0cywgaWxzIGFycml2w6hyZW50IHZlcnMgdW4gaW1tZXVibGUgY2FycsOpIGRvbnQgbGUgdG9pdCBwbGF0IMOpdGFpdCDDqWNsYWlyw6kgcGFyIHVuZSBsYW1wZSBzaXR1w6llIGF1IG1pbGlldS4gQXZhbnQgZCd5IGFsbGVyLCBsZSBjaGF0IGRpdCDDoCBsYSBmZW1tZTpcblxuXCJOb3VzIHkgc29tbWVzLiBJbHMgbmUgc2Vyb250IHBhcyB0csOocyBjb250ZW50cyBkZSBub3VzIHZvaXIsIGFsb3JzIGlsIG5lIGZhdWRyYSBwYXMgbGVzIHByb3ZvcXVlci4gTmUgZml4ZSBwZXJzb25uZSB0cm9wIGxvbmd0ZW1wcyBldCDDqXZpdGUgbGVzIG1vdXZlbWVudHMgYnJ1c3F1ZXMuIEplIHNhaXMgcXVlIGMnZXN0IGR1ciwgbWFpcyBqJ2VzcMOocmUgcXVlIMOnYSB2YSBtYXJjaGVyLlwiXG5cbkVsbGUgbidlbiBmdXQgcGFzIHJhc3N1csOpZSwgY2UgZG9udCBpbCBuZSBzZW1ibGEgcGFzIHByZW5kcmUgbm90ZS4gSWwgc2UgdG91cm5hIHVuZSBkZXJuacOocmUgZm9pcyB2ZXJzIGxhIGZlbW1lOlxuXG5cIkQnYWlsbGV1cnMsIGonYWkgb21pcyBkZSBmYWlyZSBsZXMgcHLDqXNlbnRhdGlvbnMuIEplIG0nYXBwZWxsZSBMdWNreS5cIlxuXG5QdWlzIGlsIHNhdXRhLCBldCBlbGxlIGxlIHN1aXZpdC5cblxuTGUgdG9pdCBzZW1ibGFpdCB2aWRlLCBtYWlzIEx1Y2t5IMOpdGFpdCBuZXJ2ZXV4LiBMYSBmZW1tZSBjb21wcml0IHBvdXJxdW9pIGxvcnNxdSdlbGxlIHZpdCBsZXMgY2VudGFpbmVzIGRlIHNpbGhvdWV0dGVzIGdyaXNlcyBxdWkgbGVzIGF0dGVuZGFpZW50IGRhbnMgbCdvbWJyZSBkZXMgcmVib3Jkcy5cblxuVW5lIHNpbGhvdWV0dGUgcydhdmFuw6dhLCB1bmUgY2hhdHRlIG5vaXJlIHNvcnRpdCBkZSBsJ29tYnJlIGQndW4gcGFzIGTDqWNpZMOpLiBFbGxlIGZldWxhIMOgIGwnaW50ZW50aW9uIGRlIEx1Y2t5LCBwdWlzIGpldGEgdW4gY291cCBkJ29laWwgdmVycyBsYSBmZW1tZS4gRW4gbGFuZ3VhZ2UgaHVtYWluLCBlbGxlIMOpbm9uw6dhIGQndW4gdG9uIG5hcnF1b2lzOlxuXG5cIlR1IGVzIHJldmVudSwgJ0x1Y2t5Jy4gQXZlYyB1bmUgaHVtYWluZS4gRGlzLW1vaSwgcXVlbGxlIHJhaXNvbiBwZXV4LXR1IG5vdXMgZG9ubmVyIGRlIG5lIHBhcyB0J8OpdmlzY8OpcmVyP1wiXG5cblwiSidhaSBxdWVscXVlIGNob3NlIMOgIGRpcmUsIE1yYVwiLCBkaXQgTHVja3kuIElsIGpldGEgdW4gY291cnQgcmVnYXJkIHZlcnMgbGEgZmVtbWUgZXQgY29udGludWE6IFwiRXQgZWxsZSBhdXNzaS5cIiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJhc3NlbWJsZWUxIn1dfSwiYXNzZW1ibGVlMSI6eyJwdWJsaWNOYW1lIjoiTCdhc3NlbWJsw6llIiwiZGVzY3JpcHRpb24iOiJDJ8OpdGFpdCB1bmUgc2l0dWF0aW9uIGRhbmdlcmV1c2UuIFF1J2FsbGFpdCBkaXJlIEx1Y2t5PyIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJcIkMnZXN0IHVuZSBtYXV2YWlzZSBpZMOpZSBkZSBwYXJ0aXJcIiIsImRlc2NyaXB0aW9uIjoiTHVja3kgY29udGludWE6IFwiQ29tbWUgdm91cyBsZSBzYXZleiwgTXJhIGNpLXByw6lzZW50ZSBlc3QgYXJyaXbDqWUgaWwgeSBhIHBsdXNpZXVycyBtb2lzLi4uXCIiLCJib2R5IjoiTHVja3kgY29udGludWE6IFwiQ29tbWUgdm91cyBsZSBzYXZleiwgTXJhIGNpLXByw6lzZW50ZSBlc3QgYXJyaXbDqWUgaWwgeSBhIHBsdXNpZXVycyBtb2lzIGRlIGwnZXh0w6lyaWV1ciBzYXV2YWdlIHBvdXIgbm91cyBjb252YWluY3JlIGRlIG5vdXMgbGliw6lyZXIgZGUgbm9zIG1hw650cmVzIGh1bWFpbnMuXCJcblxuQWxlbnRvdXJzLCBsZXMgY2hhdHMgcmVzdMOocmVudCBzaWxlbmNpZXV4LiBBdWN1bmUgb2JqZWN0aW9uLiBNcmEsIGxhIGNoYXR0ZSBub2lyZSwgYWdpdGEgbGEgcXVldWUgZW4gbCfDqWNvdXRhbnQuXG5cblwiRWxsZSBub3VzIGEgZGl0IHF1ZSBsZXMgaHVtYWlucyBub3VzIG9wcHJpbWFpZW50LCBxdWUgbm90cmUgdnJhaWUgbmF0dXJlIMOpdGFpdCBsaWJyZSwgZXQgcXVlIG5vdXMgZGV2cmlvbnMgZmFpcmUgc8OpY2Vzc2lvbiBkZSBub3MgbWHDrnRyZXMgcG91ciBsYSBzdWl2cmUsIHBvdXIgc29ydGlyIGRlIGxhIHZpbGxlLlwiXG5cbkwnYXVkaXRvaXJlIHByb2xvbmdlYSBzb24gw6ljb3V0ZSBzaWxlbmNpZXVzZS4gVG91cyBzZSBtw6lmaWFpZW50IGRlIGNlIHF1ZSBMdWNreSBhbGxhaXQgZGlyZS5cblxuXCJDJ2VzdCB1bmUgaWTDqWUgc3R1cGlkZS4gUGV1IGQnZW50cmUgbm91cyBzb250IHByw6p0cyDDoCBsYSB2aWUgc2F1dmFnZS4gTm91cyBhdm9ucyDDqXTDqSDDqWxldsOpcyBkYW5zIGNldHRlIHZpbGxlLCBkYW5zIGNlcyBhcHBhcnRlbWVudHMuIE5vdXMgYXZvbnMgZ3JhbmRpIGRhbnMgbGEgZmFtaWxsZSBkZSBub3MgbWHDrnRyZXMuIFF1J2lsIHkgYS10LWlsIHBvdXIgbm91cyDDoCBsYSBjYW1wYWduZT8gRGFucyBsZXMgZm9yw6p0cz8gRGFucyBsZXMgbW9udGFnbmVzPyBEaXMtbm91cywgTXJhOiBRdSdlc3QtY2UgcXVlIMOnYSBub3VzIGFtw6huZT9cIlxuXG5NcmEsIGZ1bG1pbmFudGUsIHMnYXZhbsOnYSBwb3VyIHLDqXBvbmRyZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiYXNzZW1ibGVlMiJ9XX0sImFzc2VtYmxlZTIiOnsicHVibGljTmFtZSI6IkxhIHLDqXBvbnNlIGRlIE1yYSIsImRlc2NyaXB0aW9uIjoiTGEgZ3VpZGUgc2F1dmFnZSBkZXMgY2hhdHMgcydleHByaW1hLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJcIlR1IGTDqWZvcm1lcyB0b3V0XCIiLCJkZXNjcmlwdGlvbiI6IkZ1bG1pbmFudGUsIGVsbGUgcydhdmFuw6dhIHBvdXIgcGFybGVyLiIsImJvZHkiOiJGdWxtaW5hbnRlLCBNcmEgcydhdmFuw6dhIHBvdXIgcGFybGVyOlxuXG5cIlR1IGTDqWZvcm1lcyB0b3V0LCBhdm9ydG9uLiBUdSBhcyBpZ25vcsOpIHRvdXQgY2UgcXVpIG5lIHQnYXJyYW5nZWFpdCBwYXMsIGNhciB0dSBlcyDDoCBsYSBib3R0ZSBkZXMgaHVtYWlucy4gVHUgdmllbnMgYXZlYyBsZSBub20gcXUnaWxzIHQnb250IGRvbm7DqSBldCB0dSByb25yb25uZXMgZGFucyBsZXVycyBwYXR0ZXMhIFR1IG5lIHNhaXMgcGFzIGNoYXNzZXIsIG1pc8OpcmFibGUgaW50cnVzLCB0b3V0ZSB0YSBzdXN0ZW5hbmNlLCB0dSB2YXMgbGEgY2hlcmNoZXIgZGFucyB1bmUgZ2FtZWxsZSEgVHUgc2VtYmxlcyBvdWJsaWVyIGxlcyBhYnVzIGRvbnQgb250IMOpdMOpIHZpY3RpbWVzIHRhbnQgZGVzIG7DtHRyZXM7IHR1IHNlbWJsZXMgb3VibGllciBsYSB2aWUgZGUgc3ViYWx0ZXJuZSDDoCBsYXF1ZWxsZSBsZXMgaHVtYWlucyBub3VzIGZvcmNlbnQ7IHR1IHNlbWJsZXMgb21ldHRyZSB0b3V0ZXMgY2VzIGNob3NlcywgZXQgamUgc2FpcyBwb3VycXVvaTogdHUgbidhcyBwYXMgZCdhcmd1bWVudHMuIFBhcyBkZSByYWlzb24gZGUgbm91cyBmYWlyZSByZXN0ZXIgc291cyBsZXVyIGpvdWcuIFR1IGVzIHRlbGxlbWVudCBmYWlibGUgcXVlIHR1IGRvaXMgdGUgZmFpcmUgYWNjb21wYWduZXIgZCd1bmUgaHVtYWluZSBwb3VyIHBhcmxlciDDoCB0YSBwbGFjZS5cIlxuXG5cIkplIG5lIGRpcyBxdWUgbGVzIGZhaXRzLiBDZSBkb250IHR1IG0nYWNjdXNlcywgZCfDqnRyZSBzb3VtaXMgYXV4IGh1bWFpbnMsIHR1IHBldXggbGUgZGlyZSBkZSBwcmVzcXVlIG5vdXMgdG91cyBpY2kuIE5vdXMgYXZvbnMgdG91cyDDqXTDqSBub3VycmlzIHBhciBnYW1lbGxlLCB2b2lyZSBtw6ptZSBwYXIgYmliZXJvbiwgZXQgcmVnYXJkZSBtYWludGVuYW50OiBwbHVzaWV1cnMgbW9pcyBxdWUgY2V0dGUgcGV0aXRlIHLDqXZvbHRlIGEgY29tbWVuY8OpLCBldCBub3VzIHBlaW5vbnMgw6Agbm91cyByw6lwYXJ0aXIgbGVzIHByb2llcyBkYW5zIGNldHRlIHZpbGxlIGV4aWd1w6suXCJcblxuXCJDZSBxdWkgZXN0IHBvdXJxdW9pIG5vdXMgZGV2b25zIHBhcnRpci4gTm91cyBuZSBkZXZvbnMgcGFzIGTDqXBlbmRyZSBkZXMgaHVtYWlucyBldCBkZSBsZXVycyBib25uZXMgZ3LDomNlczsgZWxsZXMgbmUgc29udCBxdWUgZGVzIG1hc3F1ZXMgZGVycmnDqHJlIGRlcyBpbnRlbnRpb25zIHRyYcOudHJlc3Nlcy4gSmFtYWlzIG5vdXMgbmUgbm91cyBsYWlzc2Vyb25zIGFjaGV0ZXIgcG91ciB1biBib2wgZGUgbGFpdCFcIlxuXG5MYSBmb3VsZSBkZXMgY2hhdHMgYXV0b3VyIHJlbXVhIGVuIGFwcHJvYmF0aW9uLiBNcmEgc2UgdG91cm5hIHZlcnMgbGEgZmVtbWU6XG5cblwiRW4gcGFybGFudCBkZSBjZWxhLCBxdSdhcy10dSDDoCBub3VzIGRpcmUsIGh1bWFpbmU/XCIiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiYXNzZW1ibGVlMyJ9XX0sImFzc2VtYmxlZTMiOnsicHVibGljTmFtZSI6IkRpcmUgcXVlbHF1ZSBjaG9zZSwgbidpbXBvcnRlIHF1b2kiLCJkZXNjcmlwdGlvbiI6IlRvdXMgcmVnYXJkYWllbnQgbGEgZmVtbWUuIElsIGZhbGxhaXQgcsOpcG9uZHJlIHF1ZWxxdWUgY2hvc2UuIE1haXMgZGlyZSBxdW9pPyIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJcIi4uLlwiIiwiZGVzY3JpcHRpb24iOiJSaWVuIG5lIHZlbmFpdC4iLCJib2R5IjoiTGEgZmVtbWUgcmVzdGEgc2lsZW5jaWV1c2UuIEVsbGUgbmUgc2F2YWl0IHBhcyBxdW9pIGRpcmUuIE1yYSBsYSByZWdhcmRhOlxuXG5cIkMnZXN0IMOnYSBxdWUgdHUgbm91cyBhbcOobmVzLCBMdWNreT8gRWxsZSBhIGwnYWlyIMOpdHJhbmdlbWVudCBmcmFwcMOpZSBkZSBtdXRpc21lISBTZXJhaXQtY2UgcGFyY2UgcXUnZWxsZSBuJ2EgcmllbiDDoCBkaXJlP1wiXG5cbkx1Y2t5IHJlZ2FyZGEgbGEgZmVtbWUsIGTDqcOndSBtYWlzIHBhcyBzdXJwcmlzLiBJbCB0ZW50YSBkZSBzYXV2ZXIgbGEgc2l0dWF0aW9uOlxuXG5cIkxhaXNzZS1sdWkgZHUgdGVtcHMsIGVsbGUgYSBqdXN0ZSBiZXNvaW4gZGUtXCJcblxuXCJMdWNreSwgY2UgZG9udCB0b24gaHVtYWluZSBhIGJlc29pbiwgYydlc3QgZGUgbm91cyBjb21wcmVuZHJlLiBUdSBsJ2FzIGFtZW7DqWUgc2FucyBxdSdlbGxlIHNhY2hlIHJpZW4gZGUgbm91cywgcXVlIHZldXgtdHUgcXUnZWxsZSBkaXNlPyBDZSBuJ2VzdCBwYXMgw6dhIHF1aSB2YSBub3VzIGNvbnZhaW5jcmUuIFR1IMOpdGFpcyBkw6lzZXNww6lyw6kgZCdhcHByZW5kcmUgcXVlIG5vdXMgw6l0aW9ucyBzdXIgbGUgcG9pbnQgZGUgcGFydGlyIGF1IHBvaW50IGRlIHByZW5kcmUgbGEgcHJlbWnDqHJlIHBlcnNvbm5lIHF1aSB2ZW5haXQ/XCJcblxuTGEgZmVtbWUgY2hlcmNoYWl0IGVuY29yZSBxdWVscXVlIGNob3NlIMOgIGRpcmUuIE1yYSBsdWkgZGl0OlxuXG5cIkMnZXN0IGludXRpbGUgZGUgY2hlcmNoZXIsIGh1bWFpbmUuIFR1IG5lIG5vdXMgY29ubmFpcyBwYXMuXCJcblxuTHVja3kgdm91bHV0IGFyZ3VtZW50ZXI6XG5cblwiw4ljb3V0ZSwgTXJhLCBqZSBzdWlzIGNvbnZhaW5jdSBxdWUtXCJcblxuTXJhIGxlIGNvdXBhOiBcIkV0IHRvaSwgbm91cyBuZSB0J8OpY291dGVyb25zIHBhcywgdHUgbidhcyBwYXMgdm9peCBhdSBjaGFwaXRyZSwgZmFpYmxhcmQuXCJcblxuRWxsZSByw6lmbMOpY2hpdCB1biBtb21lbnQsIHNvbmRhIGxhIGZvdWxlLCBwdWlzIHNlIHRvdXJuYSDDoCBub3V2ZWF1IHZlcnMgbGEgZmVtbWUuXG5cblwiVG9pLCB0dSBuJ2FzIHJpZW4gw6AgZmFpcmUgaWNpLlwiIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImNoYXBpdHJlMyJ9XX0sImNoYXBpdHJlMiI6eyJwdWJsaWNOYW1lIjoiQ2hhcGl0cmUgMjogVG91cyBsZXMgY2hhdHMgc29udCBncmlzIiwiZGVzY3JpcHRpb24iOiJMZSBjaGF0IHRpZ3LDqSBmaXhhaXQgbGEgZmVtbWUgYXZlYyBkZSBncmFuZHMgeWV1eCwgc29uIHJlZ2FyZCBlbnRyZSBsJ2ltcGF0aWVuY2UgZXQgbGEgc3VwcGxpY2F0aW9uLiBTYSBxdWV1ZSBiYXR0YWl0IGwnYWlyIHZpdmVtZW50IGV0IGlycsOpZ3VsacOocmVtZW50LiBMZXMgcXVlc3Rpb25zIHNlIGJvdXNjdWxhaWVudCBzdXIgbGVzIGzDqHZyZXMgZGUgbGEgZmVtbWUuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlwiVHUgcGV1eCBwYXJsZXI/XCIiLCJkZXNjcmlwdGlvbiI6IkMnw6l0YWl0LCBzb21tZSB0b3V0ZSwgdW5lIHF1ZXN0aW9uIGFzc2V6IGltcG9ydGFudGUuIiwiYm9keSI6IkxlIGNoYXQgaW5zcGlyYSwgcHVpcywgcsOpYWxpc2FudCBxdSdpbCBkZXZyYWl0IHJlcHJlbmRyZSBsZXMgZXhwbGljYXRpb25zIGRlcHVpcyB1biBwb2ludCBwbHVzIGJhc2lxdWUsIHNvdXBpcmEuXG5cblwiT3VpLCBqZSBwZXV4IHBhcmxlci4gQ29tbWUgdG91cyBsZXMgY2hhdHMuIEQnaGFiaXR1ZGUsIG5vdXMgbidhdm9ucyBwYXMgYmVzb2luIGRlIGxlIGZhaXJlLiBKZSBtJ2V4Y3VzZSBkdSBmYWl0IHF1ZSB0dSBkb2l2ZXMgbCdhcHByZW5kcmUgbWFpbnRlbmFudCwgbWFpcyBsJ3VyZ2VuY2UgZ3VldHRlLiBEJ2F1dHJlcyBxdWVzdGlvbnM/XCIiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiY2hhcGl0cmUyIn0seyJwdWJsaWNOYW1lIjoiXCJQb3VycXVvaSBtb2k/XCIiLCJkZXNjcmlwdGlvbiI6IlF1J2F2YWl0LWVsbGUgZGUgc3DDqWNpYWwgcG91ciBxdSd1biBmw6lsaW4gcGFybGFudCByZW50cmUgZGFucyBzYSBjaGFtYnJlIGF1IG1pbGlldSBkZSBsYSBudWl0PyIsImJvZHkiOiJcIkMnZXN0IHNpbXBsZS4gVG91cyBsZXMgY2hhdHMgZGUgbGEgdmlsbGUgdCdhcHByw6ljaWVudCDDoCBjYXVzZSBkdSBsYWl0IHF1ZSB0dSBsYWlzc2VzIMOgIHRhIGZlbsOqdHJlLCBldCB0dSBuJ2FzIGphbWFpcyBwb3Nzw6lkw6kgdW4gc2V1bCBkJ2VudHJlIGV1eC4gVHUgZXMgbGUgc2V1bCDDqnRyZSBodW1haW4gcXUnaWxzIMOpY291dGVyb250IGRhbnMgY2V0dGUgdmlsbGUuXCIiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiY2hhcGl0cmUyIn0seyJwdWJsaWNOYW1lIjoiXCJDb21tZW50IGVzLXR1IHJlbnRyw6k/XCIiLCJkZXNjcmlwdGlvbiI6IkQnb8O5IHZpZW50IGNlIGNoYXQ/IiwiYm9keSI6IkxlIGNoYXQsIGzDqWfDqHJlbWVudCBjb25zdGVybsOpLCByw6lwb25kaXQgYXByw6hzIHVuZSBwYXVzZTogXCIuLi5wYXIgbGEgZmVuw6p0cmU/XCIiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiY2hhcGl0cmUyIn0seyJwdWJsaWNOYW1lIjoiXCJRdWUgcHVpcy1qZSBmYWlyZSBwb3VyIHRvaT9cIiIsImRlc2NyaXB0aW9uIjoiQXUgdmlmIGR1IHN1amV0LiIsImJvZHkiOiJcIkonYWkgYmVzb2luIGRlIHRvbiBhaWRlLCBwYXJjZSBxdWUgbGVzIGNoYXRzIGRlIGNldHRlIHZpbGxlIHZldWxlbnQgcGFydGlyLCBldCBqZSB2ZXV4IGVtcMOqY2hlciDDp2EuXCJcblxuSWwgc2UgZGlyaWdlYSB2ZXJzIGxhIGZlbsOqdHJlIGV0IHNlIHJldG91cm5hIHZlcnMgbGEgZmVtbWU6XG5cblwiVmllbnMgYXZlYyBtb2ksIGlscyBzZSBzb250IHRvdXMgcmFzc2VtYmzDqXMsIGV0IGlsIGZhdXQgcXVlIHR1IGxlcyBjb252YWlucXVlcyBkZSByZXN0ZXIuXCJcblxuSWwgc2F1dGEgcGFyIGxhIGZlbsOqdHJlIHN1ciBsZSB0b2l0IGV0IGxhIGZlbW1lLCBhcHLDqHMgcyfDqnRyZSBjaGFuZ8OpZSBlbiB2aXRlc3NlLCBsZSBzdWl2aXQuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6WyJ0b2l0cyJdLCJ1bnNldCI6WyJhcHBhcnRlbWVudCJdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiYXBwYXJ0ZW1lbnRUb2l0In1dfSwiYWZmaWNoZXMxIjp7InB1YmxpY05hbWUiOiJMYSBsZWN0dXJlIGRlcyBhZmZpY2hlcy4iLCJkZXNjcmlwdGlvbiI6IkxhIGZlbW1lIGxpc2FpdCBldCBsZXMgY2hhdHMgw6ljb3V0YWllbnQsIGN1cmlldXguIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlBsZWluIGQnYWZmaWNoZXMiLCJkZXNjcmlwdGlvbiI6IkxhIGZlbW1lIGxpc2FpdCBsZXMgYWZmaWNoZXMsIHVuZSDDoCB1bmUuIExlcyBjaGF0cyDDqWNvdXRhaWVudC4iLCJib2R5IjoiTGEgZmVtbWUgcydhc3NpdCBldCBjb21tZW7Dp2Egw6AgbGlyZS4gTGVzIGNoYXRzIGwnw6ljb3V0w6hyZW50IMOpbm9uY2VyIGxlIGNvbnRlbnUgZGUgY2hhcXVlIGFmZmljaGUgdW5lIMOgIHVuZS5cblxuXCJBdmV6IHZvdXMgdnUgY2UgY2hhdD8gSWwgcydhcHBlbGxlIENhcmFtZWwuIFNpIHZvdXMgbGUgdm95ZXosIGNvbnRhY3Rlei4uLlwiIMOgIGwnw6l2b2NhdGlvbiBkdSBub20sIHVuIGNhdCBzZSByZWRyZXNzYS5cblxuXCJDaGF0IHBlcmR1LiBUcsOocyB0aW1pZGUsIG5lIHBhcyBicnVzcXVlci4uLlwiIEVsbGUgbW9udHJhIGxhIHBob3RvIGR1IGhhdXQgZGUgbCdhZmZpY2hlLiBVbiBjaGF0IHMneSByZWNvbm51dC5cblxuXCJTaSB2b3VzIHZveWV6IG1vbiBjaGF0LCBhcHBlbGV6IG1hIG1hbWFuLiBTb24gbnVtw6lybyBjJ2VzdC4uLlwiIExhIGZlbW1lIG1vbnRyYSBsZSBkZXNzaW4gc3VyIGwnYWZmaWNoZSBldCBwb2ludGEgdmVycyBsZSBkZXNzaW46IFwiQydlc3QgbWFycXXDqSAnU2hlZW5hJy4gVW5lIGNoYXR0ZSBkYW5zIGxlIGZvbmQgYm91Z2VhLlxuXG5CZWF1Y291cCBkJ2FmZmljaGVzIHN1aXZpcmVudC4gTGVzIGNoYXRzLCB1biDDoCB1biwgZW50ZW5kaXJlbnQgbGV1ciBub20uXG5cbkVuZmluLCBsZSBib3V0IGRlIGxhIHBpbGUgYXJyaXZhOiBcIkNlbGxlLWNpIGEgw6l0w6kgaW1wcmltw6llIGJlYXVjb3VwIGRlIGZvaXMsIGV0IGNvbGzDqWUgcGFydG91dC5cIlxuXG5cIkNoYXQgdGlncsOpLiBJbCBhIGRpc3BhcnUgZGVwdWlzIDIgbW9pcywgdnUgcG91ciBsYSBkZXJuacOocmUgZm9pcyBkYW5zIGxhIHJ1ZSBncmlzZS4gSWwgZXN0IHRyw6hzIGltcG9ydGFudCBwb3VyIG1vaSBldCBpbCBtZSBtYW5xdWUgYmVhdWNvdXAuIFNpIHZvdXMgbGUgdm95ZXogYXBwZWxlei1tb2kgdG91dCBkZSBzdWl0ZSDDoCBjZSBudW3DqXJvLi4uIFMnaWwgdm91cyBwbGHDrnQsIHNpIHZvdXMgbGUgdm95ZXogYXZlcnRpc3Nlei1tb2ksIGlsIGNvbXB0ZSB0ZWxsZW1lbnQgcG91ciBtb2kuIEplIHZldXggYXUgbW9pbnMgc2F2b2lyIHMnaWwgZXN0IGVuIHZpZS4uLlwiXG5cbkVsbGUgZml0IHVuZSBwYXVzZSwgc3VycHJpc2UsIHB1aXMgdGVybWluYTogXCJTb24gbm9tIGVzdCBMdWNreS5cIlxuXG5MdWNreSByZWdhcmRhIGxhIGZlbW1lIGVuIG91dnJhbnQgZ3JhbmQgbGVzIHlldXgsIMOpbXUuIElsIG5lIGRpdCByaWVuLlxuXG5MJ2F1ZGllbmNlIMOpdGFpdCBzaWxlbmNpZXVzZS4gVG91cyBwZW5zYWllbnQgw6AgbGV1cnMgbWHDrnRyZXMsIMOgIGxldXJzIGFuY2llbm5lcyBtYWlzb25zLiBNcmEgaW50ZXJ2aW50OiBcIkFsbG9ucyBkb25jLCB2b3VzIG4nYWxsZXogcGFzIGNvbW1lbmNlciDDoCBkb3V0ZXIgbWFpbnRlbmFudCEgQWxsZXotdm91cyB2cmFpbWVudCBjaGFuZ2VyIGQnYXZpcyDDoCBjYXVzZSBkZSBxdWVscXVlcyBtb3RzIGltcHJpbcOpcyBzdXIgdW5lIGZldWlsbGU/IExlcyBodW1haW5zIHZvdXMgb3BwcmltYWllbnQhIFZvdWxlei12b3VzIHZyYWltZW50IHJldmVuaXIgY2hleiBldXggcG91ciBwb3Vyc3VpdnJlIGNlIGN5Y2xlP1wiXG5cbkxlcyBjaGF0cyByw6lmbMOpY2hpcmVudC4gRmluYWxlbWVudCwgdW4gcGFybGE6IFwiTXJhIG4nYSBwYXMgdG9ydC4gTm9zIG1hw650cmVzIG5vdXMgbWFucXVlbnQsIG1haXMgc2kgbm91cyByZXZlbm9ucyB2ZXJzIGV1eCwgbm91cyBmaW5pcm9ucyBjb21tZSBub3VzIGF2b25zIGNvbW1lbmPDqS4gUXVlIHBvdXZvbnMtbm91cyBmYWlyZT9cIlxuXG5BcHLDqHMgdW4gbW9tZW50IGRlIHLDqWZsZXhpb24sIGxhIGZlbW1lIHBhcmxhLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJhZmZpY2hlczIifV19LCJhZmZpY2hlczIiOnsicHVibGljTmFtZSI6IkxlIG1vbWVudCBkdSBjaG9peC4iLCJkZXNjcmlwdGlvbiI6IkxhIGZlbW1lIGF2YWl0IHVuZSBzdWdnZXN0aW9uLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJcIkV0IHNpIHZvdXMgcGFybGllej9cIiIsImRlc2NyaXB0aW9uIjoiTGVzIGNoYXRzIMOpdGFpZW50IGNob3F1w6lzLiIsImJvZHkiOiJMYSBmZW1tZSBkaXQ6IFwiRXQgc2kgdm91cyBwYXJsaWV6PyBWb3VzIGF2ZXogdW5lIHZvaXgsIHBvdXJxdW9pIG5lIGwndXRpbGlzZXotdm91cyBwYXMgcG91ciBkZW1hZGVyIGNlIHF1ZSB2b3VzIHZvdWxleiDDoCB2b3MgbWHDrnRyZXM/XCJcblxuVW4gYXV0cmUgY2hhdCByw6lwb25kaXQ6IFwiTm91cyBuZSBwb3V2b25zIHBhcy4gQydlc3QgdHJvcCBkYW5nZXJldXguXCJcblxuXCJQb3VycXVvaSBkYW5nZXJldXg/XCJcblxuXCJOb3RyZSB2b2l4IGVzdCB1biBzZWNyZXQuIE5vdXMgYXZvbnMgY29udmVudSBxdWUgbm91cyBuZSBwYXJsZXJpb25zIGphbWFpcyDDoCB1biBodW1haW5zIGRhbnMgc2EgbGFuZ3VlLCBjYXIgaWwgcG91cnJhaXQgbm91cyB1dGlsaXNlci4gTm90cmUgbGliZXJ0w6kgZW4gdGFudCBxdSdhbmltYXV4IGRvbWVzdGlxdWVzIGVzdCBkJ8OqdHJlIGludXRpbGVzLiBMZXMgaHVtYWlucyBwZW5zZW50IHF1ZSBub3VzIG5lIGxlcyBjb21wcmVub25zIHBhcy4gRGUgY2UgZmFpdCwgbm91cyBwb3V2b25zIGZhaXJlIGNlIHF1ZSBub3VzIHZvdWxvbnMuIFMnaWxzIHNhdmFpZW50IHF1ZSBub3VzIHBvdXZpb25zIHBhcmxlciwgaWxzIHNlIG3DqWZpZXJhaWVudCBkZSBub3VzLCBldCBpbHMgZXNzYWllcmFpZW50IGRlIG5vdXMgdXRpbGlzZXIuIEVuIGNlIG1vbWVudCwgbm91cyBzb21tZXMganVzdGUgYWRvcHTDqXMgcG91ciBvY2N1cGVyIGxhIHZpZSBkZXMgaHVtYWlucywgb3UsIGF1IG1pZXV4LCBwb3VyIGF0dHJhcGVyIGxlcyByYXRzLiBTJ2lscyBzYXZhaWVudCBjZSBxdWUgbm91cyBwb3V2aW9ucyBmYWlyZSwgaWxzIG5vdXMgdXRpbGlzZXJhaWVudCBjb21tZSBlc3Bpb25zIG91IHBpcmUuIEMnZXN0IHBsdXMgc2ltcGxlIGRlIHJlc3RlciBzb3VtaXMuIFNpbXBsZW1lbnQsIG5vdXMgbmUgcG91dmlvbnMgcGx1cyBsZSBzdXBwb3J0ZXIsIGFsb3JzIG5vdXMgYXZvbnMgdm91bHUgcGFydGlyLlwiXG5cblwiU2kgdm91cyByZXN0ZXogbXVldHMsIHZvdXMgbmUgcG91cnJleiBwYXMgY2hhbmdlciBxdW9pIHF1ZSBjZSBzb2l0LCDDoCBwYXJ0IGVuIHBhcnRhbnQuXCJcblxuXCJDZSBzb250IG5vcyBkZXV4IHNldWxzIGNob2l4LlwiXG5cblwiTm9uLiBWb3VzIGF2ZXogbGUgY2hvaXggZGUgY2hvaXNpciBxdWkgdm91cyB2b3VsZXogw6p0cmUsIG91IGRlIHJlamV0ZXIgw6AgbGEgZm9pcyBxdWkgdm91cyDDqnRlcyBldCBxdWkgdm91cyBuJ8OqdGVzIHBhcy4gU2kgdm91cyBwYXJsZXosIGlsIG4neSBhdXJhIHBhcyBxdWUgZGVzIGNvbnPDqXF1ZW5jZXMgcG9zaXRpdmVzLCBjJ2VzdCB2cmFpLiBNYWlzIGxlcyBodW1haW5zIG9udCB1biBkw6lmYXV0OiBpbHMgbifDqWNvdXRlbnQgcXVlIGNlIHF1aSBlc3QgY29tbWUgZXV4LiBFdCBwb3VyIMOqdHJlIGh1bWFpbiwgaWwgZmF1dCBwb3V2b2lyIHBhcmxlci5cIlxuXG5cIk1haXMgw6ljb3V0ZXJvbnQtaWxzIGNlIHF1ZSBub3VzIGF2b25zIMOgIGRpcmU/XCJcblxuXCJWb3VzIMOqdGVzIGRhbnMgY2hhcXVlIG1haXNvbiwgYXV4IGPDtHTDqXMgZCdodW1haW5zIHF1aSBzZSBzb3VjaWVudCBkZSB2b3VzIGV0IHF1aSwgcG91ciBjZXJ0YWlucywgb250IGdyYW5kaSBhdmVjIHZvdXMuIFNpIHZvdXMgcGFybGV6IHRvdXMsIHZvdXMgc2VyZXogZW50ZW5kdXMuIEMnZXN0IHVuZSBjaGFuY2UgcXVlIGJlYXVjb3VwIG4nb250IHBhcy5cIlxuXG5cIk1haXMgcXVlIGRpcm9ucy1ub3VzIGF1eCBodW1haW5zP1wiXG5cblwiQ2UgcXVlIHZvdXMgdm91bGV6IGxldXIgZGVtYW5kZXIuIEQnYXZvaXIgbGUgY29udHLDtGxlIGRlIHZvdHJlIGNvcnBzLCBkJ8OqdHJlIGluZMOpcGVuZGFudHMgZXQgbGlicmVzIGRlIHZvcyBtb3V2ZW1lbnRzLCBkZSB2b3RyZSBpZGVudGl0w6kuIFNpIHZvdXMgcmVudHJleiBjaGV6IHZvdXMgY2UgbWF0aW4gZXQgZGl0ZXMgdG91dCDDp2EsIHZvdXMgY2hhbmdlcmV6IGxlcyBjaG9zZXMuXCJcblxuTXJhIHMnaW50ZXJwb3NhOiBcIlZvdXMgbidhbGxleiBwYXMgYWJhbmRvbm5lciBjb21tZSDDp2EhIFNpIG5vdXMgcGFydG9ucyBlbnNlbWJsZSwgbm91cyBwb3Vycm9ucyBmb3JtZXIgdW5lIGF1dHJlIHNvY2nDqXTDqSwgb8O5IG5vdXMgbidhdXJvbnMgcGFzIGJlc29pbiBkZSBjb21wcm9taXMuIE/DuSBub3VzIG4nYXVyb25zIHBsdXMgYmVzb2luIGRlcyBodW1haW5zLiBOZSB0cm91dmV6LXZvdXMgcGFzIMOnYSBiZWF1P1wiXG5cbkwnYXNzZW1ibMOpZSByZXN0YSBzaWxlbmNpZXVzZS5cblxuTXJhIHRlcm1pbmE6IFwiQmFuZGUgZGUgbMOiY2hlcy4gTCdhdWJlIGVzdCBsw6AuIElsIGVzdCB0ZW1wcyBkZSBmYWlyZSB1biBjaG9peDsgcXVpIG1lIHNvdXRpZW50IG1lIHN1aXZlLlwiXG5cblN1ciBjZSwgZWxsZSBzZSBsZXZhLCBhbGxhIMOgIGwnZXNjYWxpZXIgZXQgZGVzY2VuZGl0IGR1IHRvaXQuIEVsbGUgZnV0IHN1aXZpZSBwYXIgdW5lIHBvaWduw6llIGRlIGNoYXRzLiBMZSByZXN0ZSByZWdhcmRhIGxhIGZlbW1lLCBxdWkgcGFybGE6XG5cblwiVm90cmUgZnV0dXIgZXN0IGVudHJlIHZvcyBtYWlucywgbWFpbnRlbmFudC4gSWwgZXN0IHRlbXBzIGRlIHJlbnRyZXIuXCJcblxuVW4gY2hhdCBzZSBsZXZhIGV0IHBhcnRpdC4gUHVpcyB1biBhdXRyZSwgZXQgZW5jb3JlIHVuIGF1dHJlLiBBcHLDqHMgdW4gbW9tZW50LCBpbCBuZSByZXN0YSBxdWUgbGEgZmVtbWUgZXQgTHVja3kgc3VyIGxlIHRvaXQuXG5cblwiRXQgdG9pLCBMdWNreSwgdHUgbmUgcmVudHJlcyBwYXMgY2hleiB0b2k/XCJcblxuXCJKZSBuJ29zZSBwYXMuIEonYWkgcGV1ciBkZSBjb21tZW50IGlscyBtJ2FjY3VlaWxsZXJvbnQuXCJcblxuXCJOZSB0J2lucXVpw6h0ZSBwYXMsIHN1aXMtbW9pLlwiXG5cbkV0IGlscyB5IGFsbMOocmVudCBlbnNlbWJsZSwgc291cyBsZSBzb2xlaWwgbGV2YW50LiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOlsiYXBwYXJ0ZW1lbnQiXSwidW5zZXQiOlsidG9pdHMiXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImVwaWxvZ3VlIn1dfSwiYWxsZWVNYWdhc2lucyI6eyJwdWJsaWNOYW1lIjoiVW5lIGFsbMOpZSBwbGVpbmUgZGUgbWFnYXNpbnMiLCJkZXNjcmlwdGlvbiI6IkwnYWxsw6llIMOpdGFpdCB1biBlbmRyb2l0IGF1IGJvcmQgZGUgbGEgdmlsbGUgb8O5IGwnb24gcG91dmFpdCB0cm91dmVyIGRlIHRvdXQuIFbDqnRlbWVudHMsIG5vdXJyaXR1cmUsIGV0Yy4gw4AgbCdoZXVyZSBvw7kgaWxzIHBhc3NhaWVudCwgdG91dCDDqXRhaXQgZmVybcOpLiBEZSBsJ2FnaXRhdGlvbiBkaXVybmUsIGlsIG5lIHJlc3RhaXQgcXVlIGRlcyB2aXRyaW5lcyBub2lyZXMgZXQgdmlkZXMuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlJlZ2FyZGVyIGxhIHZpdHJpbmUgZCd1bmUgYW5pbWFsZXJpZSIsImRlc2NyaXB0aW9uIjoiTCdlbmRyb2l0IG/DuSBsZXMgYW5pbWF1eCDDqXRhaWVudCB2ZW5kdXMuIiwiYm9keSI6Ik3Dqm1lIHNpIHRvdXRlcyBsZXMgbHVtacOocmVzIMOpdGFpZW50IMOpdGVpbnRlcywgb24gcG91dmFpdCB2b2lyIHF1ZSBsZSBqb3VyLCBsJ2VuZHJvaXQgw6l0YWl0IGx1bWluZXV4IGV0IGNvbG9yw6k6XG5cblBFVFogJ04gRlVOWlxuQU5JTUFMRVJJRVxuQ0hBVFMgLiBDSElFTlMgLiBIQU1TVEVSU1xuQU5JTUFVWCBFWE9USVFVRVMgw4AgUFJJWCBJTkNPTVBBUkFCTEVTIVxuXG5MdWNreSByZWdhcmRhIGxhIHZpdHJpbmU6XG5cblwiSmUgbmUgdmllbnMgcGFzIGQndW5lIGFuaW1hbGVyaWUuIEonYWkgw6l0w6kgYWRvcHTDqSBkZXB1aXMgdW4gcmVmdWdlLiBKJ2FpIHVuIHZhZ3VlIHNvdXZlbmlyIGRlIG1hIG3DqHJlLlwiXG5cblBlbmRhbnQgdW4gbW9tZW50LCBsYSBmZW1tZSBwZW5zYSBhdXggZmFtaWxsZXMgam95ZXVzZXMgcXVpIHZlbmFpZW50IGzDoCBhZG9wdGVyIHVuIG5vdXZlYXUgbWVtYnJlLCBjaGFxdWUgam91ci4gQ2UgbmUgZGV2YWl0IHBhcyDDqnRyZSBkcsO0bGUsIGRlIHNlIGZhaXJlIHZlbmRyZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UxIl0sIm5vIjpbInJhaXNvblBhcnRpckFuaW1hbGVyaWUiXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOlsicmFpc29uUGFydGlyQW5pbWFsZXJpZSJdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJhbGxlZU1hZ2FzaW5zIn0seyJwdWJsaWNOYW1lIjoiUmV0b3VybmVyIHZlcnMgbGEgZ3JhbmRlIHJvdXRlIiwiZGVzY3JpcHRpb24iOiJJbCB5IGF2YWl0IHBsdXMgZGUgY2hvc2VzIMOgIHZvaXIgbMOgLWJhcy4iLCJib2R5IjoiRGFucyBsYSBudWl0IHNpbGVuY2lldXNlLCBpbHMgcmV0cmFjw6hyZW50IGxldXIgY2hlbWluIGp1c3F1J8OgIGxhIGdyYW5kZSByb3V0ZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiZ3JhbmRlUm91dGUifV19LCJjaGFwaXRyZTMiOnsicHVibGljTmFtZSI6IkNoYXBpdHJlIDM6IExlcyB5ZXV4IGRlIGxhIHZpbGxlIiwiZGVzY3JpcHRpb24iOiJNcmEgYXZhaXQgdW5lIHByb3Bvc2l0aW9uLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJcIlZhLXQtZW4uXCIiLCJkZXNjcmlwdGlvbiI6IlwiVHUgbidhcyByaWVuICDDoCBmYWlyZSBpY2kuXCIiLCJib2R5IjoiXCJKZSBuZSBzYWlzIHBhcyBjZSBxdWUgTHVja3kgZXNww6lyYWl0IGVuIGFsbGFudCB0ZSBjaGVyY2hlci4gVHUgbidhcyBqYW1haXMgdsOpY3UgY29tbWUgbm91cy4gVHUgbidhcyBwYXMgdnUgw6AgdHJhdmVycyBub3MgeWV1eC4gUXUnYXMtdHUgbCdvcmd1ZWlsIGRlIGNyb2lyZSBwb3V2b2lyIG5vdXMgZGlyZT8gVHUgbidhcyBtw6ptZSBwYXMgcXVhdHJlIHBhdHRlcyBwb3VyIGJvbmRpciFcblxuRWxsZSBjb250aW51YTogXCJKZSB0ZSBsYWlzc2UgY2UgbW9tZW50IHBvdXIgcGFydGlyLCBldCBxdWUgdHUgZW1tw6huZXMgTHVja3kgYXZlYyB0b2kuIFZvdXMgZGV1eCBmZXJpZXogYmllbiBkZSBsZSBwcmVuZHJlLlwiXG5cbkxhIGZlbW1lIHJlY3VsYSBkZSBxdWVscXVlcyBwYXMuIEx1Y2t5IGpldGEgdW4gcmVnYXJkIMOgIE1yYSBldCBzZSBkaXJpZ2VhIHZlcnMgbCdlc2NhbGllciBkZSBzZWNvdXJzLlxuXG5cIlZpZW5zLCBodW1haW5lLlwiXG5cbkxhIGZlbW1lIGV0IEx1Y2t5IGRlc2NlbmRpcmVudC5cblxuTGEgZmVtbWUgZGVtYW5kYTogXCJEb25jIGMnZXN0IGZpbmk/XCJcblxuTHVja3kgc2UgdG91cm5hIHZlcnMgZWxsZSBldCBkaXQ6IFwiQWJzb2x1bWVudCBwYXMuXCJcblxuXCJDb21tZW50IMOnYT9cIlxuXG5cIkonYWkgZmFpdCB1bmUgZXJyZXVyLCBodW1haW5lLiBKZSBtZSBzdWlzIHRyb3AgcHLDqWNpcGl0w6kuIE9uIHZhIHLDqWVzc2F5ZXIuXCJcblxuXCJSw6llc3NheWVyPyBFdCBxdSdlc3DDqHJlcy10dT8gTWUgZmFpcmUgZGV2ZW5pciB1biBjaGF0IHBvdXIgbGVzIGNvbnZhaW5jcmU/XCJcblxuXCJQbHVzIG91IG1vaW5zLlwiXG5cblwiLi4uP1wiXG5cblwiQWxsb25zIG1hcmNoZXIgZGFucyBsYSB2aWxsZS4gSmUgdmV1eCB0ZSBmYWlyZSBjb21wcmVuZHJlIHBvdXJxdW9pIGxlcyBhdXRyZXMgdmV1bGVudCBwYXJ0aXIuIEplIHBlbnNlIHF1ZSBzaSBvbiB0cm91dmUgdHJvaXMgcmFpc29ucywgw6dhIHNlcmEgYXNzZXogcG91ciB0ZSBmYWlyZSBjb21wcmVuZHJlIGxlIG1lc3NhZ2UuXCJcblxuTGEgZmVtbWUgcsOpZmzDqWNoaXQgw6AgY2UgY2hhbmdlbWVudCBkZSBwbGFuLiBFbGxlIHZvdWxhaXQgcXVlIGxlcyBjaGF0cyByZXN0ZW50LlxuXG5cIkQnYWNjb3JkLiBFc3NheW9ucyDDp2EuXCIiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbInBoYXNlMSIsInJ1ZXMiXSwidW5zZXQiOlsidG9pdHMiXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZWxsZU91YmxpZWUifV19LCJjaGF0cyI6eyJwdWJsaWNOYW1lIjoiTGUgcmFzc2VtYmxlbWVudCBkZXMgY2hhdHMuIiwiZGVzY3JpcHRpb24iOiJFbiBhdHRlbnRlIGRlIGxldXIgZXhvZGUsIGxlcyBjaGF0cyDDqXRhaWVudCByw6l1bmlzIHN1ciBsZSB0b2l0IGRlIGwnaW1tZXVibGUuIENlcnRhaW5zIMOpdGFpZW50IGNvdWNow6lzLCBjZXJ0YWlucyBzZSBuZXR0b3lhaWVudCwgY2VydGFpbnMgbWFyY2hhaWVudCBuZXJ2ZXVzZW1lbnQuIE1yYSBwYXNzYWl0IGRhbnMgbGEgZm91bGUgcG91ciBzdXJ2ZWlsbGVyLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJMJ2F1YmUgcG9pZ25haXQiLCJkZXNjcmlwdGlvbiI6IkwnaG9yaXpvbiBzJ8OpY2xhaXJjaXNzYWl0LiBMZXMgY2hhdHMgYWxsYWllbnQgcGFydGlyLiBJbCBmYWxsYWl0IHZpdGUgbGV1ciBleHBvc2VyIGxlcyByYWlzb25zIGRlIHJlc3Rlci4iLCJib2R5IjoiTGVzIGRldXggY291cnVyZW50IGF1IG1pbGlldSBkdSB0b2l0OlxuXG5cIsOJY291dGV6LW5vdXMhIE5vdXMgYXZvbnMgcXVlbHF1ZSBjaG9zZSBkJ2ltcG9ydGFudCDDoCBkaXJlIVwiXG5cbkxlIHNpbGVuY2UgdG9tYmEuIE1yYSBmZXVsYTogXCJRdWUgZmFpdGVzLXZvdXMgaWNpPyBKZSB2b3VzIGFpIGRpdCBkZSBwYXJ0aXIhXCJcblxuQXZhbnQgcXUnZWxsZSBwdWlzc2UgY29udGludWVyLCBsYSBmZW1tZSBsYSBjb3VwYTogXCJOb3VzIHZlbm9ucyB2b3VzIGV4cGxpcXVlciDDoCB0b3VzIHBvdXJxdW9pIHZvdXMgZGV2cmlleiByZXN0ZXIuXCIiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UyIiwicmFpc29uUmVzdGVyQW1vdXIiLCJyYWlzb25SZXN0ZXJMdWNreSIsInJhaXNvblJlc3Rlck5vdXJyaXR1cmUiXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbInBoYXNlMiJdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicmFpc29uc0RlUmVzdGVyMSJ9LHsicHVibGljTmFtZSI6IlNlIHJhcHBlbGVyIiwiZGVzY3JpcHRpb24iOiJRdSdhbGxhaXQtb24gY2hlcmNoZXI/IiwiYm9keSI6IkMnZXN0IHZyYWkuIElscyBhbGxhaWVudCBkYW5zIGxhIGdyYW5kZSBydWUgY2hlcmNoZXIgbGVzIGFmZmljaGVzLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6WyJwaGFzZTMiXSwibm8iOlsiYWZmaWNoZXNQcmlzZXMiXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJjaGF0cyJ9LHsicHVibGljTmFtZSI6Ik1vbnRyZXIgbGVzIGFmZmljaGVzIiwiZGVzY3JpcHRpb24iOiJDJ8OpdGFpdCBsZSBncmFuZCBtb21lbnQuIiwiYm9keSI6IkxhIGZlbW1lIGV0IEx1Y2t5IGFycml2w6hyZW50IGVuIGNvdXJhbnQgYXUgbWlsaWV1IGRlIGxhIGZvdWxlLCBsYSBmZW1tZSB0ZW5hbnQgbGVzIGFmZmljaGVzIGRhbnMgc2VzIG1haW5zLiBMZXMgY2hhdHMgcmVnYXJkYWllbnQgbGVzIGFmZmljaGVzIGQndW4gYWlyIGN1cmlldXguIExhIGZlbW1lIGNvbW1lbsOnYSDDoCBsaXJlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6WyJwaGFzZTMiLCJhZmZpY2hlc1ByaXNlcyJdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOlsicGhhc2UzIl0sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJhZmZpY2hlczEifSx7InB1YmxpY05hbWUiOiJEZXNjZW5kcmUgZGFucyBsYSBydWUiLCJkZXNjcmlwdGlvbiI6IklsIGZhbGxhaXQgeSBhbGxlci4iLCJib2R5IjoiTGEgZmVtbWUgZGVzY2VuZGl0LCBzdWl2aWUgZGUgTHVja3kuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6WyJydWVzIl0sInVuc2V0IjpbInRvaXRzIl0sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJydWVsbGVPdWJsaWVlIn1dfSwiY3VsRGVTYWMiOnsicHVibGljTmFtZSI6IlVuIGN1bCBkZSBzYWMiLCJkZXNjcmlwdGlvbiI6IkMnw6l0YWl0IGxlIGJvdXQgZGUgbGEgcnVlLiBJbCB5IGF2YWl0LCBzZXJyw6llIGVudHJlIHRyb2lzIG11cnMgZGUgYnJpcXVlIGTDqWNyw6lwaXRlLCB1bmUgYmVubmUgw6Agb3JkdXJlcy4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiVW4gZMOpY2hldCBzcMOpY2lhbCIsImRlc2NyaXB0aW9uIjoiTCdlbnNlbWJsZSDDqXRhaXQgbmF1c8OpYWJvbmQsIG1haXMgdW4gZMOpY2hldCBhdHRpcmFpdCBsJ2F0dGVudGlvbiBkZSBMdWNreS4uLiIsImJvZHkiOiJOZSB2b3VsYW50IHBhcyBzJ2FwcHJvY2hlciBwbHVzLCBMdWNreSByZWdhcmRhIGp1c3RlIHRyw6hzIGludGVuc8OpbWVudCBsZSBzYWMgcG9zw6kgY29udHJlIGxhIGJlbm5lLiBMJ2ludGVudGlvbiDDqXRhaXQgY2xhaXJlLiBMYSBmZW1tZSBwcml0IGxlIGdyb3Mgc2FjIGRlIG5vdXJyaXR1cmUgcG91ciBjaGF0cyBldCBsJ2FtZW5hIHZlcnMgTHVja3kuIExlIHNhYyDDqXRhaXQgZMOpasOgIG91dmVydC4gRCd1bmUgcHJlc3Npb24sIGxlIGNoYXQgbGUgZml0IGJhc2N1bGVyIGV0IGNvbW1lbsOnYSDDoCBzZSBkw6lsZWN0ZXIgZGVzIGNyb3F1ZXR0ZXMgcsOpcGFuZHVlcyBhdSBzb2wuXG5cbkxhIGZlbW1lIHNvdXJpdDogXCJQYXMgYmVzb2luIGQndW5lIHZvaXggcG91ciBjb21tdW5pcXVlciwgZGVzIGZvaXMsIGhlaW4/XCJcblxuTHVja3kgcsOpcG9uZGl0IHNhbnMgbGV2ZXIgbGVzIHlldXggZGUgc29uIHBsYXQ6IFwiQ2Ugbidlc3QgcGFzIG1hbCBkZSBzZSBmYWlyZSBub3VycmlyLCBkZXMgZm9pcy4gSidhaSB1biBzb3V2ZW5pciB0ZW5kcmUgZGUgbGEgcMOidMOpZSBxdWUgbWUgZG9ubmFpdCBtb24gbWHDrnRyZS4gTcOqbWUgc2kgYydlc3QgbW9pbnMgZXhjaXRhbnQgcXVlIGRlIGNoYXNzZXIsIGMnw6l0YWl0IHLDqWNvbmZvcnRhbnQgZGUgc2F2b2lyIHF1ZSBtw6ptZSBzaSBsYSBqb3VybsOpZSBhdmFpdCDDqXTDqSBjcmV1c2UsIGlsIHkgYXZhaXQgZGUgcXVvaSBtYW5nZXIgZW4gcmVudHJhbnQgY2hleiBzb2kuIEplIG5lIHBlbnNlIHBhcyDDqnRyZSBsZSBzZXVsIGNoYXQgw6AgcXVpIMOnYSBtYW5xdWUuXCIiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UyIl0sIm5vIjpbInJhaXNvblJlc3Rlck5vdXJyaXR1cmUiXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOlsicmFpc29uUmVzdGVyTm91cnJpdHVyZSJdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJjdWxEZVNhYyJ9LHsicHVibGljTmFtZSI6IlJldG91cm5lciBkYW5zIGxhIHJ1ZSBncmlzZSIsImRlc2NyaXB0aW9uIjoiSWwgeSBhdXJhaXQgcGx1cyBkZSBjaG9zZXMgw6Agdm9pciBsw6AtYmFzLiIsImJvZHkiOiJMYSBmZW1tZSByZXRvdXJuYSBkYW5zIGxhIHJ1ZSBncmlzZSwgcmVqb2lnbmFudCBMdWNreSBxdWkgdm91bGFpdCBzJ8OpbG9pZ25lciBsZSBwbHVzIHZpdGUgcG9zc2libGUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZUdyaXNlIn1dfSwiZ3JhbmRlUm91dGUiOnsicHVibGljTmFtZSI6IkxhIGdyYW5kZSByb3V0ZSIsImRlc2NyaXB0aW9uIjoiTGEgcm91dGUgY291cGFpdCBsYSBncmFuZGUgcnVlIHBvdXIgc2UgZGlyaWdlciBhdSBsb2luLiBVbiBlbWJyYW5jaGVtZW50IGFsbGFpdCB2ZXJzIHVuZSBhbGzDqWUgYm9yZMOpZSBkZSBtYWdhc2lucy4gRGFucyBsJ2F1dHJlIGRpcmVjdGlvbiwgTGEgcm91dGUgbWVuYWl0IMOgIHVuIHF1YXJ0aWVyIHLDqXNpZGVudGllbC4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiQWxsZXIgZGFucyBsZSBxdWFydGllciByw6lzaWRlbnRpZWwiLCJkZXNjcmlwdGlvbiI6IkMnw6l0YWl0IHVuIHF1YXJ0aWVyIG1vZGVybmUsIGNvbnN0cnVpdCBpbCB5IHF1ZWxxdWVzIGFubsOpZXMuIiwiYm9keSI6IklscyBtb250w6hyZW50IGxhIHJvdXRlIGV0IGFycml2w6hyZW50IHN1ciB1bmUgcGxhY2Ugw6ljbGFpcsOpZSBwYXIgZGVzIGxhbXBlcyBhdXggY291bGV1cnMgY2hhdWRlcy4gTGUgcXVhcnRpZXIgw6l0YWl0IHRyw6hzIHZhc3RlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJxdWFydGllclNwYWNpZXV4In0seyJwdWJsaWNOYW1lIjoiQWxsZXIgZGFucyBsJ2FsbMOpZSBhdXggbWFnYXNpbnMiLCJkZXNjcmlwdGlvbiI6IkJvcmTDqWUgZGUgYm91dGlxdWVzIGVuIHRvdXMgZ2VucmVzLiIsImJvZHkiOiJJbHMgdHJhdmVyc8OocmVudCBlbiB2aXRlc3NlIGxhIHJvdXRlIHZpZGUsIGV0IGFycml2w6hyZW50IGp1c3F1J8OgIGwnYWxsw6llLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJhbGxlZU1hZ2FzaW5zIn0seyJwdWJsaWNOYW1lIjoiQWxsZXIgZGFucyBsYSBncmFuZGUgcnVlIiwiZGVzY3JpcHRpb24iOiJWZXJzIGxlcyBsYW1wYWRhaXJlcy4iLCJib2R5IjoiSWxzIHJldG91cm7DqHJlbnQgw6AgbGEgZ3JhbmRlIHJ1ZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiZ3JhbmRlUnVlMyJ9XX0sImdyYW5kZVJ1ZTEiOnsicHVibGljTmFtZSI6IkxhIGdyYW5kZSBydWUiLCJkZXNjcmlwdGlvbiI6IkxhIGdyYW5kZSBydWUgw6l0YWl0IGF1c3NpIHZpZGUgZXQgaW1tb2JpbGUgcXUnYXZhbnQuIFVuIGtpb3NxdWUgZmVybcOpIHNlIHRyb3V2YWl0IGF1IGJvcmQgZGUgbGEgcnVlLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJBbGxlciB2b2lyIGxlIGtpb3NxdWUiLCJkZXNjcmlwdGlvbiI6IklsIMOpdGFpdCBmZXJtw6kgZGVwdWlzIGRlcyBoZXVyZXMsIGJpZW4gc8O7ci4gUXVlbHF1J3VuIGF2YWl0IG91Ymxpw6kgdW5lIGFmZmljaGUgZHUgam91cm5hbCBkdSBqb3VyIHN1ciB1biBkZXMgcGFubmVhdXguIiwiYm9keSI6IkwnYWZmaWNoZSDDqXRhaXQgY2VsbGUgZCd1biBqb3VybmFsIGRvbnQgbGEgdW5lIHLDqXbDqWxhaXQgY2UgZG9udCB0b3VzIHMnaW5xdWnDqXRhaWVudC4gSWxzIG5lIHNhdmFpZW50IHBhcyDDoCBxdWVsIHBvaW50IGlscyDDqXRhaWVudCBsb2luIGR1IGNvbXB0ZS5cblxuXG5RVUkgRVNUIExFIFZPTEVVUiBERSBDSEFUU1xuTm9zIHBpc3RlcyBzdXIgbCdhZmZhaXJlIGRlcyBkaXNwYXJpdGlvbnMgcsOpY2VudGVzXG5cbnAuIDM6IFN0YXRpc3RpcXVlczogOTAgcG91cmNlbnRzIGRlcyBjaGF0cyBkaXNwYXJ1cyBkYW5zIGxhIFZpbGxlP1xuXG5wLjY6IFVuIHTDqW1vaWduYWdlOiBcIk5vdXMgZ2FyZG9ucyBsZSBuw7R0cmUgYXZlYyBub3VzIGVuIHRvdXQgdGVtcHMsIG9uIGEgdGVsbGVtZW50IHBldXIgcXUnaWwgZGlzcGFyYWlzc2VcIlxuXG5MdWNreSByZWdhcmRhIGwnYWZmaWNoZSBkJ3VuIGFpciBlbm51ecOpLCBwdWlzIHBhcnRpdCBzYW5zIGZhaXJlIGRlIGNvbW1lbnRhaXJlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJncmFuZGVSdWUxIn0seyJwdWJsaWNOYW1lIjoiQWxsZXIgZGFucyB1bmUgcnVlIHRvcnR1ZXVzZSIsImRlc2NyaXB0aW9uIjoiTGEgcnVlIHBhcnRhaXQgdmVycyBsYSBkcm9pdGUgZW4gc3VpdmFudCB1bmUgZm9ybWUgw6l0cmFuZ2UuIiwiYm9keSI6IklscyBzJ2VuZ2Fnw6hyZW50IGRhbnMgbGEgcnVlIHRvcnR1ZXVzZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicnVlVG9ydHVldXNlIn0seyJwdWJsaWNOYW1lIjoiUmV0b3VybmVyIGRhbnMgbGEgcnVlIGdyaXNlIiwiZGVzY3JpcHRpb24iOiJJbCDDqXRhaXQgdGVtcHMgZGUgcmV2ZW5pciB2ZXJzIGxlcyBjaGF0cy4iLCJib2R5IjoiSWxzIHByaXJlbnQgbGEgZ3JhbmRlIHJ1ZSBncmlzZSBxdWkgcGFydGFpdCDDoCBnYXVjaGUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZUdyaXNlIn0seyJwdWJsaWNOYW1lIjoiQWxsZXIgcGx1cyBsb2luIGRhbnMgbGEgcnVlIiwiZGVzY3JpcHRpb24iOiJMZSB2ZW50IHNvdWZmbGFpdC4iLCJib2R5IjoiTGEgcnVlIMOpdGFpdCBib3Jkw6llIGRlIGxhbXBhZGFpcmVzIHF1aSBqZXRhaWVudCB1bmUgbHVtacOocmUgYmxhZmFyZGUgc3VyIGxlcyBwYXbDqXMgZXQgbGVzIGZlbsOqdHJlcyBmZXJtw6llcy4gw4AgdW4gZGUgY2VzIGxhbXBhZGFpcmVzIMOpdGFpdCBhY2Nyb2Now6llIHVuZSBhZmZpY2hlIHF1ZSBsZSB2ZW50IHNlY291YWl0LiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJncmFuZGVSdWUyIn1dfSwiZ3JhbmRlUnVlMiI6eyJwdWJsaWNOYW1lIjoiUGx1cyBsb2luIGRhbnMgbGEgZ3JhbmRlIHJ1ZSIsImRlc2NyaXB0aW9uIjoiTGEgcnVlIMOpdGFpdCDDqWNsYWlyw6llIHBhciBsYSBsdW1pw6hyZSBibGFmYXJkZSBkZXMgbGFtcGFkYWlyZXMgc3VyIHNlcyBjw7R0w6lzLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJSZWdhcmRlciDDoCB0cmF2ZXJzIGxhIGZlbsOqdHJlIGQndW5lIG1haXNvbi4iLCJkZXNjcmlwdGlvbiI6IkRhbnMgdW5lIG1haXNvbiDDoCBnYXVjaGUsIGxlcyByaWRlYXV4IMOpdGFpZW50IG91dmVydHMuIE9uIHBvdXZhaXQgdm9pciB2b2lyIGNlIHF1aSBzZSBwYXNzYWl0IHBhciBsYSBmZW7DqnRyZS4iLCJib2R5IjoiVW4gY291cGxlIMOpdGFpdCBhc3NpcyBkZXZhbnQgbGEgdMOpbMOpdmlzaW9uLiBFbiBkZXNzb3VzIGRlIGwnw6ljcmFuLCB1bmUgY2FnZSBkZSB2b3lhZ2Ugw6l0YWl0IHBvc8OpZS4gRGVwdWlzIGxhIGdyaWxsZSBkZSBjZXR0ZSBjYWdlLCBsZSBwZXRpdCB2aXNhZ2UgZCd1biBjaGF0b24gcmVnYXJkYWl0IHBpdG95YWJsZW1lbnQgTHVja3kgZXQgbGEgZmVtbWUgcGFyIGxhIGZlbsOqdHJlLlxuXG5cIklscyBsZSBnYXJkZW50IGF1cHLDqHMgZCdldXggcG91ciBuZSBwYXMgbGUgcGVyZHJlLCBkaXQgTHVja3kuIFF1YW5kIE1yYSBhIGNvbW1lbmPDqSDDoCByYXNzZW1ibGVyIGxlcyBjaGF0cywgZXQgcXVlIGxlcyBodW1haW5zIG9udCBjb21tZW5jw6kgw6AgcmVtYXJxdWVyLCBjZXJ0YWlucyBvbnQsIGNvbW1lIGNldXgtY2ksIGVuZmVybcOpIGxlIGxldXIgcG91ciBxdSdpbCBuZSBkaXNwYXJhaXNzZSBwYXMuIE9uIGFwcGVsbGUgbGVzIGNoYXRzIHF1aSBvbnQgdsOpY3Ugw6dhIGxlcyAncGnDqWfDqXMnLiBDZXJ0YWlucyBvbnQgcHUgcyfDqWNoYXBwZXIuIEQnYXV0cmVzIHBhcy5cIlxuXG5MdWNreSBtYXJxdWEgdW5lIHBhdXNlLiBJbCByZWdhcmRhIGxhIGNhZ2UuXG5cblwiQ2UgbifDqXRhaXQgZMOpasOgIHBhcyBhZ3LDqWFibGUgYXZhbnQgcXVlIGxlcyBodW1haW5zIHByZW5uZW50IHBldXIuXCJcblxuSWwgamV0YSB1biBkZXJuaWVyIHJlZ2FyZCB0cmlzdGUgdmVycyBsZSBjaGF0b24sIHB1aXMgc2UgcmV0b3VybmEgdmVycyBsYSBydWUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbInBoYXNlMSJdLCJubyI6WyJyYWlzb25QYXJ0aXJNYWlzb24iXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOlsicmFpc29uUGFydGlyTWFpc29uIl0sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImdyYW5kZVJ1ZTIifSx7InB1YmxpY05hbWUiOiJQcmVuZHJlIHRvdXRlcyBsZXMgYWZmaWNoZXMgZGUgbGEgcnVlIiwiZGVzY3JpcHRpb24iOiJJbHMgbidhdmFpZW50IHF1J8OgIHByZW5kcmUgbGVzIGFmZmljaGVzLCBwdWlzIGlscyBwb3VycmFpZW50IHJldmVuaXIgdmVycyBsZXMgY2hhdHMgcG91ciBsZXMgbW9udHJlci4iLCJib2R5IjoiTGEgZmVtbWUgYXJyYWNoYSB0b3V0ZXMgbGVzIGFmZmljaGVzLCBvYnNlcnbDqWUgcGFyIEx1Y2t5LCBpbXBhdGllbnQuXG5cblVuZSBmb2lzIGlscyBhZmZpY2hlcyBhcnJhY2jDqWVzLCBlbGxlIHNlIHJldHJvdXZhIGF2ZWMgdW5lIHBpbGUgZGUgZmV1aWxsZXMgZGFucyBsZXMgbWFpbnMuIElscyBwb3V2YWllbnQgcmV2ZW5pciB2ZXJzIGxlcyBjaGF0cywgbWFpbnRlbmFudC4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UzIl0sIm5vIjpbImFmZmljaGVzUHJpc2VzIl19LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbImFmZmljaGVzUHJpc2VzIl0sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImdyYW5kZVJ1ZTIifSx7InB1YmxpY05hbWUiOiJBbGxlciBsaXJlIGwnYWZmaWNoZSBzdXIgbGUgbGFtcGFkYWlyZSIsImRlc2NyaXB0aW9uIjoiVW4gZGVzIGRldXggbW9yY2VhdXggZGUgcnViYW4gYWRow6lzaWYgcXVpIGxhIG1haW50ZW5haXQgcyfDqXRhbnQgY2Fzc8OpLCBlbGxlIGZsb3R0YWl0IGRhbnMgbGUgbMOpZ2VyIHZlbnQgZHUgc29pci4iLCJib2R5IjoiTWFsbWVuw6llIHBhciBsZXMgw6lsw6ltZW50cywgbCdhZmZpY2hlIGRpc2FpdDpcblxuQVZFWi1WT1VTIFZVIENFIENIQVRcblZVIFBPVVIgTEEgREVSTknDiFJFIEZPSVMgQ0hFWi1cbklMIFMnQVBQRUxMRSBDQVJBTS1cbkNPTlRBQ1RFWiBSLVxuXG5VbmUgcGhvdG8gZMOpbGF2w6llIGZpZ3VyYWl0IGVuIGhhdXQ7IGVsbGUgYXZhaXQgZMOpdGVpbnQgc3VyIGxlIHRleHRlLCByZW5kYW50IHVuZSBwYXJ0aWUgaWxsaXNpYmxlLlxuXG5MdWNreSB2aXQgcXVlIGxhIGZlbW1lIHJlZ2FyZGFpdCBsJ2FmZmljaGUgZXQgZGl0OiBcIkplIG5lIGNvbXByZW5kcyBwYXMgY2UgcXVlIHZvdXMsIGxlcyBodW1haW5zLCB2b3VzIGF2ZXogw6AgZml4ZXIgZGVzIGZldWlsbGVzIGRlIGxpdnJlIHBhcnRvdXQuIFZvdXMgYXZleiB1biBzZW5zIGJpemFycmUgZGUgbGEgZMOpY29yYXRpb24uXCJcblxuTGEgZmVtbWUgaGF1c3NhIHVuIHNvdXJjaWwgw6AgY2V0dGUgcmVtYXJxdWUsIG1haXMgbmUgcmVsZXZhIHBhcy4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UxIl0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6dHJ1ZSwibmV4dCI6ImdyYW5kZVJ1ZTIifSx7InB1YmxpY05hbWUiOiJBbGxlciBsaXJlIGwnYWZmaWNoZSBzdXIgbGUgbGFtcGFkYWlyZSIsImRlc2NyaXB0aW9uIjoiVW4gZGVzIGRldXggbW9yY2VhdXggZGUgcnViYW4gYWRow6lzaWYgcXVpIGxhIG1haW50ZW5haXQgcyfDqXRhbnQgY2Fzc8OpLCBlbGxlIGZsb3R0YWl0IGRhbnMgbGUgbMOpZ2VyIHZlbnQgZHUgc29pci4iLCJib2R5IjoiTWFsbWVuw6llIHBhciBsZXMgw6lsw6ltZW50cywgbCdhZmZpY2hlIGRpc2FpdDpcblxuQVZFWi1WT1VTIFZVIENFIENIQVRcblZVIFBPVVIgTEEgREVSTknDiFJFIEZPSVMgQ0hFWi1cbklMIFMnQVBQRUxMRSBDQVJBTS1cbkNPTlRBQ1RFWiBSLVxuXG5VbmUgcGhvdG8gZMOpbGF2w6llIGZpZ3VyYWl0IGVuIGhhdXQ7IGVsbGUgYXZhaXQgZMOpdGVpbnQgc3VyIGxlIHRleHRlLCByZW5kYW50IHVuZSBwYXJ0aWUgaWxsaXNpYmxlLlxuXG5MdWNreSB2aXQgcXVlIGxhIGZlbW1lIHJlZ2FyZGFpdCBsJ2FmZmljaGUgZXQgZGl0OiBcIkplIG5lIGNvbXByZW5kcyBwYXMgY2UgcXVlIHZvdXMsIGxlcyBodW1haW5zLCB2b3VzIGF2ZXogw6AgZml4ZXIgZGVzIGZldWlsbGVzIGRlIGxpdnJlIHBhcnRvdXQuIFZvdXMgYXZleiB1biBzZW5zIGJpemFycmUgZGUgbGEgZMOpY29yYXRpb24uXCJcblxuTGEgZmVtbWUgaGF1c3NhIHVuIHNvdXJjaWwgw6AgY2V0dGUgcmVtYXJxdWUsIG1haXMgbmUgcmVsZXZhIHBhcy4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UyIl0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6dHJ1ZSwibmV4dCI6ImdyYW5kZVJ1ZTIifSx7InB1YmxpY05hbWUiOiJBbGxlciBsaXJlIGwnYWZmaWNoZSBzdXIgbGUgbGFtcGFkYWlyZSIsImRlc2NyaXB0aW9uIjoiVW4gZGVzIGRldXggbW9yY2VhdXggZGUgcnViYW4gYWRow6lzaWYgcXVpIGxhIG1haW50ZW5haXQgcyfDqXRhbnQgY2Fzc8OpLCBlbGxlIGZsb3R0YWl0IGRhbnMgbGUgbMOpZ2VyIHZlbnQgZHUgc29pci4iLCJib2R5IjoiTWFsbWVuw6llIHBhciBsZXMgw6lsw6ltZW50cywgbCdhZmZpY2hlIGRpc2FpdDpcblxuQVZFWi1WT1VTIFZVIENFIENIQVRcblZVIFBPVVIgTEEgREVSTknDiFJFIEZPSVMgQ0hFWi1cbklMIFMnQVBQRUxMRSBDQVJBTS1cbkNPTlRBQ1RFWiBSLVxuXG5VbmUgcGhvdG8gZMOpbGF2w6llIGZpZ3VyYWl0IGVuIGhhdXQ7IGVsbGUgYXZhaXQgZMOpdGVpbnQgc3VyIGxlIHRleHRlLCByZW5kYW50IHVuZSBwYXJ0aWUgaWxsaXNpYmxlLlxuXG5MdWNreSB2aXQgcXVlIGxhIGZlbW1lIHJlZ2FyZGFpdCBsJ2FmZmljaGUgZXQgZGl0OiBcIkplIG5lIGNvbXByZW5kcyBwYXMgY2UgcXVlIHZvdXMsIGxlcyBodW1haW5zLCB2b3VzIGF2ZXogw6AgZml4ZXIgZGVzIGZldWlsbGVzIGRlIGxpdnJlIHBhcnRvdXQuIFZvdXMgYXZleiB1biBzZW5zIGJpemFycmUgZGUgbGEgZMOpY29yYXRpb24uXCJcblxuTGEgZmVtbWUgaGF1c3NhIHVuIHNvdXJjaWwgw6AgY2V0dGUgcmVtYXJxdWUsIG1haXMgbmUgcmVsZXZhIHBhcy4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UzIl0sIm5vIjpbImFmZmljaGVzUHJpc2VzIl19LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOnRydWUsIm5leHQiOiJncmFuZGVSdWUyIn0seyJwdWJsaWNOYW1lIjoiUmV0b3VybmVyIHZlcnMgbGUga2lvc3F1ZSIsImRlc2NyaXB0aW9uIjoiVmVycyBsJ2VudHLDqWUgZGUgbGEgcnVlLiIsImJvZHkiOiJMYSBmZW1tZSBldCBMdWNreSByZXZpbnJlbnQgdmVycyBsZSBraW9zcXVlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJncmFuZGVSdWUxIn0seyJwdWJsaWNOYW1lIjoiQ29udGludWVyIGRhbnMgbGEgcnVlIiwiZGVzY3JpcHRpb24iOiJQbHVzIGF2YW50LCBsZSBib3V0IGRlIGxhIHJ1ZS4iLCJib2R5IjoiRGV2YW50LCB1bmUgcm91dGUgYmFycmFpdCBsZSBwYXNzYWdlOyBjJ8OpdGFpdCBsZSBib3V0IGRlIGxhIHJ1ZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiZ3JhbmRlUnVlMyJ9XX0sImdyYW5kZVJ1ZTMiOnsicHVibGljTmFtZSI6IkV4dHLDqW1pdMOpIGRlIGxhIGdyYW5kZSBydWUiLCJkZXNjcmlwdGlvbiI6IkxlIGNoZW1pbiDDqXRhaXQgYmFycsOpIHBhciB1bmUgcm91dGUgcXVpIHBhc3NhaXQgZW4gdHJhdmVycy4gQyfDqXRhaXQgbGUgYm91dCBkZSBsYSBydWUuIFVuZSBydWVsbGUgcGFydGFpdCB2ZXJzIGxhIGdhdWNoZS4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiUHJlbmRyZSB0b3V0ZXMgbGVzIGFmZmljaGVzIGRlIGxhIHJ1ZSIsImRlc2NyaXB0aW9uIjoiSWxzIG4nYXZhaWVudCBxdSfDoCBwcmVuZHJlIGxlcyBhZmZpY2hlcywgcHVpcyBpbHMgcG91cnJhaWVudCByZXZlbmlyIHZlcnMgbGVzIGNoYXRzIHBvdXIgbGVzIG1vbnRyZXIuIiwiYm9keSI6IkxhIGZlbW1lIGFycmFjaGEgdG91dGVzIGxlcyBhZmZpY2hlcywgb2JzZXJ2w6llIHBhciBMdWNreSwgaW1wYXRpZW50LlxuXG5VbmUgZm9pcyBpbHMgYWZmaWNoZXMgYXJyYWNow6llcywgZWxsZSBzZSByZXRyb3V2YSBhdmVjIHVuZSBwaWxlIGRlIGZldWlsbGVzIGRhbnMgbGVzIG1haW5zLiBJbHMgcG91dmFpZW50IHJldmVuaXIgdmVycyBsZXMgY2hhdHMsIG1haW50ZW5hbnQuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbInBoYXNlMyJdLCJubyI6WyJhZmZpY2hlc1ByaXNlcyJdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6WyJhZmZpY2hlc1ByaXNlcyJdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJncmFuZGVSdWUzIn0seyJwdWJsaWNOYW1lIjoiTGlyZSB1bmUgYWZmaWNoZSBzdXIgdW4gbGFtcGFkYWlyZSBzYWxlIiwiZGVzY3JpcHRpb24iOiJBdSBkZXNzdXMgZHUgdGV4dGUgZGUgbCdhZmZpY2hlIHBsYXN0aWZpw6llLCB1bmUgaW1hZ2UgY3Jhc3NldXNlIGQndW4gZ3JvcyBjaGF0IG5vaXIuIiwiYm9keSI6IkF1IGRlc3N1cyBkdSB0ZXh0ZSBkZSBsJ2FmZmljaGUgcGxhc3RpZmnDqWUsIHVuZSBpbWFnZSBjcmFzc2V1c2UgZCd1biBncm9zIGNoYXQgbm9pci5cblxuQ0hBVCBQRVJEVVxuVFLDiFMgVElNSURFLCBORSBQQVMgQlJVU1FVRVIgU0kgVk9VUyBMRSBWT1lFWlxuQ29udGFjdGVyIGxlIFhYWC9YWFggWFggWFhcblxuTHVja3kgbGFuY2EgdW4gcmVnYXJkIHZpZGUgdmVycyBsJ2FmZmljaGUsIHB1aXMgcydhZmZhaXJhIMOgIGF1dHJlIGNob3NlIHBlbmRhbnQgcXVlIGxhIGZlbW1lIGxpc2FpdC4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UxIl0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6dHJ1ZSwibmV4dCI6ImdyYW5kZVJ1ZTMifSx7InB1YmxpY05hbWUiOiJMaXJlIHVuZSBhZmZpY2hlIHN1ciB1biBwYW5uZWF1IiwiZGVzY3JpcHRpb24iOiJDZXR0ZSBhZmZpY2hlIGF2YWl0IMOpdMOpIGNvbGzDqWUgc3VyIHVuIHBhbm5lYXUgZGUgY2lyY3VsYXRpb24sIHByb2JhYmxlbWVudCBwYXIgbWFucXVlIGRlIHBsYWNlIGF1dHJlIHBhcnQuIEVsbGUgZXN0IMOpY3JpdGUgw6AgbGEgbWFpbiwgdmlzaWJsZW1lbnQgcGFyIHVuIGVuZmFudC4iLCJib2R5IjoiQ2V0dGUgYWZmaWNoZSBhdmFpdCDDqXTDqSBjb2xsw6llIHN1ciB1biBwYW5uZWF1IGRlIGNpcmN1bGF0aW9uLCBwcm9iYWJsZW1lbnQgcGFyIG1hbnF1ZSBkZSBwbGFjZSBhdXRyZSBwYXJ0LiBFbGxlIMOpdGFpdCDDqWNyaXRlIMOgIGxhIG1haW4sIHZpc2libGVtZW50IHBhciB1biBlbmZhbnQ6XG5cblNpIHZvdXMgdm95w6kgbW9uIGNoYSxcbmFwcGVsw6kgbWEgbWFtYW5cbnNvbiBudW3DqXJvIGMnZXN0IFhYWC9YWFggWFggWFhcblxuQXUgZGVzc3VzIGZpZ3VyYWl0IHVuIGRlc3NpbiBhdSBjcmF5b24gZGUgY291bGV1ciBkJ3VuIGNoYXQsIHZlcnMgbGVxdWVsIHBvaW50YWl0IHVuZSBmbMOoY2hlIGF2ZWMgbGEgbMOpZ2VuZGU6IFwiU2hlZW5hXCJcblxuTHVja3kgZXhwbG9yYWl0IGxhIHJ1ZSBwbHVzIGxvaW4sIGTDqXBvdXJ2dSBkZSB0b3V0IGludMOpcsOqdCBwb3VyIGwnYWZmaWNoZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UxIl0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6dHJ1ZSwibmV4dCI6ImdyYW5kZVJ1ZTMifSx7InB1YmxpY05hbWUiOiJMaXJlIHVuZSBkZXMgYWZmaWNoZXMgZCd1biBsYW1wYWRhaXJlIHJlY291dmVydCIsImRlc2NyaXB0aW9uIjoiSW5leHBsaWNhYmxlbWVudCwgbCdhdXRldXIgZGUgY2V0dGUgYWZmaWNoZSBsJ2F2YWl0IGltcHJpbcOpZSDDoCBkZXMgZGl6YWluZXMgZCdleGVtcGxhaXJlcyBwb3VyIGVuIHJlY291dnJpciBsZSBsYW1wYWRhaXJlLiBDZXMgZXhlbXBsYWlyZXMgc2UgY2hldmF1Y2hhaWVudCBkZSB0ZWxsZSBtYW5pw6hyZSBxdWUgbGVzIGFmZmljaGVzIMOpdGFpZW50IGVuIHBhcnRpZSBpbGxpc2libGVzLiIsImJvZHkiOiJJbmV4cGxpY2FibGVtZW50LCBsJ2F1dGV1ciBkZSBjZXR0ZSBhZmZpY2hlIGwnYXZhaXQgaW1wcmltw6llIMOgIGRlcyBkaXphaW5lcyBkJ2V4ZW1wbGFpcmVzIHBvdXIgZW4gcmVjb3V2cmlyIGxlIGxhbXBhZGFpcmUuIENlcyBleGVtcGxhaXJlcyBzZSBjaGV2YXVjaGFpZW50IGRlIHRlbGxlIG1hbmnDqHJlIHF1ZSBsZXMgYWZmaWNoZXMgw6l0YWllbnQgZW4gcGFydGllIGlsbGlzaWJsZXM6XG5cbkNoYXQgdGlnXG4gICAgbm9tIGVzdCBMXG4gICAgICAgICAgICAgICAgdWlzIDIgbW9pc1xuICAgICAgICAgICAgICAgbmnDqHJlIGZvaXMgYXUgWFhYIGRlXG4gICAgICAgIHRyw6hzIGltcG9ydGFudCBwb3VyIG1vaVxuICAgICAgICAgbGUgdm95ZXogYXBwZWxlelxuUydpbCB2b3VzIHBsYcOudFxuXG5QZW5kYW50IHF1ZSBsYSBmZW1tZSBsaXNhaXQgbCdhZmZpY2hlLCBMdWNreSBzZSBmcm90dGFpdCBhdSBsYW1wYWRhaXJlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6WyJwaGFzZTEiXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjp0cnVlLCJuZXh0IjoiZ3JhbmRlUnVlMyJ9LHsicHVibGljTmFtZSI6IkxpcmUgdW5lIGFmZmljaGUgc3VyIHVuIGxhbXBhZGFpcmUgc2FsZSIsImRlc2NyaXB0aW9uIjoiQXUgZGVzc3VzIGR1IHRleHRlIGRlIGwnYWZmaWNoZSBwbGFzdGlmacOpZSwgdW5lIGltYWdlIGNyYXNzZXVzZSBkJ3VuIGdyb3MgY2hhdCBub2lyLiIsImJvZHkiOiJBdSBkZXNzdXMgZHUgdGV4dGUgZGUgbCdhZmZpY2hlIHBsYXN0aWZpw6llLCB1bmUgaW1hZ2UgY3Jhc3NldXNlIGQndW4gZ3JvcyBjaGF0IG5vaXIuXG5cbkNIQVQgUEVSRFVcblRSw4hTIFRJTUlERSwgTkUgUEFTIEJSVVNRVUVSIFNJIFZPVVMgTEUgVk9ZRVpcbkNvbnRhY3RlciBsZSBYWFgvWFhYIFhYIFhYXG5cbkx1Y2t5IGxhbmNhIHVuIHJlZ2FyZCB2aWRlIHZlcnMgbCdhZmZpY2hlLCBwdWlzIHMnYWZmYWlyYSDDoCBhdXRyZSBjaG9zZSBwZW5kYW50IHF1ZSBsYSBmZW1tZSBsaXNhaXQuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbInBoYXNlMiJdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOnRydWUsIm5leHQiOiJncmFuZGVSdWUzIn0seyJwdWJsaWNOYW1lIjoiTGlyZSB1bmUgYWZmaWNoZSBzdXIgdW4gcGFubmVhdSIsImRlc2NyaXB0aW9uIjoiQ2V0dGUgYWZmaWNoZSBhdmFpdCDDqXTDqSBjb2xsw6llIHN1ciB1biBwYW5uZWF1IGRlIGNpcmN1bGF0aW9uLCBwcm9iYWJsZW1lbnQgcGFyIG1hbnF1ZSBkZSBwbGFjZSBhdXRyZSBwYXJ0LiBFbGxlIGVzdCDDqWNyaXRlIMOgIGxhIG1haW4sIHZpc2libGVtZW50IHBhciB1biBlbmZhbnQuIiwiYm9keSI6IkNldHRlIGFmZmljaGUgYXZhaXQgw6l0w6kgY29sbMOpZSBzdXIgdW4gcGFubmVhdSBkZSBjaXJjdWxhdGlvbiwgcHJvYmFibGVtZW50IHBhciBtYW5xdWUgZGUgcGxhY2UgYXV0cmUgcGFydC4gRWxsZSDDqXRhaXQgw6ljcml0ZSDDoCBsYSBtYWluLCB2aXNpYmxlbWVudCBwYXIgdW4gZW5mYW50OlxuXG5TaSB2b3VzIHZvecOpIG1vbiBjaGEsXG5hcHBlbMOpIG1hIG1hbWFuXG5zb24gbnVtw6lybyBjJ2VzdCBYWFgvWFhYIFhYIFhYXG5cbkF1IGRlc3N1cyBmaWd1cmFpdCB1biBkZXNzaW4gYXUgY3JheW9uIGRlIGNvdWxldXIgZCd1biBjaGF0LCB2ZXJzIGxlcXVlbCBwb2ludGFpdCB1bmUgZmzDqGNoZSBhdmVjIGxhIGzDqWdlbmRlOiBcIlNoZWVuYVwiXG5cbkx1Y2t5IGV4cGxvcmFpdCBsYSBydWUgcGx1cyBsb2luLCBkw6lwb3VydnUgZGUgdG91dCBpbnTDqXLDqnQgcG91ciBsJ2FmZmljaGUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbInBoYXNlMiJdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOnRydWUsIm5leHQiOiJncmFuZGVSdWUzIn0seyJwdWJsaWNOYW1lIjoiTGlyZSB1bmUgZGVzIGFmZmljaGVzIGQndW4gbGFtcGFkYWlyZSByZWNvdXZlcnQiLCJkZXNjcmlwdGlvbiI6IkluZXhwbGljYWJsZW1lbnQsIGwnYXV0ZXVyIGRlIGNldHRlIGFmZmljaGUgbCdhdmFpdCBpbXByaW3DqWUgw6AgZGVzIGRpemFpbmVzIGQnZXhlbXBsYWlyZXMgcG91ciBlbiByZWNvdXZyaXIgbGUgbGFtcGFkYWlyZS4gQ2VzIGV4ZW1wbGFpcmVzIHNlIGNoZXZhdWNoYWllbnQgZGUgdGVsbGUgbWFuacOocmUgcXVlIGxlcyBhZmZpY2hlcyDDqXRhaWVudCBlbiBwYXJ0aWUgaWxsaXNpYmxlcy4iLCJib2R5IjoiSW5leHBsaWNhYmxlbWVudCwgbCdhdXRldXIgZGUgY2V0dGUgYWZmaWNoZSBsJ2F2YWl0IGltcHJpbcOpZSDDoCBkZXMgZGl6YWluZXMgZCdleGVtcGxhaXJlcyBwb3VyIGVuIHJlY291dnJpciBsZSBsYW1wYWRhaXJlLiBDZXMgZXhlbXBsYWlyZXMgc2UgY2hldmF1Y2hhaWVudCBkZSB0ZWxsZSBtYW5pw6hyZSBxdWUgbGVzIGFmZmljaGVzIMOpdGFpZW50IGVuIHBhcnRpZSBpbGxpc2libGVzOlxuXG5DaGF0IHRpZ1xuICAgIG5vbSBlc3QgTFxuICAgICAgICAgICAgICAgIHVpcyAyIG1vaXNcbiAgICAgICAgICAgICAgIG5pw6hyZSBmb2lzIGF1IFhYWCBkZVxuICAgICAgICB0csOocyBpbXBvcnRhbnQgcG91ciBtb2lcbiAgICAgICAgIGxlIHZveWV6IGFwcGVsZXpcblMnaWwgdm91cyBwbGHDrnRcblxuUGVuZGFudCBxdWUgbGEgZmVtbWUgbGlzYWl0IGwnYWZmaWNoZSwgTHVja3kgc2UgZnJvdHRhaXQgYXUgbGFtcGFkYWlyZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UyIl0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6dHJ1ZSwibmV4dCI6ImdyYW5kZVJ1ZTMifSx7InB1YmxpY05hbWUiOiJMaXJlIHVuZSBhZmZpY2hlIHN1ciB1biBsYW1wYWRhaXJlIHNhbGUiLCJkZXNjcmlwdGlvbiI6IkF1IGRlc3N1cyBkdSB0ZXh0ZSBkZSBsJ2FmZmljaGUgcGxhc3RpZmnDqWUsIHVuZSBpbWFnZSBjcmFzc2V1c2UgZCd1biBncm9zIGNoYXQgbm9pci4iLCJib2R5IjoiQXUgZGVzc3VzIGR1IHRleHRlIGRlIGwnYWZmaWNoZSBwbGFzdGlmacOpZSwgdW5lIGltYWdlIGNyYXNzZXVzZSBkJ3VuIGdyb3MgY2hhdCBub2lyLlxuXG5DSEFUIFBFUkRVXG5UUsOIUyBUSU1JREUsIE5FIFBBUyBCUlVTUVVFUiBTSSBWT1VTIExFIFZPWUVaXG5Db250YWN0ZXIgbGUgWFhYL1hYWCBYWCBYWFxuXG5MdWNreSBsYW5jYSB1biByZWdhcmQgdmlkZSB2ZXJzIGwnYWZmaWNoZSwgcHVpcyBzJ2FmZmFpcmEgw6AgYXV0cmUgY2hvc2UgcGVuZGFudCBxdWUgbGEgZmVtbWUgbGlzYWl0LiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6WyJwaGFzZTMiXSwibm8iOlsiYWZmaWNoZXNQcmlzZXMiXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6dHJ1ZSwibmV4dCI6ImdyYW5kZVJ1ZTMifSx7InB1YmxpY05hbWUiOiJMaXJlIHVuZSBhZmZpY2hlIHN1ciB1biBwYW5uZWF1IiwiZGVzY3JpcHRpb24iOiJDZXR0ZSBhZmZpY2hlIGF2YWl0IMOpdMOpIGNvbGzDqWUgc3VyIHVuIHBhbm5lYXUgZGUgY2lyY3VsYXRpb24sIHByb2JhYmxlbWVudCBwYXIgbWFucXVlIGRlIHBsYWNlIGF1dHJlIHBhcnQuIEVsbGUgZXN0IMOpY3JpdGUgw6AgbGEgbWFpbiwgdmlzaWJsZW1lbnQgcGFyIHVuIGVuZmFudC4iLCJib2R5IjoiQ2V0dGUgYWZmaWNoZSBhdmFpdCDDqXTDqSBjb2xsw6llIHN1ciB1biBwYW5uZWF1IGRlIGNpcmN1bGF0aW9uLCBwcm9iYWJsZW1lbnQgcGFyIG1hbnF1ZSBkZSBwbGFjZSBhdXRyZSBwYXJ0LiBFbGxlIMOpdGFpdCDDqWNyaXRlIMOgIGxhIG1haW4sIHZpc2libGVtZW50IHBhciB1biBlbmZhbnQ6XG5cblNpIHZvdXMgdm95w6kgbW9uIGNoYSxcbmFwcGVsw6kgbWEgbWFtYW5cbnNvbiBudW3DqXJvIGMnZXN0IFhYWC9YWFggWFggWFhcblxuQXUgZGVzc3VzIGZpZ3VyYWl0IHVuIGRlc3NpbiBhdSBjcmF5b24gZGUgY291bGV1ciBkJ3VuIGNoYXQsIHZlcnMgbGVxdWVsIHBvaW50YWl0IHVuZSBmbMOoY2hlIGF2ZWMgbGEgbMOpZ2VuZGU6IFwiU2hlZW5hXCJcblxuTHVja3kgZXhwbG9yYWl0IGxhIHJ1ZSBwbHVzIGxvaW4sIGTDqXBvdXJ2dSBkZSB0b3V0IGludMOpcsOqdCBwb3VyIGwnYWZmaWNoZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UzIl0sIm5vIjpbImFmZmljaGVzUHJpc2VzIl19LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOnRydWUsIm5leHQiOiJncmFuZGVSdWUzIn0seyJwdWJsaWNOYW1lIjoiTGlyZSB1bmUgZGVzIGFmZmljaGVzIGQndW4gbGFtcGFkYWlyZSByZWNvdXZlcnQiLCJkZXNjcmlwdGlvbiI6IkluZXhwbGljYWJsZW1lbnQsIGwnYXV0ZXVyIGRlIGNldHRlIGFmZmljaGUgbCdhdmFpdCBpbXByaW3DqWUgw6AgZGVzIGRpemFpbmVzIGQnZXhlbXBsYWlyZXMgcG91ciBlbiByZWNvdXZyaXIgbGUgbGFtcGFkYWlyZS4gQ2VzIGV4ZW1wbGFpcmVzIHNlIGNoZXZhdWNoYWllbnQgZGUgdGVsbGUgbWFuacOocmUgcXVlIGxlcyBhZmZpY2hlcyDDqXRhaWVudCBlbiBwYXJ0aWUgaWxsaXNpYmxlcy4iLCJib2R5IjoiSW5leHBsaWNhYmxlbWVudCwgbCdhdXRldXIgZGUgY2V0dGUgYWZmaWNoZSBsJ2F2YWl0IGltcHJpbcOpZSDDoCBkZXMgZGl6YWluZXMgZCdleGVtcGxhaXJlcyBwb3VyIGVuIHJlY291dnJpciBsZSBsYW1wYWRhaXJlLiBDZXMgZXhlbXBsYWlyZXMgc2UgY2hldmF1Y2hhaWVudCBkZSB0ZWxsZSBtYW5pw6hyZSBxdWUgbGVzIGFmZmljaGVzIMOpdGFpZW50IGVuIHBhcnRpZSBpbGxpc2libGVzOlxuXG5DaGF0IHRpZ1xuICAgIG5vbSBlc3QgTFxuICAgICAgICAgICAgICAgIHVpcyAyIG1vaXNcbiAgICAgICAgICAgICAgIG5pw6hyZSBmb2lzIGF1IFhYWCBkZVxuICAgICAgICB0csOocyBpbXBvcnRhbnQgcG91ciBtb2lcbiAgICAgICAgIGxlIHZveWV6IGFwcGVsZXpcblMnaWwgdm91cyBwbGHDrnRcblxuUGVuZGFudCBxdWUgbGEgZmVtbWUgbGlzYWl0IGwnYWZmaWNoZSwgTHVja3kgc2UgZnJvdHRhaXQgYXUgbGFtcGFkYWlyZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UzIl0sIm5vIjpbImFmZmljaGVzUHJpc2VzIl19LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOnRydWUsIm5leHQiOiJncmFuZGVSdWUzIn0seyJwdWJsaWNOYW1lIjoiQWxsZXIgZGFucyBsYSBydWVsbGUiLCJkZXNjcmlwdGlvbiI6IsOAIGdhdWNoZSwgbGEgcGV0aXRlIGVudHLDqWUgZCd1bmUgcnVlbGxlLiBEYW5zIGNldHRlIHJ1ZWxsZSwgbCdhcHBhcnRlbWVudCBkZSBsYSBmZW1tZS4iLCJib2R5IjoiTGEgZmVtbWUgZW50cmEgZGFucyBsYSBydWVsbGUsIHN1aXZpZSBkZSBMdWNreS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicnVlbGxlTWFpc29uIn0seyJwdWJsaWNOYW1lIjoiUmV2ZW5pciB2ZXJzIGxlcyBsYW1wYWRhaXJlcyIsImRlc2NyaXB0aW9uIjoiTW9pbnMgbG9pbiBkYW5zIGxhIHJ1ZS4iLCJib2R5IjoiTGEgZmVtbWUgcmV2aW50IHN1ciBzZXMgcGFzLCB2ZXJzIGxlIGxhbXBhZGFpcmUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImdyYW5kZVJ1ZTIifSx7InB1YmxpY05hbWUiOiJBbGxlciBwbHVzIGxvaW4iLCJkZXNjcmlwdGlvbiI6IkNvbnRpbnVlciBzdXIgbGEgcm91dGUuIiwiYm9keSI6IkxlcyBkZXV4IGFsbMOocmVudCBhdSBib3JkIGRlIGxhIHJvdXRlLiDDgCBkcm9pdGUsIGNlbGxlLWNpIHJlbnRyYWl0IGRhbnMgdW5lIGFsbMOpZSBwbGVpbmUgZGUgbWFnYXNpbnMsIMOgIGdhdWNoZSwgZGFucyB1biBxdWFydGllciByw6lzaWRlbnRpZWwuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImdyYW5kZVJvdXRlIn1dfSwicGFyY1B1YmxpYyI6eyJwdWJsaWNOYW1lIjoiVW4gcGFyYyBwdWJsaWMiLCJkZXNjcmlwdGlvbiI6IiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJTJ2Fzc2VvaXIgc3VyIHVuIGJhbmMiLCJkZXNjcmlwdGlvbiI6IklsIHkgYXZhaXQgdG91am91cnMgdW4gbW9tZW50IHBvdXIgcmVwcmVuZHJlIHNvbiBzb3VmZmxlLi4uIiwiYm9keSI6IkxhIGZlbW1lIHMnYXNzaXQgc3VyIHVuIGRlcyBiYW5jcyBkdSBwYXJjLiBMdWNreSBzYXV0YSBzdXIgbGUgYmFuYyBldCBzZSBjb3VjaGEgw6AgY8O0dMOpIGQnZWxsZS4gQ2VsYSBmYWlzYWl0IGTDqWrDoCB1biBtb21lbnQgcXUnaWxzIG1hcmNoYWllbnQgZGFucyBsYSB2aWxsZS5cblxuXCJDb21tZW50IGVzdC1jZSBxdSdvbiB2YSBmYWlyZT9cIiwgZGl0IGxhIGZlbW1lLiBFbGxlIG4nYXZhaXQgcGFzIGQnaWTDqWVzLlxuXG5NYWlzIEx1Y2t5IG5lIGwnw6ljb3V0YWl0IHBhcy5cblxuXCJRdSdlc3QtY2UgcXVlIHR1IHJlZ2FyZGVzP1wiXG5cbkVsbGUgc3Vpdml0IHNvbiByZWdhcmQuIMOAIHVuZSBkaXphaW5lIGRlIG3DqHRyZXMsIHVuIGhvbW1lIHF1aSBzZSBwcm9tZW5haXQgcmVnYXJkYWl0IMOgIHNlcyBwaWVkcywgZnJhbmNoZW1lbnQgc3VycHJpcy4gVW4gY2hhdCBzZSBmcm90dGFpdCDDoCBzZXMgcGllZHMuXG5cblwiQWguXCJcblxuTHVja3kgcGFybGEgZG91Y2VtZW50OiBcIkplIGxlIGNvbm5haXMgZGUgbG9pbi4gSWwgw6l0YWl0IHN1ciBsZSB0b2l0IHRvdXQgw6AgbCdoZXVyZS5cIlxuXG5MZSBjaGF0IHF1aSBzZSBmcm90dGFpdCBhdXggcGllZHMgZGUgbCdob21tZSBsZSByZWdhcmRhIHVuZSBmb2lzLCBwdWlzIHMnZW5mdWl0IGVuIGNvdXJhbnQsIGF2YW50IHF1ZSBjZSBkZXJuaWVyIHB1aXNzZSBsZSBzdWl2cmUuIEwnaG9tbWUgZml0IHVuIGdlc3RlIHZlcnMgbGUgY2hhdCwgbWFpcyB2b3lhbnQgcXUnaWwgbmUgcG91cnJhaXQgcGFzIHJhdHRyYXBlciBjZSBkZXJuaWVyLCBpbCByZXN0YSBqdXN0ZSBjb2kgYXUgYm9yZCBkdSBwYXJjLlxuXG5cIlVuIGNoYXQgcXVpIGEgdm91bHUgc2FsdWVyIHVuZSBkZXJuacOocmUgZm9pcyBzb24gbWHDrnRyZSBhdmFudCBkZSBwYXJ0aXIuIE1hbGdyw6kgbGVzIGRpc2NvdXJzIGRlIE1yYSwgamUgcGVuc2UgcXVlIGJlYXVjb3VwIHRlbmFpZW50IGF1dGFudCDDoCBsZXVyIG1hw650cmUgcXVlIG1vaS5cIiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6WyJwaGFzZTIiXSwibm8iOlsicmFpc29uUmVzdGVyQW1vdXIiXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOlsicmFpc29uUmVzdGVyQW1vdXIiXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicGFyY1B1YmxpYyJ9LHsicHVibGljTmFtZSI6IlJldG91cm5lciB2ZXJzIGxlIHF1YXJ0aWVyIiwiZGVzY3JpcHRpb24iOiJJbCBuJ3kgYXZhaXQgcmllbiBkJ2F1dHJlIMOgIHZvaXIgZGFucyBsZSBwYXJjLCDDoCBjZXR0ZSBoZXVyZS1sw6AuIiwiYm9keSI6IklscyByZXRvdXJuw6hyZW50IGF1IHF1YXJ0aWVyIHLDqXNpZGVudGllbC4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicXVhcnRpZXJTcGFjaWV1eCJ9XX0sInF1YXJ0aWVyU3BhY2lldXgiOnsicHVibGljTmFtZSI6IlVuIHF1YXJ0aWVyIHNwYWNpZXV4IiwiZGVzY3JpcHRpb24iOiJMZSBxdWFydGllciDDqXRhaXQgcsOpY2VudCwgaGFiaXTDqSBkZXB1aXMgcXVlbHF1ZXMgYW5uw6llcy4gSWwgw6l0YWl0IGJpZW4gw6ljbGFpcsOpIGV0IGluY3JveWFibGVtZW50IHNwYWNpZXV4LiBMZXMgYWJyaXMgw6AgdsOpbG9zIMOpdGFpZW50IHZpZGVzIGV0IGxlcyByaWRlYXV4IGRlIGxhIHBsdXBhcnQgZGVzIGFwcGFydGVtZW50cyDDqXRhaWVudCB0aXLDqXMuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlJlZ2FyZGVyIHVuZSBtYWlzb24gYWxsdW3DqWUiLCJkZXNjcmlwdGlvbiI6Ikx1Y2t5IHJhbGVudGl0IGVuIHBhc3NhbnQgZGV2YW50IHVuZSBtYWlzb24uLi4iLCJib2R5IjoiTHVja3kgcmFsZW50aXQgZW4gcGFzc2FudCBkZXZhbnQgdW5lIG1haXNvbi4gSWwgbGEgcmVnYXJkYSBkJ3VuIGFpciB0cmlzdGUsIHB1aXMgYWNjw6lsw6lyYSBsZSBwYXMuXG5cblwiQXR0ZW5kcywgTHVja3ksIHF1J2VzdC1jZSBxdWkgc2UgcGFzc2U/XCIsIGRlbWFuZGEgbGEgZmVtbWUuXG5cblwiSmUgbmUgdmV1eCBwYXMgdm9pciBjZXQgZW5kcm9pdC5cIiwgZGl0LWlsIGQndW5lIHZvaXggYmFzc2UuXG5cblwiUG91cnF1b2k/XCJcblxuSWwgcGFydGl0IGVuIGF2YW50IHNhbnMgcsOpcG9uZHJlLCBtYWlzIGVsbGUgcmVzdGEgc3VyIHBsYWNlLiBFbGxlIHJlZ2FyZGEgZGFucyBsYSBiYWllIHZpdHLDqWUuIEMnw6l0YWl0IHVuIHNhbG9uIGNsYXNzaXF1ZSwgc2FucyBncmFuZCBjaG9zZSBkZSBub3RhYmxlLi4uXG5cbkRhbnMgdW4gY29pbi4gSWwgeSBhdmFpdCB1bmUgbGl0acOocmUuIFZpZGUuXG5cbkx1Y2t5IMOpdGFpdCByZXZlbnUsIHZveWFudCBxdSdlbGxlIG5lIGxlIHN1aXZhaXQgcGFzLiBJbCByZWdhcmRhaXQgbGEgbcOqbWUgY2hvc2UgcXUnZWxsZS5cblxuXCJDJ2VzdCBsYSBtYWlzb24gZGUgbWVzIGFuY2llbnMgbWHDrnRyZXMuXCJcblxuTGEgZmVtbWUgbGUgcmVnYXJkYSwgc2lsZW5jaWV1c2UuIElsIGNvbnRpbnVhOlxuXG5cIklscyDDqXRhaWVudCB1bmUgZmFtaWxsZSwgcG91ciBtb2kuXCJcblxuXCJTaSB0dSB0ZW5haXMgw6AgZXV4LCBwb3VycXVvaSBlcy10dSBwYXJ0aSwgTHVja3k/XCJcblxuXCJKZSB2b3VsYWlzIHBsdXMgZCdpbmTDqXBlbmRhbmNlLCBjb21tZSBsZXMgYXV0cmVzLiBNJ2FwcGFydGVuaXIgw6AgbW9pLW3Dqm1lLiBOZSBwYXMgbWUgZmFpcmUgY2FzdHJlciBvdSB2ZW5kcmUgcGFyY2UgcXUndW4gaHVtYWluIGVuIGF2YWl0IGTDqWNpZMOpIHBvdXIgbW9pLiBTdWl2cmUgbGVzIGF1dHJlcy4gQ2Ugbidlc3QgcXUnYXByw6hzIMOqdHJlIHBhcnRpIHF1ZSBqZSBtZSBzdWlzIHJlbmR1IGNvbXB0ZSBkZSBjZSBxdWUgaidhdmFpcyBxdWl0dMOpLiBVbmUgbWFpc29uIHF1aSB0ZW5haXQgw6AgbW9pLiBVbiBlbmRyb2l0IHF1aSBtJ2FjY3VlaWxsYWl0LlwiXG5cblwiUG91cnF1b2kgbid5IGVzLXR1IHBhcyByZXRvdXJuw6k/XCJcblxuXCJKJ2F2YWlzIHRyb3AgaG9udGUsIGV0IGonYWkgdG91am91cnMgdHJvcCBob250ZS4gSmUgZG9pcyBsZXVyIGF2b2lyIGZhaXQgZHUgbWFsIGVuIHBhcnRhbnQuIElscyBkb2l2ZW50IGNyb2lyZSBxdWUgamUgc3VpcyBtb3J0LiBKZSBuZSBtw6lyaXRlIHBhcyBkJ3kgcmV0b3VybmVyLlwiXG5cblwiRXQgcGFydGlyIGF2ZWMgTXJhIGV0IGxlcyBhdXRyZXM/XCJcblxuXCJOb3VzLCBsZXMgY2hhdHMsIG5vdXMgbmUgc29tbWVzIHBhcyB0csOocyBmYW1pbGlhdXguIEplIG5lIGNyb2lzIHBhcyBxdWUgbm91cyBwb3VycmlvbnMgcmVjcsOpZXIgdW4gdGVsIGVudmlyb25uZW1lbnQuIE1hbGdyw6kgbGVzIHByb21lc3NlcyBkZSBNcmEuIEV0IGplIHBlbnNlIHF1ZSBiZWF1Y291cCByZWdyZXR0ZW50IGNvbW1lIG1vaSBsZSBmYWl0IGQnw6p0cmUgdmVudXMuIE5vdXMgc29tbWVzIGVuIHRyYWluIGRlIGZhaXJlIHVuZSB0ZXJyaWJsZSBlcnJldXIsIGV0IGplIHZldXggbGFpc3NlciDDoCBjZXV4IHF1aSBwZXV2ZW50IGVuY29yZSBsYSBjb3JyaWdlciBsYSBwb3NzaWJpbGl0w6kgZGUgbmUgcGFzIGxhIGZpbmFsaXNlci5cIlxuXG5MYSBmZW1tZSBwZW5zYSDDoCBsJ2Fycml2w6llIGVuIHBsZWluZSBudWl0IGRlIEx1Y2t5IGRhbnMgc2EgY2hhbWJyZTogXCJDJ2VzdCBwb3VyIMOnYSBxdWUuLi4/XCJcblxuXCJPdWkuXCJcblxuVG91dCDDqXRhbnQgZGl0LCBpbHMgcmVwYXJ0aXJlbnQuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbInBoYXNlMiJdLCJubyI6WyJyYWlzb25SZXN0ZXJMdWNreSJdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6WyJyYWlzb25SZXN0ZXJMdWNreSJdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJxdWFydGllclNwYWNpZXV4In0seyJwdWJsaWNOYW1lIjoiQWxsZXIgZGFucyBsZSBwYXJjIiwiZGVzY3JpcHRpb24iOiJBdSBtaWxpZXUgZHUgcXVhcnRpZXIsIGlsIHkgYXZhaXQgdW4gcGV0aXQgcGFyYyDDoCBsJ2ludGVudGlvbiBkZXMgaGFiaXRhbnRzLiIsImJvZHkiOiJJbHMgc2UgcmFwcHJvY2jDqHJlbnQgZHUgcGFyYy4gVW4gaG9tbWUgcHJvbWVuYWl0IHNvbiBjaGllbi4gQ2UgZGVybmllciBldCBMdWNreSBzZSBmaXjDqHJlbnQgZnJvaWRlbWVudCBqdXNxdSfDoCBjZSBxdWUgbGUgbWHDrnRyZSBkdSBjaGllbiBwYXJ0ZSwgYXByw6hzIHF1b2kgc29uIGFuaW1hbCBkZSBjb21wYWduaWUgbGUgc3Vpdml0LiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJwYXJjUHVibGljIn0seyJwdWJsaWNOYW1lIjoiQWxsZXIgdmVycyBsYSByb3V0ZSIsImRlc2NyaXB0aW9uIjoiSWxzIGF2YWllbnQgZmFpdCB0b3V0IGNlIHF1J2lscyBhdmFpZW50IMOgIGZhaXJlIGzDoC4iLCJib2R5IjoiSWxzIHJldmlucmVudCB2ZXJzIGxhIHJvdXRlLCBkZSBsYSBsdW1pw6hyZSDDoCBsYSBudWl0IG5vaXJlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJncmFuZGVSb3V0ZSJ9XX0sInJhaXNvbnNEZVJlc3RlcjEiOnsicHVibGljTmFtZSI6IlwiVm9pbMOgIHBvdXJxdW9pIHZvdXMgZGV2cmlleiByZXN0ZXIuLi5cIiIsImRlc2NyaXB0aW9uIjoiSWwgZmFsbGFpdCBwYXJsZXIgdml0ZS4gTXJhIG4nYWxsYWl0IHBhcyBzZSBsYWlzc2VyIGludGVycm9tcHJlIHBlbmRhbnQgbG9uZ3RlbXBzLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJcIlBlbnNleiBhdSByZXBhcyBxdWkgdm91cyBhdHRlbmRhaXQgcXVhbmQgdm91cyByZW50cmlleiBjaGV6IHZvdXMgbGUgc29pci5cIiIsImRlc2NyaXB0aW9uIjoiTGV1ciByYXBwZWxlciBsZXVyIGFuY2llbiBjaGV6LXNvaS4iLCJib2R5IjoiQ29tbWVuY2VyIHBhciBsZXMgYXJndW1lbnRzIGxlcyBtb2lucyBmb3J0cy4gVW4gZMOpYnV0LlxuXG5cIlBlbnNleiwgZGl0IEx1Y2t5LCDDoCB2b3RyZSBhbmNpZW5uZSBtYWlzb24uIFBlbnNleiDDoCBxdWFuZCB2b3VzIHJlbnRyaWV6IGNoZXogdm91cyBsZSBzb2lyIGF1IGNoYXVkLCBldCBhdSBib24gcGxhdCBxdWUgdm91cyBtYW5naWV6LiBOJ2F2ZXotdm91cyBwYXMgZW52aWUgZGUgcmV2b2lyIMOnYT9cIlxuXG5MJ2V4cHJlc3Npb24gZCd1bmUgcGFydGllIGRlcyBjaGF0cyBwYXNzYSBkZSBjdXJpZXVzZSDDoCBhZ2Fjw6llLiBQb3VyIGJlYXVjb3VwLCBsYSBub3Vycml0dXJlIG4nw6l0YWl0IHByb2JhYmxlbWVudCBwYXMgYXVzc2kgYm9ubmUgcXVlIGNoZXogTHVja3kuIE1yYSBhYmF0dGl0IGwnYXJndW1lbnQ6XG5cblwiVHUgdmV1eCBsZXMgYWNoZXRlciBhdmVjIGRlIGxhIG5vdXJyaXR1cmU/IFZyYWltZW50P1wiXG5cbklsIMOpdGFpdCB0ZW1wcyBkZSBwYXNzZXIgw6AgbCdhcmd1bWVudCBzdWl2YW50LiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6WyJyYWlzb25SZXN0ZXJOb3Vycml0dXJlIl0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJyYWlzb25zRGVSZXN0ZXIyIn1dfSwicmFpc29uc0RlUmVzdGVyMiI6eyJwdWJsaWNOYW1lIjoiXCJWb2lsw6AgcG91cnF1b2kgdm91cyBkZXZyaWV6IHJlc3Rlci4uLlwiIiwiZGVzY3JpcHRpb24iOiJMZSBwcmVtaWVyIGFyZ3VtZW50IG4nYXZhaXQgcGFzIGJpZW4gbWFyY2jDqS4gVml0ZSwgYXUgc3VpdmFudC4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiXCJQZW5zZXogw6AgbGEgY29tcGFnbmllIGRlIHZvcyBhbmNpZW5zIG1hw650cmVzLlwiIiwiZGVzY3JpcHRpb24iOiJQZXV0LcOqdHJlIGNlbGEgw6l2ZWlsbGVyYS10LWlsIGRlIGJvbnMgc291dmVuaXJzLiIsImJvZHkiOiJMdWNreSBjb250aW51YTogXCJQZW5zZXogw6Agdm9zIG1hw650cmVzLiBWb3RyZSBmYW1pbGxlLiBOZSB2b3VzIG1hbnF1ZW50LWlscyBwYXM/IE5lIHZvdXMgbGFuZ3Vpc3Nlei12b3VzIHBhcyBkJ3VuZSBwcsOpc2VuY2UgY2hhdWRlIGNvbnRyZSBsYXF1ZWxsZSB2ZW5pciBsb3JzcXVlIGxhIGZhdGlndWUgdmllbnQ/IE5lIHZvdXMgbGFuZ3Vpc3Nlei12b3VzIHBhcyBkZXMgY2FyZXNzZXMgZG91Y2VzIGRlIGNldXggcXVpIMOpdGFpZW50IHZvdHJlIGZhbWlsbGU/XCJcblxuXCJDZSBzb250IGRlcyBjaG9zZXMgZHUgcGFzc8OpLCByZW7DqWdhdCwgcsOpcG9uZGl0IE1yYS4gTm91cyBzb21tZXMgZGVzIGNoYXRzLCBldCBkw6lzb3JtYWlzLCBlbnRyZSBjaGF0cyBub3VzIHJlc3Rlcm9ucy4gTm91cyBzb21tZXMgcGx1cyBxdWUgcGxlaW5lbWVudCBjYXBhYmxlcyBkJ8OqdHJlIG5vdHJlIHByb3ByZSBmYW1pbGxlIHNhbnMgc2UgcmVwb3NlciBzdXIgZGVzIGVzcMOoY2VzIGluZsOpcmlldXJlcy4gRW4gdGFudCBxdWUgY2hhdHMsIG5vdXMgbm91cyBjb21wcmVub25zIG1pZXV4IHF1J3VuIGh1bWFpbiBub3VzIGNvbXByZW5kcmEgamFtYWlzLlwiXG5cblwiRXN0LWNlIHZyYWltZW50IGxlIGNhcz8gVG91dCDDoCBsJ2hldXJlLCBkYW5zIGxhIHZpbGxlLCBub3VzIGF2b25zIHZ1IHVuIGNoYXQgcXVpIMOpdGFpdCB2ZW51IGRpcmUgYWRpZXUgw6Agc29uIG1hw650cmUuIE5vdXMgZG91dG9ucyBxdSdpbCBzb2l0IGxlIHNldWwuIENoYXRzLCBkw6l0ZXN0ZXotdm91cyByw6llbGxlbWVudCB2b3MgbWHDrnRyZXMgYXV0YW50IHF1ZSB2b3VzIGxlIHByw6l0ZW5kZXo/XCJcblxuTXJhIGZldWxhOiBcIlR1IG1lbnMsIHRyYcOudHJlLiBTb3VzLWVudGVuZHMtdHUgcXVlIG5vdXMgc29tbWVzIGRlIGZhaWJsZSB2b2xvbnTDqT8gVHUgY2hlcmNoZXMgw6Agc2VtZXIgbGUgZG91dGUgcGFybWkgbm91cy4gQ29udHJhaXJlbWVudCDDoCB0b2ksIGplIGNyb2lzIGVuIG1lcyBnZW5zLlwiXG5cbkVsbGUgcmVnYXJkYSBhdXRvdXIgZCdlbGxlLCBzb25kYSBsYSBmb3VsZS4gTWFpcyBsZXMgcmVnYXJkcyBhdmFpZW50IHBlcmR1IGVuIGFncmVzc2l2aXTDqS4gQ2VydGFpbnMgYXZhaWVudCBtw6ptZSBiYWlzc8OpIGxlcyB5ZXV4LiBMJ2FyZ3VtZW50IGF2YWl0IGZhaXQgbW91Y2hlLlxuXG5MZSBjaGF0IHF1ZSBMdWNreSBldCBsYSBmZW1tZSBhdmFpZW50IHZ1IGF1IHBhcmMgw6l0YWl0IHZlcnMgbGUgZm9uZCwgaW50ZXJkaXQuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbInJhaXNvblJlc3RlckFtb3VyIl0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJyYWlzb25zRGVSZXN0ZXIzIn1dfSwicmFpc29uc0RlUmVzdGVyMyI6eyJwdWJsaWNOYW1lIjoiXCJWb2lsw6AgcG91cnF1b2kgdm91cyBkZXZyaWV6IHJlc3Rlci4uLlwiIiwiZGVzY3JpcHRpb24iOiLDgCBsJ2VzdG9jYWRlIGZpbmFsZS4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiXCJQZW5zZXogw6AgY29tYmllbiB2b3VzIGxldXIgbWFucXVlei5cIiIsImRlc2NyaXB0aW9uIjoiQ2VsYSBkZXZyYWl0IG1hcmNoZXIuIiwiYm9keSI6Ikx1Y2t5IGFzc8OobmE6IFwiVm9zIG1hw650cmVzLCB2b3MgZmFtaWxsZXMsIHBlbnNleiDDoCBjZSBxdSdpbHMgb250IGTDuyByZXNzZW50aXIgbG9yc3F1ZSB2b3VzIGxlcyBhdmV6IHF1aXR0w6lzLiBQZW5zZXogw6AgY29tYmllbiB2b3VzIGxlcyByZW5kaWV6IGhldXJldXguIFBlbnNleiDDoCBjZSBxdWUgdm91cyBwb3VycmlleiBjaGFuZ2VyIGVuIHJldmVuYW50IHZlcnMgZXV4LlwiXG5cbkxlIHJlZ2FyZCBkZSBiZWF1Y291cCBmaW5pdCBkZSBzJ2Fkb3VjaXIuIElscyBhdmFpZW50IGxlcyBtw6ptZXMgcmVncmV0cyBxdWUgTHVja3kuXG5cbk1yYSBzYXV0YSBzdXIgbCdvY2Nhc2lvbjogXCJDJ2VzdCBsw6Agb8O5IHR1IHRlIHRyb21wZXMsIHRyYcOudHJlLiBMZXMgaHVtYWlucyBvbnQgbCdhbW91ciBmYWNpbGUgZXQgZmFpYmxlLiBJbHMgb250IGltcG9zw6kgbGV1cnMgdm9pZXMgZG9taW5hbnRlcyBzdXIgbGVzIGNoYXRzIGRlcyBhbm7DqWVzIGR1cmFudCwgZXQgbGUgam91ciBvw7kgbm91cyBzb21tZXMgcGFydGlzLCBsYSBwbHVwYXJ0IGQnZW50cmUgZXV4IG5vdXMgb250IGNoZXJjaMOpcyBxdWVscXVlcyBoZXVyZXMsIHB1aXMgbm91cyBvbnQgZMOpY2xhcsOpcyBtb3J0cy4gSWxzIG4nb250IHBhcyDDqXTDqSBjYXBhYmxlcyBkZSBzJ2lucXVpw6l0ZXIgcG91ciBub3VzIHVuZSBmb2lzIHF1ZSBub3VzIHNvbW1lcyBwYXJ0aXMuXCJcblxuTGEgZmVtbWUgbCdpbnRlcnJvbXBpdDogXCJJbHMgdm91cyBvbnQuLi4gZMOpY2xhcsOpcyBtb3J0cz8gUGFzIGR1IHRvdXQsIGlscyBzZSBzb3VjaWFpZW50IGRlIHZvdXMgZXQgbGUgZm9udCB0b3Vqb3VycyBtYWludGVuYW50ISBRdSdlc3QtY2UgcXVlIHR1IHJhY29udGVzP1wiXG5cbk1yYSByw6lwb25kaXQ6IFwiUG91ciBsYSBwbHVwYXJ0LCBpbHMgbm91cyBvbnQgw6AgcGVpbmUgY2hlcmNow6lzIHVuIGpvdXIuIEFwcsOocyBjZWxhLCBpbHMgb250IGNvbGzDqSB1bmUgZmV1aWxsZSBhdmVjIG5vdHJlIHTDqnRlIGRlc3N1cyBkYW5zIGxlcyBydWVzLCBjb21tZSB2b3VzIGZhaXRlcyBkZXMgc3RhdHVlcyBkZSB2b3MgbW9ydHMuXCJcblxuXCJEZXMuLi4gYyfDqXRhaXQgZGVzIGF2aXMgZGUgcmVjaGVyY2hlIHBvdXIgdm91cyEgUGFzIGRlcyDDqXBpdGFwaGVzIVwiXG5cblwiRGVzIHF1b2ksIGh1bWFpbmU/XCJcblxuXCJWb3VzIHBvdXZleiBwYXJsZXIgbWFpcy4uLiBuZSBzYXZleiBwYXMgbGlyZT9cIlxuXG5MdWNreSBzZSB0b3VybmEgdmVycyBlbGxlOiBcIk5vcyBtYcOudHJlcyBub3VzIHBhcmxhaWVudCwgaWxzIG5lIG5vdXMgZmFpc2FpZW50IHBhcyBkZSBsZcOnb25zIGRlIGxlY3R1cmUuXCJcblxuTGEgZmVtbWUgbWFycXVhIHVuIHRlbXBzIGRlIHBhdXNlLiBFbmZpbiwgZWxsZSBleHBsaXF1YTpcblxuXCJDZXMgYWZmaWNoZXMgcXVpIHNvbnQgY29sbMOpZXMgcGFydG91dCBkYW5zIGxlcyBydWVzLCBhdmVjIGRlcyBpbWFnZXMgZGUgdm91cyBkZXNzdXMuIENlIHNvbnQgZGVzIGF2aXMgZGUgcmVjaGVyY2hlLiBWb3MgbWHDrnRyZXMgdm91bGFpZW50IHZvdXMgcmV0cm91dmVyLCBhbG9ycyBpbHMgb250IGFjY3JvY2jDqSBkZXMgYWZmaWNoZXMgcXVpIHZvdXMgZMOpY3JpdmFpZW50LiBFbGxlcyBkZW1hbmRhaWVudCDDoCB0b3VzIGNldXggcXVpIGxlcyBsaXNhaWVudCBkZSBjb250YWN0ZXIgdm9zIG1hw650cmVzIHMnaWxzIHZvdXMgdm95YWllbnQuIMOAIGNhdXNlIGRlIGxldXIgdHJhdmFpbCwgaWxzIG4nYXZhaWVudCBwYXMgbGUgdGVtcHMgZGUgdm91cyBjaGVyY2hlci4gSWwgeSBhIGV1IHVuZSBlbnF1w6p0ZSBwb3VyIHZvdXMuIERlcyBncm91cGVzIGRlIHJlY2hlcmNoZSB2b2xvbnRhaXJlLiBDb21tZW50IG5lIGxlcyBhdmV6LXZvdXMgcGFzIHZ1cz9cIlxuXG5cIk5vdXMgdml2aW9ucyBjYWNow6lzLCBlbiDDqXZpdGFudCBsZXMgaHVtYWlucy4gTm91cyBuZSBmYWlzaW9ucyBwYXMgYXR0ZW50aW9uIMOgIGNoYXF1ZSBncm91cGUuXCJcblxuTGEgZmVtbWUgZXV0IHVuZSBpZMOpZSBzb3VkYWluZTogXCJKZSByZXZpZW5zIHRvdXQgZGUgc3VpdGUuXCJcblxuTHVja3ksIGNvbmZ1cywgZGVtYW5kYTogXCJRdWUgdmFzLXR1IGZhaXJlLCBodW1haW5lP1wiXG5cblwiVmllbnMgYXZlYyBtb2kuIE5vdXMgYWxsb25zIGxldXIgcmFtZW5lciBsZXMgYWZmaWNoZXMgZGUgbGEgZ3JhbmRlIHJ1ZSBldCBsZXMgbGV1ciBsaXJlLlwiIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbInJhaXNvblJlc3Rlckx1Y2t5Il0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOlsicGhhc2UzIl0sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImNoYXRzIn1dfSwicnVlR3Jpc2UiOnsicHVibGljTmFtZSI6IlVuZSBydWUgZ3Jpc2UiLCJkZXNjcmlwdGlvbiI6IlVuZSBydWUgZ3Jpc2UgZXQgcXVlbGNvbnF1ZS4gTGVzIG1haXNvbnMgYXZhaWVudCBzb2l0IGxlcyB2b2xldHMgZmVybcOpcywgc29pdCB1biBub2lyIHByb2ZvbmQgZGVycmnDqHJlIGxlcyB2aXRyZXMuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IkFsbGVyIGRhbnMgdW5lIHJ1ZWxsZSBvdWJsacOpZSIsImRlc2NyaXB0aW9uIjoiVW5lIHJ1ZWxsZSBzYWxlIGV0IGTDqWNyw6lwaXRlIGNvaW5jw6llIGVudHJlIGRldXggYsOidGltZW50cywgb8O5IGxhIGx1bWnDqHJlIGRlIGxhIGx1bmUgbmUgcGFzc2FpdCBwYXMuIiwiYm9keSI6IkxhIGZlbW1lIGV0IEx1Y2t5IGFsbMOocmVudCBkYW5zIGxhIHJ1ZWxsZSwgcydlbmZvbsOnYW50IHBsdXMgcHJvZm9uZMOpbWVudCBkYW5zIGwnb21icmUgZGVzIHJlY29pbnMgcGVyZHVzIGRlIGxhIHZpbGxlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJydWVsbGVPdWJsaWVlIn0seyJwdWJsaWNOYW1lIjoiQWxsZXIgZGFucyB1biBjdWwgZGUgc2FjIiwiZGVzY3JpcHRpb24iOiJMZSBib3V0IGRlIGxhIHJ1ZS4gSWwgbid5IGF2YWl0IHBhcyBncmFuZCBjaG9zZSDDoCB2b2lyLCDDoCBwYXJ0IHVuZSBiZW5uZSDDoCBvcmR1cmVzLiIsImJvZHkiOiJJbHMgc2UgcmFwcHJvY2jDqHJlbnQgZHUgYm91dCBkZSBsYSBydWUuIMOAIHVuZSBjZXJ0YWluZSBkaXN0YW5jZSBkZSBsYSBiZW5uZSwgbGEgZmVtbWUgc2UgYm91Y2hhIGxlIG5leiBwb3VyIMOpY2hhcHBlciDDoCBsJ29kZXVyLiBMdWNreSwgbmUgcG91dmFudCBwYXMgbGUgZmFpcmUsIHJlc3RhIHNpbXBsZW1lbnQgZW4gcmV0cmFpdC4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiY3VsRGVTYWMifSx7InB1YmxpY05hbWUiOiJBbGxlciBkYW5zIGxhIGdyYW5kZSBydWUiLCJkZXNjcmlwdGlvbiI6IlNvcnRpciBhdSBjbGFpciBkZSBsdW5lLiIsImJvZHkiOiJJbHMgc29ydGlyZW50IGRlIGxhIHJ1ZSBncmlzZSBldCBlbnRyw6hyZW50IGRhbnMgbGEgZ3JhbmRlIHJ1ZSwgcXVpIHLDqXbDqXJiw6lyYWl0IGwnw6ljbGF0IGJsYW5jIGRlIGxhIGx1bmUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImdyYW5kZVJ1ZTEifV19LCJydWVsbGVNYWlzb24iOnsicHVibGljTmFtZSI6IkxhIHJ1ZWxsZSIsImRlc2NyaXB0aW9uIjoiTGEgcnVlbGxlIMOpdGFpdCBib3Jkw6llIGRlIHBsdXNpZXVycyBtYWlzb25zLCBkb250IGxhIHBsdXBhcnQgZGVzIGx1bWnDqHJlcyDDqXRhaWVudCDDqXRlaW50ZXMuIFF1ZWxxdWVzIGFmZmljaGVzIMOpdGFpZW50IGNvbGzDqWVzIGF1eCBtdXJzLiBBdSBib3V0LCBsJ2VudHLDqWUgZGUgbCdpbW1ldWJsZSBkZSBsYSBmZW1tZS4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiUmVudHJlciBjaGV6IHNvaSIsImRlc2NyaXB0aW9uIjoiUGFzIG1haW50ZW5hbnQuIiwiYm9keSI6IkxhIGZlbW1lIGF2YWl0IGRlcyBjaG9zZXMgw6AgZmFpcmUgYXZhbnQgcXVlIGxhIG51aXQgbmUgc2UgZmluaXNzZS4gQ2UgbifDqXRhaXQgcGFzIGxlIG1vbWVudCBkZSByZW50cmVyIGNoZXogZWxsZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicnVlbGxlTWFpc29uIn0seyJwdWJsaWNOYW1lIjoiUmV2ZW5pciBlbiBhcnJpw6hyZSIsImRlc2NyaXB0aW9uIjoiSWwgbid5IGF2YWl0IHJpZW4gw6Agdm9pciBpY2kuIiwiYm9keSI6IklscyByZXZpbnJlbnQgdmVycyBsYSBncmFuZGUgcnVlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJncmFuZGVSdWUzIn1dfSwicnVlbGxlT3VibGllZSI6eyJwdWJsaWNOYW1lIjoiVW5lIHJ1ZWxsZSBvdWJsacOpZSIsImRlc2NyaXB0aW9uIjoiQyfDqXRhaXQgdW5lIHJ1ZWxsZSBjb2luY8OpZSBlbnRyZSBkZXV4IGltbWV1YmxlcyBhbm9ueW1lcy4gU2Egc2V1bGUgY2FyYWN0w6lyaXN0aXF1ZSBub3RhYmxlIMOpdGFpdCBxdSdlbGxlIGNvbnRlbmFpdCBsJ2VzY2FsaWVyIGRlIHNlY291cnMgZCd1biBkZXMgaW1tZXVibGVzLiBFdCBhdSBzb21tZXQgZGUgY2V0IGltbWV1YmxlLCB1biByYXNzZW1ibGVtZW50IGRlcyBjaGF0cyBkZSBsYSB2aWxsZSwgYWNjZXNzb2lyZW1lbnQuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlByw6lzZW50ZXIgbGVzIHRyb2lzIHJhaXNvbnMgZGUgcGFydGlyIMOgIE1yYSIsImRlc2NyaXB0aW9uIjoiTGEgZmVtbWUgYXZhaXQgdHJvdXbDqSwgYXZlYyBMdWNreSwgdHJvaXMgcmFpc29ucyBwb3VyIHF1ZSBsZXMgY2hhdHMgcGFydGVudC4gUGV1dC3DqnRyZSBxdWUgTXJhIGwnw6ljb3V0ZXJhaXQsIG1haW50ZW5hbnQuIiwiYm9keSI6IklscyBtb250w6hyZW50IGxlcyBlc2NhbGllcnMgZXQgYXJyaXbDqHJlbnQgZGV2YW50IE1yYS4gTXJhIGxldmEgbGVzIHlldXgsIGJsYXPDqWU6IFwiTmUgdm91cyBhdmFpcy1qZSBwYXMgZGl0IGRlIHBhcnRpcj9cIlxuXG5MYSBmZW1tZSBleHBsaXF1YTogXCJMdWNreSBtJ2EgbW9udHLDqS4gSmUgY29tcHJlZW5kcyBtaWV1eCBtYWludGVuYW50LlwiXG5cbk1yYSByw6lwb25kaXQgZCd1biB0b24gbmFycXVvaXM6IFwiRXQ/IFNpIHR1IHJldmllbnMgaWNpIGMnZXN0IHF1ZSB0dSBuJ2FzIHJpZW4gY29tcHJpcy4gVHUgYXMgdnUgcG91cnF1b2kgbm91cyB2b3Vsb25zIHBhcnRpciwgcXVlbGxlIHNvcnRlIGRlIGdyYW5kZSByYWlzb24gcGV1eC10dSBjb25qdXJlciBwb3VyIG5vdXMgY29udmFpbmNyZSBkZSByZXN0ZXI/IE5vdXMgZGlyZSBkZSByZW50cmVyP1wiXG5cblwiTGVzIGh1bWFpbnMgbmUgc29udCBwYXMgZGVzIHNhZGlxdWVzLCBldCBqZSBzdWlzIHPDu3JlIHF1ZS1cIlxuXG5cIkMnZXN0IMOnYSwgdHUgZXMgY29tbWUgdG91cyBsZXMgaHVtYWlucy4gTMOiY2hlIGV0IG1lbnRldXNlLiBHYXJkZSB0ZXMgZXhjdXNlcyBwb3VyIHRvaSwgbm91cyBuJ2VuIGF2b25zIHBhcyBiZXNvaW4uIEZpbGUuIEMnZXN0IHRvbiBkZXJuaWVyIGF2ZXJ0aXNzZW1lbnQuXCJcblxuTGEgZmVtbWUgcmVzdGEgc2lsZW5jaWV1c2UgdW4gbW9tZW50LCBwdWlzIHNlIGRpcmlnZWEgdmVycyBsYSBzb3J0aWUgZGUgc2Vjb3Vycy4gRWxsZSByZWdhcmRhIGwnYXNzZW1ibMOpZSB1bmUgZGVybmnDqHJlIGZvaXMgZCd1biBhaXIgdHJpc3RlLCBwdWlzIHMnYXBwcsOqdGEgw6AgZGVzY2VuZHJlIGV0IHJlbnRyZXIgY2hleiBlbGxlLlxuXG5FbGxlIMOpdGFpdCB0cmlzdGUuIEVsbGUgdGVuYWl0IGF1eCBjaGF0cywgZXQgbGEgdmllIGFsbGFpdCDDqnRyZSBzb2xpdGFpcmUgc2FucyBldXguXG5cbkVsbGUgY29tbWVuw6dhIMOgIGRlc2NlbmRyZSBsZXMgbWFyY2hlcy4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UxIiwicmFpc29uUGFydGlyQW5pbWFsZXJpZSIsInJhaXNvblBhcnRpck1haXNvbiIsInJhaXNvblBhcnRpclZldGVyaW5haXJlIl0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6WyJwaGFzZTEiXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InRvdXRuRXN0UGFzRmluaSJ9LHsicHVibGljTmFtZSI6IlBhcmxlciDDoCBMdWNreSIsImRlc2NyaXB0aW9uIjoiUXVlIHZvdWxhaWVudC1pbHMgZmFpcmUsIGTDqWrDoD8iLCJib2R5IjoiTHVja3kgcsOpZXhwbGlxdWE6XG5cblwiT24gdmEgZGFucyBsYSB2aWxsZSBwb3VyIGVzc2F5ZXIgZGUgdGUgbW9udHJlciB0cm9pcyBkZXMgcmFpc29ucyBwb3VyIGxlc3F1ZWxsZXMgbGVzIGF1dHJlcyBjaGF0cyB2ZXVsZW50IHBhcnRpci4gVW5lIGZvaXMgcXUnb24gZW4gYXVyYSB0cm91dsOpIHRyb2lzLCBvbiBwb3VycmEgcmV2ZW5pciBpY2kuXCIiLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicGhhc2UxIl0sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJydWVsbGVPdWJsaWVlIn0seyJwdWJsaWNOYW1lIjoiUmVtb250ZXIgc3VyIGxlIHRvaXQgZGUgbCdpbW1ldWJsZSIsImRlc2NyaXB0aW9uIjoiSWwgw6l0YWl0IHRlbXBzIGRlIHJlcGFybGVyIGF1eCBjaGF0cy4iLCJib2R5IjoiTGEgZmVtbWUgbW9udGEgbGVzIG1hcmNoZXMgZGUgbCdlc2NhbGllciByYXBpZGVtZW50LCBMdWNreSBwbHVzIGxlbnRlbWVudC4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOlsicmFpc29uUmVzdGVyTHVja3kiLCJyYWlzb25SZXN0ZXJBbW91ciIsInJhaXNvblJlc3Rlck5vdXJyaXR1cmUiXSwibm8iOlsicGhhc2UxIl19LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbInRvaXRzIl0sInVuc2V0IjpbInJ1ZXMiXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjp0cnVlLCJuZXh0IjoiY2hhdHMifSx7InB1YmxpY05hbWUiOiJQYXJsZXIgw6AgTHVja3kiLCJkZXNjcmlwdGlvbiI6IlF1J2Vzc2F5YWllbnQtaWxzIGRlIGZhaXJlLCBkw6lqw6A/IiwiYm9keSI6Ikx1Y2t5IHNvdXBpcmEsIHB1aXMgbHVpIHLDqWV4cGxpcXVhOlxuXG5cIklsIHkgYSBlbmNvcmUgZGUgbCdlc3BvaXIhIFNpIG9uIHLDqXVzc2l0IMOgIHRyb3V2ZXIgdHJvaXMgcmFpc29ucyBwb3VyIHF1ZSBsZXMgY2hhdHMgcmVzdGVudCwgcGV1dC3DqnRyZSBxdSdvbiBwb3VycmEgZW4gY29udmFpbmNyZSB1bmUgcGFydGllLlwiXG5cblwiTWFpcyBlc3QtY2UgcXVlIG5vdXMgYXZvbnMgdW5lIGlkw6llIGRlIHJhaXNvbiBkZSByZXN0ZXI/XCJcblxuXCJKZSBuZSBzYWlzIHBhcy4gTWFpcyBqZSBwZW5zZSBxdWUgbGVzIGF1dHJlcyBuZSBzb250IHBhcyBhdXNzaSBzw7tycyBkdSBwbGFuIGRlIE1yYSBxdSdpbHMgbmUgbGUgbGFpc3NlbnQgcGFyYcOudHJlLiBTaSBvbiByw6l1c3NpdCDDoCBsZXVyIHJhcHBlbGVyIGRlcyBjaG9zZXMgcXUnaWxzIGFpbWFpZW50IGNoZXogbGVzIGh1bWFpbnMsIHBldXQtw6p0cmUgcXUnaWxzIGNoYW5nZXJvbnQgZCdhdmlzLlwiXG5cblwiTWFpcyBxdWVsbGVzIGNob3Nlcz9cIlxuXG5cIkNlbGEgcmVzdGUgw6AgdHJvdXZlci4gSmUgcGVuc2UgcXUndW4gdG91ciBkYW5zIGxhIHZpbGxlIGRldnJhaXQgbm91cyBkb25uZXIgZGVzIGlkw6llcy5cIiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6WyJwaGFzZTIiXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZWxsZU91YmxpZWUifSx7InB1YmxpY05hbWUiOiJBbGxlciBkYW5zIHVuZSBydWUgZ3Jpc2UiLCJkZXNjcmlwdGlvbiI6IklsIG4nYWxsYWl0IHBhcyBzZSBwYXNzZXIgZ3JhbmQgY2hvc2UgZGFucyBjZXR0ZSBydWVsbGU7IGlsIGZhbGxhaXQgc29ydGlyLiIsImJvZHkiOiJMYSBmZW1tZSBldCBMdWNreSBzb3J0aXJlbnQgZGUgbGEgcnVlbGxlIHZpZGUsIGFib3V0aXNzYW50IGRhbnMgdW5lIGF1dHJlIHJ1ZSB2aWRlLCBldCB0b3V0IGF1c3NpIGFub255bWUuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZUdyaXNlIn1dfSwicnVlVG9ydHVldXNlIjp7InB1YmxpY05hbWUiOiJVbmUgcnVlIHRvcnR1ZXVzZSIsImRlc2NyaXB0aW9uIjoiQyfDqXRhaXQgdW5lIHJ1ZSDDoCBsYSBmb3JtZSDDqXRyYW5nZS4gRWxsZSBzZXJwZW50YWl0IGVudHJlIGxlcyBtYWlzb25zLCBsYSBsdW5lIHNlIHJlZmzDqXRhbnQgZGFucyBsZXMgdml0cmVzIGRlIGNoYXF1ZSBjw7R0w6kuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlJlZ2FyZGVyIGxhIHZpdHJpbmUgZCd1bmUgY2xpbmlxdWUgdsOpdMOpcmluYWlyZS4iLCJkZXNjcmlwdGlvbiI6IlN1ciB1biBkZXMgY8O0dMOpcyBkZSBsYSBydWUsIGlsIHkgYXZhaXQgbGEgY2xpbmlxdWUgZCd1biB2w6l0w6lyaW5haXJlLiIsImJvZHkiOiJTdXIgbGEgdml0cmluZSwgaWwgeSBhdmFpdCB1bmUgYWZmaWNoZSBkZSBwcml4OlxuXG5Ww4lURVJJTkFJUkUgU0NIVU1BTk5cblxuLSBWQUNDSU5TXG4tIE3DiURFQ0lORSBHw4lOw4lSQUxFXG4tIENBU1RSQVRJT05cblxuTHVja3kgZml4YSBsZSBkZXJuaWVyIHBvaW50LiBJbCBkaXQgc2ltcGxlbWVudDpcblxuXCJDZSBuJ2VzdCBwYXMgdG91am91cnMgYWdyw6lhYmxlLCBkJ2FwcGFydGVuaXIgw6AgcXVlbHF1J3VuLlwiIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbInBoYXNlMSJdLCJubyI6WyJyYWlzb25QYXJ0aXJWZXRlcmluYWlyZSJdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6WyJyYWlzb25QYXJ0aXJWZXRlcmluYWlyZSJdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJydWVUb3J0dWV1c2UifSx7InB1YmxpY05hbWUiOiJBbGxlciB2ZXJzIGxlIGNlbnRyZS12aWxsZSIsImRlc2NyaXB0aW9uIjoiQXUgbG9pbiwgbGVzIGhhdXRzIGltbWV1YmxlcyBzZSBkZXNzaW5haWVudCwgYnJpbGxhbnQgdGVybmVtZW50IGRhbnMgbGEgbnVpdC4iLCJib2R5IjoiTGEgZmVtbWUgbWFyY2hhIHVuIGJvdXQgZGFucyBsYSBkaXJlY3Rpb24gZGVzIGLDonRpbWVudHMganVzcXUnw6AgYXJyaXZlciDDoCB1bmUgbm91dmVsbGUgcnVlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJ2ZXJzQ2VudHJlVmlsbGUifSx7InB1YmxpY05hbWUiOiJBbGxlciBkYW5zIGxhIGdyYW5kZSBydWUiLCJkZXNjcmlwdGlvbiI6IkRlIHJldG91ciB2ZXJzIGxlcyBsYW1wYWRhaXJlcy4iLCJib2R5IjoiSWxzIHJldHJvdXbDqHJlbnQgbGV1ciBjaGVtaW4gZGFucyBsZXMgZMOpdG91cnMgZGUgbGEgcnVlIGp1c3F1J8OgIGFycml2ZXIgw6AgbGEgZ3JhbmRlIHJ1ZS4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiZ3JhbmRlUnVlMSJ9XX0sInRvdXRuRXN0UGFzRmluaSI6eyJwdWJsaWNOYW1lIjoiXCJQc3QsIGh1bWFpbmUhXCIiLCJkZXNjcmlwdGlvbiI6IlVuIGFwcGVsIGRlcnJpw6hyZSBlbGxlLiBFbGxlIHNlIHJldG91cm5hLiBDJ8OpdGFpdCBMdWNreS4gSWwgYXZhaXQgcXVlbHF1ZSBjaG9zZSDDoCBkaXJlLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJcIlRvdXQgbidlc3QgcGFzIHBlcmR1IVwiIiwiZGVzY3JpcHRpb24iOiJJbCB2ZW5haXQgZCdhdm9pciB1bmUgaWTDqWUuIiwiYm9keSI6IlwiSHVtYWluZSEgSWwgeSBhIHBldXQtw6p0cmUgdW5lIHNvbHV0aW9uIVwiXG5cblwiVW5lIHNvbHV0aW9uIHBvdXIgcXVvaT9cIlxuXG5cIlBvdXIgbGVzIGZhaXJlIHJlc3RlciFcIlxuXG5MYSBmZW1tZSBtYXJxdWEgdW4gdGVtcHMgZGUgc2lsZW5jZSwgcHVpcyBwYXJsYTogXCJRdW9pPyBNcmEgYSByYWlzb24uIFZvdXMgaGHDr3NzZXogbGVzIGh1bWFpbnMsIG5vbj9cIlxuXG5cIk1yYSB2aWVudCBkZSBsJ2V4dMOpcmlldXIuIEVsbGUgbm91cyBhIHJhc3NlbWJsw6lzIHBvdXIgcGFydGlyIHBhcmNlIHF1J2VsbGUgZMOpdGVzdGFpdCBsZXMgaHVtYWlucy4gRWxsZSBuZSBwb3V2YWl0IHBhcyBjb21wcmVuZHJlIHBvdXJxdW9pIG9uIHJlc3RhaXQgYXZlYyBldXguXCJcblxuXCJFdD9cIlxuXG5cIkV0IGxhIHBsdXBhcnQgZGVzIGNoYXRzIGwnb250IHN1aXZpZSBwb3VyIHVuZSBhdXRyZSByYWlzb246IGlscyB2b3VsYWllbnQgbmUgcGx1cyBkw6lwZW5kcmUgZCd1biBodW1haW4uXCJcblxuXCJOJ2VzdC1jZSBwYXMgbGEgbcOqbWUgY2hvc2U/XCJcblxuXCJBYnNvbHVtZW50IHBhcy4gTGEgcGx1cGFydCBkZXMgY2hhdHMgbmUgZMOpdGVzdGVudCBwYXMgbGVzIGh1bWFpbnMsIGlscyB2ZXVsZW50IGp1c3RlIHBvdXZvaXIgZMOpY2lkZXIgZGUgbGV1ciB2aWUuIElscyBvbnQgc3VpdmkgTXJhIHBhcmNlIHF1J2lscyDDqXRhaWVudCBkJ2FjY29yZCBhdmVjIHNvbiBwcm9qZXQuIElscyBzZSBzb250IHBlcnN1YWTDqXMgZGVzIGlkw6llcyBhcHLDqHMuXCJcblxuXCJFdCBkb25jP1wiXG5cblwiSmUgcGVuc2UgcXVlIGJlYXVjb3VwIG9udCBlbnZpZSBkZSByZXZvaXIgbGV1ciBtYcOudHJlLCBtYWlzIHN1ciBkZXMgdGVybWVzIGRpZmbDqXJlbnRzLiBTaSBvbiBhcnJpdmUgw6AgbGV1ciByYXBwZWxlciBwb3VycXVvaSBpbHMgYWltYWllbnQgbGVzIGh1bWFpbnMsIHBldXQtw6p0cmUgcXVlIGNldHRlIGVudmllIHByZW5kcmEgbGUgcGFzIHN1ciBsZXMgcHJvamV0cyBkZSBNcmEuXCJcblxuXCJEZSBjb21iaWVuIGRlIHJhaXNvbnMgYS10LW9uIGJlc29pbj9cIlxuXG5cIkplIHBlbnNlIHF1ZSBzaSBvbiBuZSBsZXMgY29udmFpbmMgcGFzIGF2ZWMgdHJvaXMsIG9uIG5lIGxlcyBjb252YWluY3JhIHBhcy5cIlxuXG5cIlZhIHBvdXIgdHJvaXMsIGFsb3JzLlwiXG5cblwiUGFyZmFpdCEgRGVzY2VuZG9ucyBkYW5zIGxlcyBydWVzIHBvdXIgdHJvdXZlciBkZXMgaWTDqWVzLlwiIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6WyJwaGFzZTIiXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoicnVlbGxlT3VibGllZSJ9XX0sInZlcnNDZW50cmVWaWxsZSI6eyJwdWJsaWNOYW1lIjoiVW5lIHJ1ZSBlbiBwZW50ZSIsImRlc2NyaXB0aW9uIjoiSWxzIMOpdGFpZW50IGVuIGhhdXQgZCd1bmUgcnVlIHF1aSBkZXNjZW5kYWl0IGVuIHBlbnRlIHRvdXQgZHJvaXQgdmVycyBsZSBjZW50cmUgdmlsbGUuIERlIGzDoCwgb24gcG91dmFpdCB2b2lyIHRvdXRlIGxhIHZpbGxlIGVuIGRlc3NvdXMuIiwiY2hvaWNlcyI6W3sicHVibGljTmFtZSI6IlJldG91cm5lciDDoCBsYSBydWUgdG9ydHVldXNlIiwiZGVzY3JpcHRpb24iOiJcIk/DuSB2YS10LW9uP1wiIGRlbWFuZGEgTHVja3ksIGNvbmZ1cy4iLCJib2R5IjoiTGEgZmVtbWUgZml4YSBsZXMgZ3JhbmRzIGltbWV1YmxlcyBhdSBsb2luLlxuXG5cIk/DuSB2YS10LW9uP1wiIGRlbWFuZGEgTHVja3ksIGNvbmZ1cy5cblxuXCJOdWxsZSBwYXJ0XCIsIHLDqXBvbmRpdCBsYSBmZW1tZSwgZXQgZWxsZSByZXZpbnQgc3VyIHNlcyBwYXMuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6InJ1ZVRvcnR1ZXVzZSJ9XX0sImVwaWxvZ3VlIjp7InB1YmxpY05hbWUiOiLDiXBpbG9ndWUiLCJkZXNjcmlwdGlvbiI6IlBsdXNpZXVycyBzZW1haW5lcyBhdmFpZW50IHBhc3PDqS4gVW4gYmVhdSBzb2lyLCDDoCBsJ2hldXJlIG/DuSBsZSBjaWVsIHRlcm1pbmFpdCBkZSByb3VnaXIsIGxhIGZlbW1lIHZlbmFpdCBkZSByZW50cmVyIGNoZXogZWxsZS4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiTGlyZSBsZSBqb3VybmFsIiwiZGVzY3JpcHRpb24iOiJVbiBqb3VybmFsIGRhdGFudCBkJ2lsIHkgYSBxdWVscXVlcyBqb3VycyB0cmHDrm5haXQgZW5jb3JlIHN1ciBsYSB0YWJsZS4iLCJib2R5IjoiTGEgdW5lIMOpdGFpdCBhdXNzaSDDqW5lcmdpcXVlIHF1ZSBkJ2hhYml0dWRlOlxuXG5MRSBNT05ERSBQT1NULUNIQVRTXG5Ob3MgcGlzdGVzIHN1ciBsZSBmdXR1ciBhdmVjIGxlcyBhbmltYXV4IHBhcmxhbnRzIHAuIDNcblxuVW4gbW9kw6hsZTogVW4gY2hhdCBzcMOpY2lhbGlzdGUgZHUgY29tcG9ydGVtZW50IGFuaW1hbCDDoCBsJ1VuaXZlcnNpdMOpIGxvY2FsZSBwLiA3XG5cbkxlcyBjaGllbnMgcGV1dmVudC1pbHMgYXVzc2kgcGFybGVyPyBwLiAxMFxuVW4gZXhwZXJ0IHMnZXhwcmltZTogXCJOb3RyZSBjaGF0IG5vdXMgYXNzdXJlIHF1ZSBub24sIG1haXMgb24gcGV1dCBwZXV0LcOqdHJlIGFycml2ZXIgw6AgcXVlbHF1ZSBjaG9zZS5cIiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJlcGlsb2d1ZSJ9LHsicHVibGljTmFtZSI6IlbDqXJpZmllciBsZSBib2wgZGUgbGFpdCBzdXIgbGEgZmVuw6p0cmUiLCJkZXNjcmlwdGlvbiI6IlZpZGUsIGNvbW1lIHRvdXMgbGVzIHNvaXJzIGxvcnNxdSdlbGxlIHJlbnRyYWl0LiIsImJvZHkiOiJMYSBmZW1tZSBzb3VyaXQgZW4gdm95YW50IGxlIGJvbCB2aWRlLiBFbGxlIGxlIHbDqXJpZmlhaXQgZW4gc2UgcsOpdmVpbGxhbnQgZXQgZW4gcmVudHJhbnQgY2hleiBlbGxlIGxlIHNvaXIsIGV0IGVsbGUgbGUgdHJvdXZhaXQgdG91am91cnMgdmlkZSwgZGVwdWlzIHF1ZSBsZXMgY2hhdHMgw6l0YWllbnQgcmV2ZW51cy4gRmF0aWd1w6llIGNlIHNvaXItbMOgLCBlbGxlIGTDqWNpZGEgcXUnZWxsZSBsZSByZW1wbGlyYWl0IHVuIHBldSBwbHVzIHRhcmQuIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImVwaWxvZ3VlIn0seyJwdWJsaWNOYW1lIjoiUmVnYXJkZXIgcGFyIGxhIGZlbsOqdHJlIiwiZGVzY3JpcHRpb24iOiJMYSB2aWxsZSDDqXRhaXQgYmVsbGUgw6AgY2UgbW9tZW50IGzDoCBkZSBsYSBqb3VybsOpZS4iLCJib2R5IjoiTGEgZmVtbWUgcydhY2NvdWRhIMOgIGxhIGZlbsOqdHJlLiBEZXB1aXMgc29uIGF2ZW50dXJlIGF2ZWMgTHVja3ksIHNhIHZpc2lvbiBkZSBsYSB2aWxsZSBhdmFpdCBjaGFuZ8OpLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOnRydWUsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6ImVwaWxvZ3VlRmVuZXRyZSJ9LHsicHVibGljTmFtZSI6Ik91dnJpciBsYSBwb3J0ZSIsImRlc2NyaXB0aW9uIjoiUXVlbHF1J3VuIGZyYXBwYWl0IMOgIGxhIHBvcnRlLiIsImJvZHkiOiJMYSBmZW1tZSBhbGxhIG91dnJpciBsYSBwb3J0ZSwgcsOpdsOpbGFudC4uLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6WyJyYWlzb25SZXN0ZXJMdWNreSJdLCJubyI6W119LCJ2aXNpYmxlIjp0cnVlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJlcGlsb2d1ZVBvcnRlIn1dfSwiZXBpbG9ndWVGZW5ldHJlIjp7InB1YmxpY05hbWUiOiJQYXIgbGEgZmVuw6p0cmUiLCJkZXNjcmlwdGlvbiI6IkRlcHVpcyBsYSBmZW7DqnRyZSwgbGEgdmlsbGUgcyfDqXRlbmRhaXQgYXUgbG9pbiwgdmFzdGUgZXQgY2FsbWUuIFVuZSBsw6lnw6hyZSBicmlzZSByYWZyYWljaGlzc2FpdCBsJ2F0bW9zcGjDqHJlIGR1IGTDqWJ1dCBkZSBsJ8OpdMOpLiIsImNob2ljZXMiOlt7InB1YmxpY05hbWUiOiJSZWdhcmRlciBsZXMgaW1tZXVibGVzIGR1IGNlbnRyZS12aWxsZSIsImRlc2NyaXB0aW9uIjoiQXUgbG9pbiwgbGEgZmVtbWUgcG91dmFpdCB2b2lyIGxlcyBsdW1pw6hyZXMgZGVzIGltbWV1YmxlcyBkdSBjZW50cmUtdmlsbGUuIERlcnJpw6hyZSwgbGVzIGRlcm5pw6hyZXMgbHVtacOocmVzIGRlIGxhIGpvdXJuw6llLiIsImJvZHkiOiJMZXMgaW1tZXVibGVzIGJyaWxsYWllbnQgYXUgbG9pbiwgbWFpcyBpbCBuJ8OpdGFpZW50IHF1ZSBxdWVscXVlcyBmb3JtZXMgcXVpIGRlIGTDqWNvdXBhaWVudCBzdXIgbCdpbW1lbnNlIGFycmnDqHJlLXBsYW4gZHUgY2llbCBkdSBjcsOpcHVzY3VsZS4gRGUgZ3JhbmRzIG51YWdlcyByb3NlcyBsZSB0cmF2ZXJzYWllbnQsIHN1aXZhbnQgbGVzIHRyYcOubsOpZXMgZCdhdmlvbnMgcXVpIMOpdGFpZW50IHBhc3PDqXMgaWwgeSBhIGJpZW4gbG9uZ3RlbXBzLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJlcGlsb2d1ZUZlbmV0cmUifSx7InB1YmxpY05hbWUiOiJSZWdhcmRlciBsZXMgw6l0b2lsZXMiLCJkZXNjcmlwdGlvbiI6IsOJdG9pbGVzPyBRdWVsbGVzIMOpdG9pbGVzPyBTaSBlbGxlcyDDqXRhaWVudCBpbnZpc2libGVzIGRhbnMgbGUgY2llbCwgbGVzIGx1bWnDqHJlcyBkZXMgZmVuw6p0cmVzIGNvbnN0ZWxsYWllbnQgbGEgdGVycmUuIiwiYm9keSI6IkxhIGZlbW1lIGxldmEgbGVzIHlldXggdmVycyBsZSBjaWVsLiBMYSBsdW1pw6hyZSBkZXMgbWFpc29ucyBzZSByw6l2ZXJiw6lyYWl0IHN1ciBsZSBjaWVsLCByZW5kYW50IGxlcyDDqXRvaWxlcyBpbnZpc2libGVzLiBFbiBsaWV1IGQnZWxsZXMsIGxlcyB0b2l0cyBzZSBkcmVzc2FpZW50IGNvbW1lIGRlcyBjaW1lcyDDoCBjb25xdcOpcmlyLCBldCBsZXMgZmVuw6p0cmVzIGNvbW1lcyBkZXMgYXN0cmVzLiDDgCBsZXMgcmVnYXJkZXIsIG9uIHBvdXZhaXQgc2UgcGVyZHJlIGRlZGFucy5cblxuRWxsZSBldXQgZW52aWUgZGUgcmV0b3VybmVyIHNlIGJhbGFkZXIgc3VyIGNlcyB0b2l0cyDDoCBsJ2luc3RhbnQgbcOqbWUsIGNvbW1lIGVsbGUgYXZhaXQgcHJpcyBwb3VyIGhhYml0dWRlIGRlIGZhaXJlIGFwcsOocyBzb24gZXNjYXBhZGUgbm9jdHVybmUgcXVlbHF1ZXMgc2VtYWluZXMgcGx1cyB0w7R0LiBDZSBzb2lyLWzDoCwgZmF0aWd1w6llLCBlbGxlIGTDqWNpZGEgZGUgbmUgcGFzIGxlIGZhaXJlLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJlcGlsb2d1ZUZlbmV0cmUifSx7InB1YmxpY05hbWUiOiJSZWdhcmRlciBsZXMgcnVlcyBlbiBkZXNzb3VzIiwiZGVzY3JpcHRpb24iOiJFbiBkZXNzb3VzIGRlIGwnaW1tZXVibGUsIGxhIGZlbW1lIHBvdXZhaXQgdm9pciBzJ8OpdGFsZXIgbGUgcsOpc2VhdSBjb21wbGV4ZSBkZXMgcnVlcyBkZSBsYSB2aWxsZS4iLCJib2R5IjoiTGEgZmVtbWUgYmFpc3NhIGxlcyB5ZXV4LiBFbiBkZXNzb3VzIGQnZWxsZSwgbGEgdG9pbGUgZGVzIHJ1ZXMgc29tYnJlcywgw6ljbGFpcsOpZXMgcGFyIGVuZHJvaXRzIHBhciBkZXMgbGFtcGFkYWlyZXMuIEMnw6l0YWl0IHVuZSB0b2lsZSBpbmZpbmllIGRlIGNoZW1pbnMgZW5sYWPDqXMgcXVpIG4nYXR0ZW5kYWl0IHF1ZSBkJ8OqdHJlIHBhcmNvdXJ1ZSwgcGxlaW5lIGRlIHJlY29pbnMgY2FjaMOpcy4gVsOpcml0YWJsZW1lbnQsIGVsbGUgbidhdHRlbmRhaXQgcXUnw6Agw6p0cmUgZXhwbG9yw6llLiIsImltYWdlTmFtZSI6bnVsbCwicmVxdWlyZW1lbnRzIjp7InllcyI6W10sIm5vIjpbXX0sInZpc2libGUiOmZhbHNlLCJzaWRlZWZmZWN0cyI6eyJzZXQiOltdLCJ1bnNldCI6W10sImZsaXAiOltdfSwiaGlkZVJlcXVpcmVtZW50cyI6ZmFsc2UsIm5leHQiOiJlcGlsb2d1ZUZlbmV0cmUifSx7InB1YmxpY05hbWUiOiJGYWlyZSBhdXRyZSBjaG9zZSIsImRlc2NyaXB0aW9uIjoiTGEgZmVtbWUgYXVyYWl0IHB1IHLDqnZlciBkZXMgaGV1cmVzIGR1cmFudCBlbiByZWdhcmRhbnQgcGFyIGxhIGZlbsOqdHJlLCBtYWlzIGlsIMOpdGFpdCB0ZW1wcyBkJ2FsbGVyIHNlIHJlcG9zZXIuIiwiYm9keSI6IkVsbGUgbGV2YSBzb24gY291ZGUgZHUgcmVib3JkIGRlIGxhIGZlbsOqdHJlIGV0IHNlIHJldG91cm5hIHZlcnMgbGUgcmVzdGUgZGUgbCdhcHBhcnRlbWVudC4iLCJpbWFnZU5hbWUiOm51bGwsInJlcXVpcmVtZW50cyI6eyJ5ZXMiOltdLCJubyI6W119LCJ2aXNpYmxlIjpmYWxzZSwic2lkZWVmZmVjdHMiOnsic2V0IjpbXSwidW5zZXQiOltdLCJmbGlwIjpbXX0sImhpZGVSZXF1aXJlbWVudHMiOmZhbHNlLCJuZXh0IjoiZXBpbG9ndWUifV19LCJlcGlsb2d1ZVBvcnRlIjp7InB1YmxpY05hbWUiOiJEZXJyacOocmUgbGEgcG9ydGUiLCJkZXNjcmlwdGlvbiI6IkxhIGZlbW1lIG91dnJpdCBsYSBwb3J0ZS4iLCJjaG9pY2VzIjpbeyJwdWJsaWNOYW1lIjoiQyfDqXRhaXQgTHVja3khIiwiZGVzY3JpcHRpb24iOiJFbGxlIG5lIGwnYXZhaXQgcGFzIHZ1IGRlcHVpcyBsb25ndGVtcHMuIiwiYm9keSI6IkxhIGZlbW1lIG91dnJpdCBsYSBwb3J0ZS4gRWxsZSBiYWlzc2EgZCdhYm9yZCBsZXMgeWV1eCBldCB2aXQgTHVja3kuIEVsbGUgw6l0YWl0IHJhdmllIGRlIGxlIHZvaXI7IGlscyBuZSBzJ8OpdGFpZW50IHBhcyByZXZ1cyBkZXB1aXMgbGEgZ3JhbmRlIG51aXQuIEVsbGUgc2UgYmFpc3NhIHBvdXIgbHVpIHBhcmxlcjpcblxuXCJTYWx1dCBMdWNreSEgQ29tbWVudCB2YXMtdHU/XCJcblxuXCJCaWVuLCBodW1haW5lLCBtYWlzIHJlZ2FyZGUgYXV0b3VyIGRlIHRvaS4gSmUgbmUgc3VpcyBwYXMgc2V1bC5cIlxuXG5FbGxlIHJlZ2FyZGEgZGFucyBjaGFxdWUgZGlyZWN0aW9uIGR1IGNvdWxvaXIgZGUgbCdpbW1ldWJsZS4gUXVlbHF1ZXMgc2lsaG91ZXR0ZXMgYXR0ZW5kYWllbnQgYXUgZm9uZCBkdSBjb3Vsb2lyLlxuXG5cIlZvdXMgcG91dmV6IHZlbmlyLCB0b3V0IGxlIG1vbmRlIVwiXG5cbkxlcyBzaWxob3VldHRlcyBjb21tZW5jw6hyZW50IMOgIHMnYXBwcm9jaGVyLiBDJ8OpdGFpdCBkZXMgY2hhdHMuIEV0IGRlcnJpw6hyZSBldXgsIGQnYXV0cmVzIGNoYXRzLiBJbHMgYXJyaXbDqHJlbnQgZGV2YW50IGxhIHBvcnRlIGQnZW50csOpZSwgZXQgbGUgY291bG9pciBmdXQgYmllbnTDtHQgcmVtcGxpIGRlIGNoYXRzLlxuXG5cIk5vdXMgc29tbWVzIHZlbnVzIHRlIGRpcmUgbWVyY2kuXCJcblxuRklOIiwiaW1hZ2VOYW1lIjpudWxsLCJyZXF1aXJlbWVudHMiOnsieWVzIjpbXSwibm8iOltdfSwidmlzaWJsZSI6ZmFsc2UsInNpZGVlZmZlY3RzIjp7InNldCI6W10sInVuc2V0IjpbXSwiZmxpcCI6W119LCJoaWRlUmVxdWlyZW1lbnRzIjpmYWxzZSwibmV4dCI6bnVsbH1dfX19"}];
js_Boot.__toStr = ({ }).toString;
ChoiceComponent.displayName = "ChoiceComponent";
Game.displayName = "Game";
ResultPanel.displayName = "ResultPanel";
RoomPanel.displayName = "RoomPanel";
StoryPanel.displayName = "StoryPanel";
Tooltip.displayName = "Tooltip";
VarImage.displayName = "VarImage";
VariablesPanel.displayName = "VariablesPanel";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
Game.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
